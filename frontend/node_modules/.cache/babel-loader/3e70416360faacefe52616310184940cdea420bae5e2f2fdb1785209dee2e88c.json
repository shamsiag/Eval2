{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"cart-page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"cart-items\"\n};\nconst _hoisted_3 = {\n  class: \"cart-item-info\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"cart-item-details\"\n};\nconst _hoisted_6 = {\n  class: \"cart-item-name\"\n};\nconst _hoisted_7 = {\n  class: \"cart-item-description\"\n};\nconst _hoisted_8 = {\n  class: \"cart-item-quantity\"\n};\nconst _hoisted_9 = {\n  class: \"quantity-display\"\n};\nconst _hoisted_10 = {\n  class: \"cart-item-price\"\n};\nconst _hoisted_11 = {\n  class: \"product-unit-price\"\n};\nconst _hoisted_12 = {\n  class: \"product-total-price\"\n};\nconst _hoisted_13 = [\"onClick\"];\nconst _hoisted_14 = {\n  key: 2,\n  class: \"cart-summary\"\n};\nconst _hoisted_15 = {\n  class: \"total\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", {\n    class: \"section-title\"\n  }, \"TON\", -1 /* HOISTED */)), _cache[4] || (_cache[4] = _createElementVNode(\"h2\", {\n    class: \"section-title\"\n  }, \"PANIER\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Affichage des produits dans le panier, si le panier n'est pas vide \"), $data.cartItems.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cartItems, (product, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"cart-item\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n      src: product.image,\n      alt: \"Product Image\",\n      class: \"cart-item-image\"\n    }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"h3\", _hoisted_6, _toDisplayString(product.name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_7, _toDisplayString(product.description), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, _toDisplayString(product.quantity), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"span\", _hoisted_11, _toDisplayString($options.formatCurrency(product.priceTtc)) + \" TTC\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_12, _toDisplayString($options.formatCurrency(product.priceTtc * product.quantity)), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      class: \"remove-button\",\n      onClick: $event => $options.deleteCartItem(product)\n    }, \" Supprimer \", 8 /* PROPS */, _hoisted_13)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Message si le panier est vide \"), _cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n    class: \"empty-message\"\n  }, \"Votre panier est vide.\", -1 /* HOISTED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" Résumé du panier et bouton de commande \"), $data.cartItems.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createTextVNode(\"Total : \")), _createElementVNode(\"span\", null, _toDisplayString($options.formatCurrency($data.totalPrice)), 1 /* TEXT */)])]), _createElementVNode(\"button\", {\n    class: \"checkout-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.validateOrder && $options.validateOrder(...args))\n  }, \" Valider la commande \")])) : _createCommentVNode(\"v-if\", true)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createCommentVNode","$data","cartItems","length","_hoisted_2","_renderList","product","index","_hoisted_3","src","image","alt","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","name","_hoisted_7","description","_hoisted_8","_hoisted_9","quantity","_hoisted_10","_hoisted_11","$options","formatCurrency","priceTtc","_hoisted_12","onClick","$event","deleteCartItem","_hoisted_13","_hoisted_14","_hoisted_15","_createTextVNode","totalPrice","_cache","args","validateOrder"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/CartPage.vue"],"sourcesContent":["<template>\n  <h2 class=\"section-title\">TON</h2>\n  <h2 class=\"section-title\">PANIER</h2>\n  <div class=\"cart-page\">\n    \n\n    <!-- Affichage des produits dans le panier, si le panier n'est pas vide -->\n    <div class=\"cart-items\" v-if=\"cartItems.length\">\n      <div v-for=\"(product, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n        <div class=\"cart-item-info\">\n          <img :src=\"product.image\" alt=\"Product Image\" class=\"cart-item-image\" />\n          <div class=\"cart-item-details\">\n            <h3 class=\"cart-item-name\">{{ product.name }}</h3>\n            <p class=\"cart-item-description\">{{ product.description }}</p>\n          </div>\n        </div>\n\n        <div class=\"cart-item-quantity\">\n          <span class=\"quantity-display\">{{ product.quantity }}</span>\n        </div>\n\n        <div class=\"cart-item-price\">\n          <span class=\"product-unit-price\">{{ formatCurrency(product.priceTtc) }} TTC</span>\n          <span class=\"product-total-price\">{{ formatCurrency(product.priceTtc * product.quantity) }}</span>\n        </div>\n\n        <button class=\"remove-button\" @click=\"deleteCartItem(product)\">\n          Supprimer\n        </button>\n      </div>\n    </div>\n\n    <!-- Message si le panier est vide -->\n    <p v-else class=\"empty-message\">Votre panier est vide.</p>\n\n    <!-- Résumé du panier et bouton de commande -->\n    <div class=\"cart-summary\" v-if=\"cartItems.length\">\n      <div class=\"total\">\n        <p>Total : <span>{{ formatCurrency(totalPrice) }}</span></p>\n      </div>\n      <button class=\"checkout-button\" @click=\"validateOrder\">\n        Valider la commande\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null,\n      products: [],\n      apiKey: localStorage.getItem(\"apiKey\"),\n      apiLink: localStorage.getItem(\"apiLink\"),\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce(\n        (sum, product) => sum + product.priceTtc * product.quantity,\n        0\n      );\n    },\n    async updateCart(product) {\n      if (!this.orderId) return console.error(\"Aucune commande brouillon.\");\n\n      if (product.quantity < 1) product.quantity = 1;\n\n      try {\n        const updateUrl = `${this.apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            DOLAPIKEY: this.apiKey,\n          },\n          body: JSON.stringify({ qty: parseFloat(product.quantity) }),\n        });\n\n        if (!response.ok) {\n          const err = await response.json();\n          return console.error(\"Erreur API:\", err);\n        }\n\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n    },\n    async validateOrder() {\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n\n      try {\n        const updateStatusUrl = `${this.apiLink}/orders/${this.orderId}/validate`;\n        const response = await fetch(updateStatusUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            DOLAPIKEY: this.apiKey,\n          },\n          body: JSON.stringify({ status: 5 }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          console.error(\"Erreur lors de la validation de la commande\", error);\n          return;\n        }\n\n        alert(\"Commande validée et payée !\");\n        this.$router.push(\"/confirmation\");\n      } catch (error) {\n        console.error(\"Erreur lors de la validation de la commande:\", error);\n      }\n    },\n    async initCart() {\n      try {\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!clientId || !this.apiKey || !this.apiLink)\n          throw new Error(\"Données manquantes (ClientId, API Key ou API Link)\");\n\n        const searchUrl = `${this.apiLink}/orders?sqlfilters=(fk_statut:=:0)and(fk_soc:=:${clientId})`;\n        const response = await fetch(searchUrl, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (!response.ok) throw new Error(\"Erreur réseau\");\n\n        const orders = await response.json();\n\n        if (orders.length > 0) {\n          this.orderId = orders[0].id;\n        } else {\n          this.orderId = await this.createDraftOrder(clientId);\n        }\n\n        await this.fetchCartFromDolibarr();\n      } catch (error) {\n        console.error(\"Erreur lors de l'initialisation du panier:\", error);\n      }\n    },\n    async createDraftOrder(clientId) {\n      const payload = {\n        socid: clientId,\n        date: new Date().toISOString().split(\"T\")[0],\n        status: 0,\n        lines: [],\n      };\n\n      const response = await fetch(`${this.apiLink}/orders`, {\n        method: \"POST\",\n        headers: {\n          DOLAPIKEY: this.apiKey,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const message = await response.text();\n        throw new Error(`Erreur création commande: ${message}`);\n      }\n\n      const newOrder = await response.json();\n      return newOrder.id;\n    },\n    async fetchProducts() {\n      try {\n        const url = `${this.apiLink}/products`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        this.products = await response.json();\n      } catch (error) {\n        console.error(\"Erreur produits:\", error);\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        await this.fetchProducts();\n\n        if (!this.orderId) return;\n\n        const url = `${this.apiLink}/orders/${this.orderId}/lines`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        const lines = await response.json();\n        const filteredLines = lines.filter((line) => parseFloat(line.qty) > 0);\n        this.cartItems = this.mergeCartItems(filteredLines);\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur récupération panier:\", error);\n      }\n    },\n    mergeCartItems(lines) {\n  // Fusion des lignes du panier avec des produits identiques\n    const mergedItems = [];\n\n    lines.forEach((line) => {\n      const productData = this.products.find((p) => p.id === line.fk_product) || {};\n      const tvaRate = parseFloat(productData.tva_tx || 0) / 100;\n      const priceHt = parseFloat(line.subprice);\n      const priceTtc = +(priceHt * (1 + tvaRate)).toFixed(2);\n\n      const existingProduct = mergedItems.find(item => item.id === line.fk_product);\n      \n      if (existingProduct) {\n        // Si le produit existe déjà, on ajoute la quantité\n        existingProduct.quantity += parseFloat(line.qty) || 1;\n      } else {\n        // Sinon, on l'ajoute comme un nouvel élément\n        mergedItems.push({\n          lineId: line.id,\n          id: line.fk_product,\n          name: productData.label || \"Produit inconnu\",\n          description: productData.description || \"\",\n          image: productData.photo || \"\",\n          priceHt,\n          priceTtc,\n          quantity: Math.max(1, parseFloat(line.qty) || 1),\n        });\n      }\n    });\n\n    return mergedItems;\n  },\n    async deleteCartItem(product) {\n      if (!this.orderId) return;\n\n      try {\n        const deleteUrl = `${this.apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(deleteUrl, {\n          method: \"DELETE\",\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (response.ok) {\n          this.cartItems = this.cartItems.filter((item) => item.lineId !== product.lineId);\n          this.updateTotal();\n        } else {\n          console.error(\"Erreur suppression:\", await response.json());\n        }\n      } catch (error) {\n        console.error(\"Erreur deleteCartItem:\", error);\n      }\n    },\n  },\n  mounted() {\n    this.initCart();\n  },\n};\n</script>\n\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 100;\n  margin-left:115px;\n}\n\n@font-face {\n  font-family: 'PP Formula';\n  src: url('@/assets/fonts/PPFormula-NarrowRegular.otf') format('opentype');\n  font-weight: medium;\n}\n\n@font-face {\n  font-family: 'DAWBE';\n  src: url('@/assets/fonts/dawbe.otf') format('opentype');\n  font-weight: bold;\n}\n\n/* Conteneur de la page du panier */\n.cart-page {\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Titre */\nh1 {\n  font-size: 32px;\n  color: #0e100e;\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n/* Liste des produits dans le panier */\n.cart-items {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* Chaque produit du panier */\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #f7f7f7;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n/* Détails du produit */\n.cart-item-info {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n/* Image du produit */\n.cart-item-image {\n  width: 80px;\n  height: auto;\n  border-radius: 5px;\n}\n\n/* Nom et description du produit */\n.cart-item-details {\n  max-width: 400px;\n}\n\n/* Quantité */\n.cart-item-quantity input {\n  width: 50px;\n  padding: 5px;\n  font-size: 16px;\n  text-align: center;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n/* Prix unitaire et prix total */\n.cart-item-price {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.product-unit-price,\n.product-total-price {\n  font-size: 18px;\n  color: #0e100e;\n}\n\n.product-total-price {\n  font-weight: bold;\n  margin-top: 10px;\n}\n\n/* Résumé du panier et bouton de commande */\n.cart-summary {\n  margin-top: 30px;\n  text-align: right;\n}\n\n.total {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.checkout-button {\n  padding: 10px 30px;\n  background-color: #5aaad8;\n  color: white;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.checkout-button:hover {\n  background-color: #0e100e;\n}\n\n/* Message quand le panier est vide */\n.empty-message {\n  text-align: center;\n  font-size: 20px;\n  color: #888;\n  margin-top: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}