{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"shop-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  const _component_ShopHeader = _resolveComponent(\"ShopHeader\");\n  const _component_ProductList = _resolveComponent(\"ProductList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavBar), _createVNode(_component_ShopHeader, {\n    title: \"NOS\",\n    subtitle: \"PRODUITS\"\n  }), _createVNode(_component_ProductList, {\n    products: $data.products,\n    onAddToCart: $options.addToCart,\n    onAddNote: $options.addNote\n  }, null, 8 /* PROPS */, [\"products\", \"onAddToCart\", \"onAddNote\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_NavBar","_component_ShopHeader","title","subtitle","_component_ProductList","products","$data","onAddToCart","$options","addToCart","onAddNote","addNote"],"sources":["/Users/macbookpro/Sham/S6/Eval2-1/frontend/src/views/ShopPage.vue"],"sourcesContent":["<template>\n  <div class=\"shop-container\">\n    <NavBar />\n    <ShopHeader title=\"NOS\" subtitle=\"PRODUITS\" />\n    <ProductList \n      :products=\"products\" \n      @add-to-cart=\"addToCart\" \n      @add-note=\"addNote\" \n    />\n  </div>\n</template>\n\n<script>\nimport NavBar from '@/components/NavBar.vue';\nimport ShopHeader from '@/components/ShopHeader.vue';\nimport ProductList from '@/components/ProductList.vue';\n\nexport default {\n  name: 'ShopPage',\n  components: {\n    NavBar,\n    ShopHeader,\n    ProductList\n  },\n  data() {\n    return {\n      products: [],\n      cartItems: [],\n      cartId: null,\n      authToken: localStorage.getItem('authToken'),\n      apiLink: localStorage.getItem('apiLink') || 'http://localhost:8080/api/v1',\n      priceListVersionId: 105\n    };\n  },\n  async created() {\n    await this.fetchProducts();\n    this.loadCartFromStorage();\n  },\n  methods: {\n    async fetchProducts() {\n      try {\n        console.log('Récupération des produits iDempiere...');\n        if (!this.authToken) throw new Error('Token d\\'authentification manquant');\n\n        const filter = `M_PriceList_Version_ID eq ${this.priceListVersionId}`;\n        const url = `${this.apiLink}/models/M_Product?$select=M_Product_ID,Name&$expand=M_ProductPrice($select=M_PriceList_Version_ID,PriceList,PriceStd,PriceLimit;$filter=${filter})`;\n\n        const response = await fetch(url, {\n          headers: { 'Authorization': `Bearer ${this.authToken}` }\n        });\n\n        if (!response.ok) throw new Error(`Erreur réseau: ${response.statusText}`);\n        const { records } = await response.json();\n\n        this.products = records.map(item => {\n          const priceInfo = (item.M_ProductPrice && item.M_ProductPrice.length)\n            ? item.M_ProductPrice[0]\n            : { PriceStd: 0 };\n\n          return {\n            id: item.id || item.M_Product_ID,\n            name: item.Name,\n            description: 'Aucune description disponible.',\n            image: null,\n            price_ht: parseFloat(priceInfo.PriceStd),\n            price_ttc: parseFloat(priceInfo.PriceStd),\n            tva_tx: 0,\n            label: item.Name,\n            ref: null,\n            weight: null,\n            width: null,\n            length: null,\n            height: null,\n            note: 'Aucune note disponible.'\n          };\n        });\n        console.log('Produits chargés:', this.products);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des produits :', error);\n      }\n    },\n\n    loadCartFromStorage() {\n      const storedCart = localStorage.getItem('cartItems');\n      if (storedCart) {\n        try {\n          this.cartItems = JSON.parse(storedCart);\n        } catch (e) {\n          console.error('Erreur de parsing du panier localStorage:', e);\n          this.cartItems = [];\n        }\n      }\n    },\n\n    saveCartToStorage() {\n      localStorage.setItem('cartItems', JSON.stringify(this.cartItems));\n    },\n\n    async addNote(productId, noteInput, currentNote) {\n      try {\n        if(noteInput > 10 || noteInput < 0) {\n          alert(\"La note doit être comprise entre 0 et 10\");\n          return;\n        }\n        \n        let newNote;\n        \n        if (currentNote !== 'Aucune note disponible.') {\n          newNote = (parseFloat(currentNote) + parseFloat(noteInput)) / 2;\n        } else {\n          newNote = parseFloat(noteInput);\n        }\n        \n        const noteData = {\n          array_options: {\n            options_note: newNote.toString()\n          }\n        };\n        \n        const response = await fetch(`${this.apiLink}/products/${productId}`, {\n          method: 'PUT',\n          headers: {\n            'DOLAPIKEY': this.apiKey,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(noteData)\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Erreur lors de la mise à jour de la note: ${response.status}`);\n        }\n        \n        const productToUpdate = this.products.find(p => p.id === productId);\n        if (productToUpdate) {\n          productToUpdate.note = newNote;\n          productToUpdate.noteInput = ''; \n        }\n        \n        if (this.$toast) {\n          this.$toast.success(\"Note mise à jour avec succès!\");\n        } else {\n          alert(\"Note mise à jour avec succès!\");\n        }\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la mise à jour de la note:\", error);\n        if (this.$toast) {\n          this.$toast.error(\"Échec de la mise à jour de la note\");\n        } else {\n          alert(\"Échec de la mise à jour de la note\");\n        }\n      }\n    },\n\n    async addToCart(product) {\n      try {\n        console.log('Tentative d\\'ajout au panier pour le produit:', product);\n        const isLoggedIn = localStorage.getItem('authToken');\n        if (!isLoggedIn) {\n          alert('Vous devez être connecté pour ajouter des produits au panier.');\n          this.$router.push({ name: 'login' });\n          return;\n        }\n\n        // S'assurer que le panier est initialisé\n        if (!this.cartId) {\n          await this.initCart();\n          if (!this.cartId) {\n            alert(\"Erreur : impossible d'initialiser le panier\");\n            return;\n          }\n        }\n\n        // Calculer le prix HT à partir du prix TTC si nécessaire\n        let priceHt = product.price_ht;\n        if (!priceHt && product.price_ttc) {\n          priceHt = product.price_ttc / (1 + (product.tva_tx / 100));\n        }\n\n        const itemData = {\n          fk_product: product.id,\n          qty: 1,\n          subprice: priceHt,\n          tva_tx: product.tva_tx,\n          label: product.label,\n          product_desc: product.description || \"\",\n          product_ref: product.ref,\n          price: priceHt,\n          product_tobuy: 1,\n          product_tosell: 1,\n          weight: product.weight || 0,\n          width: product.width || 0,\n          length: product.length || 0,\n          height: product.height || 0,\n          localtax1_tx: \"0.0000\",\n          localtax2_tx: \"0.0000\",\n          total_ht: priceHt,\n          total_ttc: product.price_ttc\n        };\n\n        const response = await fetch(`${this.apiLink}/orders/${this.cartId}/lines`, {\n          method: 'POST',\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(itemData)\n        });\n\n        if (response.ok) {\n          console.log('Ajout au panier réussi');\n          await this.fetchCartItems(this.cartId);\n          if (this.$toast) {\n            this.$toast.success('Produit ajouté au panier !');\n          } else {\n            alert('Produit ajouté au panier !');\n          }\n        } else {\n          console.error(\"Erreur lors de l'ajout au panier :\", await response.text());\n          alert(\"Erreur lors de l'ajout au panier\");\n        }\n      } catch (error) {\n        console.error(\"Erreur fetch (addToCart):\", error);\n        alert(\"Une erreur s'est produite lors de l'ajout au panier\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.shop-container {\n  width: 100%;\n  min-height: 100vh;\n  background-color: #111;\n  overflow-x: hidden;\n}\n\n@font-face {\n  font-family: 'PP Formula';\n  src: url('@/assets/fonts/PPFormula-NarrowRegular.otf') format('opentype');\n  font-weight: medium;\n}\n\n@font-face {\n  font-family: 'DAWBE';\n  src: url('@/assets/fonts/dawbe.otf') format('opentype');\n  font-weight: bold;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;;;;uBAA3BC,mBAAA,CAQM,OARNC,UAQM,GAPJC,YAAA,CAAUC,iBAAA,GACVD,YAAA,CAA8CE,qBAAA;IAAlCC,KAAK,EAAC,KAAK;IAACC,QAAQ,EAAC;MACjCJ,YAAA,CAIEK,sBAAA;IAHCC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAClBE,WAAW,EAAEC,QAAA,CAAAC,SAAS;IACtBC,SAAQ,EAAEF,QAAA,CAAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}