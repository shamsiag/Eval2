{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      invoicesData: {},\n      // Pour stocker les données des factures\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {},\n      isLoading: true\n    };\n  },\n  mounted() {\n    this.fetchAllData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        this.isLoading = true;\n\n        // Étape 1: Récupérer toutes les factures\n        await this.fetchInvoices();\n\n        // Étape 2: Récupérer toutes les commandes\n        await this.fetchAllOrders();\n\n        // Étape 3: Calculer les KPIs et générer les graphiques\n        this.calculateKPIs();\n        this.renderAllCharts();\n        this.isLoading = false;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n        this.isLoading = false;\n      }\n    },\n    async fetchInvoices() {\n      try {\n        // Récupérer toutes les factures\n        const url = `${this.apiLink}/invoices`;\n        console.log(\"URL de récupération des factures:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const invoices = await response.json();\n        console.log(\"Factures récupérées:\", invoices);\n\n        // Créer un dictionnaire des factures pour une recherche rapide\n        // Clé: ID de la commande liée, Valeur: informations de la facture\n        this.invoicesData = {};\n        invoices.forEach(invoice => {\n          if (invoice.fk_statut && invoice.fk_soc && invoice.paye !== undefined) {\n            // Si la facture est liée à une commande\n            if (invoice.origin && invoice.origin_id) {\n              const orderId = invoice.origin_id;\n              // Stocker si la facture est payée (paye = 1) ou non\n              this.invoicesData[orderId] = {\n                id: invoice.id,\n                ref: invoice.ref,\n                paye: invoice.paye === \"1\",\n                total: invoice.total_ttc,\n                statut: invoice.fk_statut,\n                statutLabel: this.getInvoiceStatusLabel(invoice.fk_statut)\n              };\n            }\n          }\n        });\n        console.log(\"Données des factures traitées:\", this.invoicesData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des factures:\", error);\n      }\n    },\n    getInvoiceStatusLabel(status) {\n      // Conversion du statut de facture en texte\n      switch (status) {\n        case \"0\":\n          return \"Brouillon\";\n        case \"1\":\n          return \"Validée\";\n        case \"2\":\n          return \"Impayée\";\n        case \"3\":\n          return \"Payée\";\n        default:\n          return \"Statut inconnu\";\n      }\n    },\n    async fetchAllOrders() {\n      try {\n        // Récupérer toutes les commandes (pas de filtre par statut)\n        const url = `${this.apiLink}/orders`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes récupérées:\", orders);\n\n        // Trier les commandes en deux groupes: payées et en attente\n        this.paidSalesData = [];\n        this.pendingOrdersData = [];\n        orders.forEach(order => {\n          // Vérifier si la commande a une facture associée et si celle-ci est payée\n          const hasInvoice = this.invoicesData[order.id] !== undefined;\n          const isPaid = hasInvoice && this.invoicesData[order.id].paye === true;\n\n          // Traiter les lignes de commande\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const orderData = this.processOrderLine(order, line, hasInvoice, isPaid);\n              if (isPaid) {\n                this.paidSalesData.push(orderData);\n              } else {\n                this.pendingOrdersData.push(orderData);\n              }\n            });\n          }\n        });\n        console.log(\"Données des ventes payées:\", this.paidSalesData);\n        console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    processOrderLine(order, line, hasInvoice, isPaid) {\n      const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n      const productName = line.product_label || line.label || \"Produit inconnu\";\n      const productReference = line.product_ref || \"Référence inconnue\";\n      const productCategory = line.category || \"Catégorie inconnue\";\n      const quantity = parseFloat(line.qty) || 0;\n      const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n      const status = order.status_label || \"Statut inconnu\";\n      const clientName = order.client_name || \"Client inconnu\";\n\n      // Déterminer la classe CSS pour le statut\n      let statusClass = \"unknown\";\n      if (isPaid) {\n        statusClass = \"paid\";\n      } else {\n        // Statut pour les commandes en attente\n        switch (order.status) {\n          case \"0\":\n            statusClass = \"draft\";\n            break;\n          case \"1\":\n            statusClass = \"validated\";\n            break;\n          case \"2\":\n            statusClass = \"processing\";\n            break;\n          case \"3\":\n            statusClass = \"shipping\";\n            break;\n          default:\n            statusClass = \"unknown\";\n            break;\n        }\n      }\n\n      // Information de facturation\n      let invoiceRef = \"Aucune\";\n      let invoiceStatus = \"Non facturée\";\n      if (hasInvoice) {\n        invoiceRef = this.invoicesData[order.id].ref;\n        invoiceStatus = this.invoicesData[order.id].statutLabel;\n        if (isPaid) {\n          invoiceStatus = \"Payée\";\n        }\n      }\n      return {\n        date: saleDate,\n        client: clientName,\n        product: productName,\n        reference: productReference,\n        category: productCategory,\n        quantity: quantity,\n        total: lineTotal,\n        status: status,\n        statusClass: statusClass,\n        orderId: order.id,\n        invoiceRef: invoiceRef,\n        invoiceStatus: invoiceStatus,\n        isPaid: isPaid\n      };\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes (seulement les commandes payées)\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n\n      // Nombre total de commandes en attente (compter les commandes uniques)\n      const uniqueOrderIds = new Set(this.pendingOrdersData.map(order => order.orderId));\n      this.totalPendingOrders = uniqueOrderIds.size;\n\n      // Calculer le panier moyen (seulement les commandes payées)\n      const uniquePaidOrderIds = new Set(this.paidSalesData.map(sale => sale.orderId));\n      const paidOrdersCount = uniquePaidOrderIds.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n\n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrdersCount = paidOrdersCount + this.totalPendingOrders;\n      this.conversionRate = totalOrdersCount > 0 ? (paidOrdersCount / totalOrdersCount * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [{\n              data: categoryData,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date (seulement les commandes payées)\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: dateData,\n              fill: false,\n              borderColor: '#5AAAD8',\n              tension: 0.1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n\n      // Ajouter une catégorie spéciale pour les commandes payées\n      const statusCountsWithPayment = {};\n      allOrders.forEach(order => {\n        const statusKey = order.isPaid ? \"Payée\" : order.status;\n        statusCountsWithPayment[statusKey] = (statusCountsWithPayment[statusKey] || 0) + 1;\n      });\n      const statusLabels = Object.keys(statusCountsWithPayment);\n      const statusData = statusLabels.map(label => statusCountsWithPayment[label]);\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [{\n              data: statusData,\n              backgroundColor: ['#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit (seulement les commandes payées)\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct).sort((a, b) => b[1] - a[1]).slice(0, 5);\n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: productData,\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6\n            }]\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Simulation de données géographiques - à remplacer par des données réelles\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [{\n              data: geoValues,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Simulation de données de fidélité - à remplacer par des données réelles\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [{\n          label: 'Nombre de clients',\n          data: [65, 40, 25, 15],\n          backgroundColor: '#5AAAD8',\n          borderRadius: 6\n        }]\n      };\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function () {\n      // Implémenter le filtrage par date\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Logique de filtrage à ajouter\n    },\n    statusFilter: function () {\n      // Implémenter le filtrage par statut\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Logique de filtrage à ajouter\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","salesData","paidSalesData","pendingOrdersData","invoicesData","apiKey","localStorage","getItem","apiLink","dateFilter","statusFilter","totalSales","totalPendingOrders","conversionRate","averageOrderValue","charts","isLoading","mounted","fetchAllData","methods","formatDate","timestamp","date","Date","toLocaleDateString","formatCurrency","value","Intl","NumberFormat","style","currency","format","Error","fetchInvoices","fetchAllOrders","calculateKPIs","renderAllCharts","error","console","url","log","response","fetch","headers","ok","statusText","invoices","json","forEach","invoice","fk_statut","fk_soc","paye","undefined","origin","origin_id","orderId","id","ref","total","total_ttc","statut","statutLabel","getInvoiceStatusLabel","status","orders","order","hasInvoice","isPaid","lines","Array","isArray","line","orderData","processOrderLine","push","saleDate","date_creation","productName","product_label","label","productReference","product_ref","productCategory","category","quantity","parseFloat","qty","lineTotal","subprice","toFixed","status_label","clientName","client_name","statusClass","invoiceRef","invoiceStatus","client","product","reference","reduce","sale","uniqueOrderIds","Set","map","size","uniquePaidOrderIds","paidOrdersCount","totalOrdersCount","categorySalesChart","Object","values","chart","destroy","renderCategorySalesChart","renderSalesTrendChart","renderOrderStatusChart","renderTopProductsChart","renderGeoDistributionChart","renderCustomerLoyaltyChart","aggregatedByCategory","categoryLabels","keys","categoryData","ctx","document","getElementById","type","labels","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","color","salesByDate","sortedDates","sort","a","b","split","reverse","join","dateLabels","dateData","salesTrendChart","fill","borderColor","tension","display","scales","y","beginAtZero","ticks","x","allOrders","statusCountsWithPayment","statusKey","statusLabels","statusData","orderStatusChart","salesByProduct","sortedProducts","entries","slice","productLabels","item","productData","topProductsChart","borderRadius","indexAxis","geoData","geoLabels","geoValues","geoDistributionChart","loyaltyData","customerLoyaltyChart","watch"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2 class=\"section-title\">Tableau</h2>\n    <h2 class=\"section-title\">de</h2>\n    <h2 class=\"section-title\">bord</h2>\n    \n    <div class=\"dashboard-content\">\n      <!-- Résumé des indicateurs clés -->\n      <div class=\"kpi-container\">\n        <div class=\"kpi-card\">\n          <h3>Total des ventes</h3>\n          <p class=\"kpi-value\">{{ totalSales }}€</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Commandes en attente</h3>\n          <p class=\"kpi-value\">{{ totalPendingOrders }}</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Taux de conversion</h3>\n          <p class=\"kpi-value\">{{ conversionRate }}%</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Panier moyen</h3>\n          <p class=\"kpi-value\">{{ averageOrderValue }}€</p>\n        </div>\n      </div>\n\n      <!-- Graphiques d'analyse -->\n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Ventes par catégorie</h3>\n          <canvas id=\"categorySalesChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Évolution des ventes</h3>\n          <canvas id=\"salesTrendChart\"></canvas>\n        </div>\n      </div>\n      \n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Statut des commandes</h3>\n          <canvas id=\"orderStatusChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Top produits vendus</h3>\n          <canvas id=\"topProductsChart\"></canvas>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes payées -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes payées</h2>\n          <div class=\"filters\">\n            <select v-model=\"dateFilter\">\n              <option value=\"all\">Toutes les périodes</option>\n              <option value=\"today\">Aujourd'hui</option>\n              <option value=\"week\">Cette semaine</option>\n              <option value=\"month\">Ce mois</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>N° Facture</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(sale, index) in paidSalesData\" :key=\"'paid-'+index\">\n                <td>{{ sale.date }}</td>\n                <td>{{ sale.client }}</td>\n                <td>{{ sale.product }}</td>\n                <td>{{ sale.reference }}</td>\n                <td>{{ sale.category }}</td>\n                <td>{{ sale.quantity }}</td>\n                <td>{{ sale.total }}€</td>\n                <td><span class=\"status-tag paid\">{{ sale.status }}</span></td>\n                <td>{{ sale.invoiceRef }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes en cours -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes en attente</h2>\n          <div class=\"filters\">\n            <select v-model=\"statusFilter\">\n              <option value=\"all\">Tous les statuts</option>\n              <option value=\"draft\">Brouillon</option>\n              <option value=\"validated\">Validée</option>\n              <option value=\"processing\">En traitement</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>Statut Facture</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(order, index) in pendingOrdersData\" :key=\"'pending-'+index\">\n                <td>{{ order.date }}</td>\n                <td>{{ order.client }}</td>\n                <td>{{ order.product }}</td>\n                <td>{{ order.reference }}</td>\n                <td>{{ order.category }}</td>\n                <td>{{ order.quantity }}</td>\n                <td>{{ order.total }}€</td>\n                <td><span :class=\"'status-tag ' + order.statusClass\">{{ order.status }}</span></td>\n                <td>{{ order.invoiceStatus }}</td>\n                <td>\n                  <button class=\"action-btn\">Détails</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Analyse des clients -->\n      <div class=\"data-section\">\n        <h2>Analyse clientèle</h2>\n        <div class=\"charts-row\">\n          <div class=\"chart-container\">\n            <h3>Répartition géographique</h3>\n            <canvas id=\"geoDistributionChart\"></canvas>\n          </div>\n          <div class=\"chart-container\">\n            <h3>Fidélité clients</h3>\n            <canvas id=\"customerLoyaltyChart\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      invoicesData: {},  // Pour stocker les données des factures\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {},\n      isLoading: true\n    };\n  },\n  mounted() {\n    this.fetchAllData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        \n        this.isLoading = true;\n        \n        // Étape 1: Récupérer toutes les factures\n        await this.fetchInvoices();\n        \n        // Étape 2: Récupérer toutes les commandes\n        await this.fetchAllOrders();\n        \n        // Étape 3: Calculer les KPIs et générer les graphiques\n        this.calculateKPIs();\n        this.renderAllCharts();\n        \n        this.isLoading = false;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n        this.isLoading = false;\n      }\n    },\n    async fetchInvoices() {\n      try {\n        // Récupérer toutes les factures\n        const url = `${this.apiLink}/invoices`;\n        console.log(\"URL de récupération des factures:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const invoices = await response.json();\n        console.log(\"Factures récupérées:\", invoices);\n\n        // Créer un dictionnaire des factures pour une recherche rapide\n        // Clé: ID de la commande liée, Valeur: informations de la facture\n        this.invoicesData = {};\n        invoices.forEach(invoice => {\n          if (invoice.fk_statut && invoice.fk_soc && invoice.paye !== undefined) {\n            // Si la facture est liée à une commande\n            if (invoice.origin && invoice.origin_id) {\n              const orderId = invoice.origin_id;\n              // Stocker si la facture est payée (paye = 1) ou non\n              this.invoicesData[orderId] = {\n                id: invoice.id,\n                ref: invoice.ref,\n                paye: invoice.paye === \"1\",\n                total: invoice.total_ttc,\n                statut: invoice.fk_statut,\n                statutLabel: this.getInvoiceStatusLabel(invoice.fk_statut)\n              };\n            }\n          }\n        });\n        \n        console.log(\"Données des factures traitées:\", this.invoicesData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des factures:\", error);\n      }\n    },\n    getInvoiceStatusLabel(status) {\n      // Conversion du statut de facture en texte\n      switch(status) {\n        case \"0\": return \"Brouillon\";\n        case \"1\": return \"Validée\";\n        case \"2\": return \"Impayée\";\n        case \"3\": return \"Payée\";\n        default: return \"Statut inconnu\";\n      }\n    },\n    async fetchAllOrders() {\n      try {\n        // Récupérer toutes les commandes (pas de filtre par statut)\n        const url = `${this.apiLink}/orders`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes récupérées:\", orders);\n\n        // Trier les commandes en deux groupes: payées et en attente\n        this.paidSalesData = [];\n        this.pendingOrdersData = [];\n        \n        orders.forEach(order => {\n          // Vérifier si la commande a une facture associée et si celle-ci est payée\n          const hasInvoice = this.invoicesData[order.id] !== undefined;\n          const isPaid = hasInvoice && this.invoicesData[order.id].paye === true;\n          \n          // Traiter les lignes de commande\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const orderData = this.processOrderLine(order, line, hasInvoice, isPaid);\n              \n              if (isPaid) {\n                this.paidSalesData.push(orderData);\n              } else {\n                this.pendingOrdersData.push(orderData);\n              }\n            });\n          }\n        });\n        \n        console.log(\"Données des ventes payées:\", this.paidSalesData);\n        console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    processOrderLine(order, line, hasInvoice, isPaid) {\n      const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n      const productName = line.product_label || line.label || \"Produit inconnu\";\n      const productReference = line.product_ref || \"Référence inconnue\";\n      const productCategory = line.category || \"Catégorie inconnue\";\n      const quantity = parseFloat(line.qty) || 0;\n      const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n      const status = order.status_label || \"Statut inconnu\";\n      const clientName = order.client_name || \"Client inconnu\";\n      \n      // Déterminer la classe CSS pour le statut\n      let statusClass = \"unknown\";\n      if (isPaid) {\n        statusClass = \"paid\";\n      } else {\n        // Statut pour les commandes en attente\n        switch (order.status) {\n          case \"0\": statusClass = \"draft\"; break;\n          case \"1\": statusClass = \"validated\"; break;\n          case \"2\": statusClass = \"processing\"; break;\n          case \"3\": statusClass = \"shipping\"; break;\n          default: statusClass = \"unknown\"; break;\n        }\n      }\n      \n      // Information de facturation\n      let invoiceRef = \"Aucune\";\n      let invoiceStatus = \"Non facturée\";\n      \n      if (hasInvoice) {\n        invoiceRef = this.invoicesData[order.id].ref;\n        invoiceStatus = this.invoicesData[order.id].statutLabel;\n        \n        if (isPaid) {\n          invoiceStatus = \"Payée\";\n        }\n      }\n      \n      return {\n        date: saleDate,\n        client: clientName,\n        product: productName,\n        reference: productReference,\n        category: productCategory,\n        quantity: quantity,\n        total: lineTotal,\n        status: status,\n        statusClass: statusClass,\n        orderId: order.id,\n        invoiceRef: invoiceRef,\n        invoiceStatus: invoiceStatus,\n        isPaid: isPaid\n      };\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes (seulement les commandes payées)\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n      \n      // Nombre total de commandes en attente (compter les commandes uniques)\n      const uniqueOrderIds = new Set(this.pendingOrdersData.map(order => order.orderId));\n      this.totalPendingOrders = uniqueOrderIds.size;\n      \n      // Calculer le panier moyen (seulement les commandes payées)\n      const uniquePaidOrderIds = new Set(this.paidSalesData.map(sale => sale.orderId));\n      const paidOrdersCount = uniquePaidOrderIds.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? \n        (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n      \n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrdersCount = paidOrdersCount + this.totalPendingOrders;\n      this.conversionRate = totalOrdersCount > 0 ? \n        ((paidOrdersCount / totalOrdersCount) * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      \n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [\n              {\n                data: categoryData,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date (seulement les commandes payées)\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      \n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: dateData,\n                fill: false,\n                borderColor: '#5AAAD8',\n                tension: 0.1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n      \n      // Ajouter une catégorie spéciale pour les commandes payées\n      const statusCountsWithPayment = {};\n      allOrders.forEach(order => {\n        const statusKey = order.isPaid ? \"Payée\" : order.status;\n        statusCountsWithPayment[statusKey] = (statusCountsWithPayment[statusKey] || 0) + 1;\n      });\n      \n      const statusLabels = Object.keys(statusCountsWithPayment);\n      const statusData = statusLabels.map(label => statusCountsWithPayment[label]);\n\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [\n              {\n                data: statusData,\n                backgroundColor: [\n                  '#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit (seulement les commandes payées)\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5);\n      \n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: productData,\n                backgroundColor: '#5AAAD8',\n                borderRadius: 6,\n              },\n            ],\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Simulation de données géographiques - à remplacer par des données réelles\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      \n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [\n              {\n                data: geoValues,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Simulation de données de fidélité - à remplacer par des données réelles\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [\n          {\n            label: 'Nombre de clients',\n            data: [65, 40, 25, 15],\n            backgroundColor: '#5AAAD8',\n            borderRadius: 6,\n          }\n        ]\n      };\n\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function() {\n      // Implémenter le filtrage par date\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Logique de filtrage à ajouter\n    },\n    statusFilter: function() {\n      // Implémenter le filtrage par statut\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Logique de filtrage à ajouter\n    }\n  }\n};\n</script>\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n  margin-left: 115px;\n}\n\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n  min-height: 100vh;\n}\n\nh1, h2, h3 {\n  font-family: 'PP Formula', sans-serif;\n  margin-bottom: 1rem;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n  margin-right: 115px;\n  padding-top: 30px;\n}\n\n/* KPI Cards */\n.kpi-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.kpi-card {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  padding: 20px;\n  flex: 1;\n  min-width: 200px;\n  text-align: center;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.kpi-value {\n  font-size: 28px;\n  font-weight: bold;\n  margin-top: 10px;\n  color: #5AAAD8;\n}\n\n/* Chart layouts */\n.charts-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  flex: 1;\n  min-width: 300px;\n  color: #1e1e1e;\n}\n\n.chart-container h3 {\n  color: #1e1e1e;\n  margin-bottom: 15px;\n  font-size: 18px;\n}\n\n/* Data tables */\n.data-section {\n  margin-bottom: 40px;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.filters select {\n  padding: 8px 12px;\n  border-radius: 6px;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #f7f7f7;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  width: 100%;\n  color: #1e1e1e;\n  overflow-x: auto;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.9em;\n}\n\nth, td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\nth {\n  background-color: #f7f7f7;\n  font-weight: bold;\n}\n\n/* Status tags */\n.status-tag {\n  padding: 5px 10px;\n  border-radius: 12px;\n  font-size: 0.85em;\n  color: white;\n  font-weight: 500;\n}\n\n.status-tag.paid {\n  background-color: #28a745;\n}\n\n.status-tag.draft {\n  background-color: #6c757d;\n}\n\n.status-tag.validated {\n  background-color: #007bff;\n}\n\n.status-tag.processing {\n  background-color: #ffc107;\n  color: #1e1e1e;\n}\n\n.status-tag.unknown {\n  background-color: #6c757d;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #5AAAD8;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-size: 0.85em;\n}\n\n.action-btn:hover {\n  background-color: #4990b8;\n}\n\n/* Responsive adjustments */\n@media (max-width: 1200px) {\n  .dashboard-content {\n    margin-left: 20px;\n    margin-right: 20px;\n  }\n  \n  .section-title {\n    margin-left: 20px;\n  }\n}\n\n@media (max-width: 768px) {\n  .kpi-card {\n    min-width: 100%;\n  }\n  \n  .chart-container {\n    min-width: 100%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}