{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"h1\", null, \"Tableau de bord\", -1 /* HOISTED */), _createElementVNode(\"div\", {\n    class: \"dashboard-content\"\n  }, [_createElementVNode(\"div\", {\n    class: \"chart-container\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"salesChart\"\n  })])], -1 /* HOISTED */)]));\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_cache","_createElementVNode","id"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>Tableau de bord</h1>\n\n    <div class=\"dashboard-content\">\n      <div class=\"chart-container\">\n        <canvas id=\"salesChart\"></canvas>\n      </div>\n\n     \n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n    };\n  },\n  mounted() {\n    this.fetchSalesData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    async fetchSalesData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${this.apiLink}/orders?status=5`;\n        console.log(\"URL de récupération des commandes payées:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes payées récupérées:\", orders);\n\n        const sales = [];\n        orders.forEach(order => {\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n              const productName = line.product_label || line.label || \"Produit inconnu\";\n              const productReference = line.product_ref || \"Référence inconnue\";\n              const productCategory = line.category || \"Catégorie inconnue\";\n              const quantity = parseFloat(line.qty) || 0;\n              const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n              const status = order.status_label || \"Statut inconnu\";\n              const clientName = order.client_name || \"Client inconnu\";\n              \n              sales.push({\n                date: saleDate,\n                client: clientName,\n                product: productName,\n                reference: productReference,\n                category: productCategory,\n                quantity: quantity,\n                total: lineTotal,\n                status: status,\n              });\n            });\n          }\n        });\n\n        this.salesData = sales;\n        console.log(\"Données des ventes:\", this.salesData);\n        this.renderChart();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des ventes:\", error);\n      }\n    },\n    renderChart() {\n      const aggregatedByProduct = {};\n      const aggregatedByCategory = {};\n\n      this.salesData.forEach(sale => {\n        // Agréger par produit\n        aggregatedByProduct[sale.product] = (aggregatedByProduct[sale.product] || 0) + parseFloat(sale.total);\n        // Agréger par catégorie\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const productLabels = Object.keys(aggregatedByProduct);\n      const productData = productLabels.map(label => aggregatedByProduct[label]);\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('salesChart');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: productLabels.concat(categoryLabels),\n          datasets: [\n            {\n              label: 'Ventes par produit (€)',\n              data: productData.concat(categoryData),\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n            },\n          },\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n}\n\nh1 {\n  font-family: 'DAWBE';\n  font-size: 48px;\n  margin-bottom: 30px;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 600px;\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 800px;\n  color: #1e1e1e;\n  display: inline;\n}\n\n.sales-details h2 {\n  margin-bottom: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.95em;\n  display: inline;\n}\n\nth, td {\n  padding: 10px;\n  text-align: left;\n  border-bottom: 1px solid #ccc;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;uBAAtBC,mBAAA,CAUM,OAVNC,UAUM,EAAAC,MAAA,QAAAA,MAAA,OATJC,mBAAA,CAAwB,YAApB,iBAAe,qBAEnBA,mBAAA,CAMM;IANDJ,KAAK,EAAC;EAAmB,IAC5BI,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAiB,IAC1BI,mBAAA,CAAiC;IAAzBC,EAAE,EAAC;EAAY,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}