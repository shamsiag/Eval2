{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null // ID de la commande brouillon\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce((sum, product) => {\n        return sum + product.price * product.quantity;\n      }, 0);\n    },\n    async updateCart(product) {\n      // Mise à jour du produit modifié dans la commande Dolibarr\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        // Appel PUT (ou PATCH) pour mettre à jour la ligne de commande sur Dolibarr\n        // Remarque : la méthode exacte dépend de l'API Dolibarr. Ici, on suppose une URL du type /orders/{orderId}/lines/{lineId}\n        // et que chaque \"product\" possède un attribut \"lineId\" fourni par l'API.\n        const updateUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey\n          },\n          body: JSON.stringify({\n            qty: product.quantity\n          })\n        });\n        if (!response.ok) {\n          console.error(\"Erreur lors de la mise à jour de la ligne produit\", await response.json());\n        } else {\n          console.log(\"Ligne mise à jour pour\", product.name);\n        }\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n      this.updateTotal();\n    },\n    validateOrder() {\n      alert(\"Commande validée !\");\n      // Ici, vous pourrez ajouter la logique de validation finale côté Dolibarr\n    },\n    async fetchProducts() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${apiLink}/products`; // Assure-toi que l'endpoint /products est correct\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Erreur lors de la récupération des produits depuis Dolibarr\");\n        }\n        const products = await response.json(); // Assurez-vous que la réponse est un tableau de produits\n        this.products = products;\n        console.log(\"Produits récupérés:\", this.products);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des produits:\", error);\n      }\n    },\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\"); // Ex: \"http://localhost:8888/dolibarr-21.0.0/htdocs/api/index.php\"\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n\n        // Recherche d'une commande brouillon existante pour ce client\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const existingOrders = await searchRes.json();\n        console.log(\"Réponse recherche commande:\", existingOrders);\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          const existingOrderId = existingOrders[0].id;\n          this.orderId = existingOrderId;\n          console.log(\"Commande existante trouvée :\", existingOrderId);\n          return existingOrderId;\n        }\n\n        // Sinon, créer une nouvelle commande brouillon\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0 // Brouillon\n          })\n        });\n        const newOrder = await createRes.json();\n        console.log(\"Réponse création commande:\", newOrder);\n        if (newOrder.id) {\n          this.orderId = newOrder.id;\n          console.log(\"Nouvelle commande créée :\", newOrder.id);\n          return newOrder.id;\n        } else {\n          console.error(\"Erreur lors de la création de la commande brouillon\", newOrder);\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Erreur dans getOrCreateDraftOrder :\", error);\n        return null;\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        if (!this.orderId) {\n          console.error(\"Aucune commande brouillon disponible pour récupérer le panier\");\n          return;\n        }\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${apiLink}/orders/${this.orderId}/lines`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const lines = await response.json();\n        console.log(\"Lignes de commande récupérées:\", lines);\n\n        // Vérification de l'existence de 'this.products'\n        if (!this.products || this.products.length === 0) {\n          console.error(\"Aucun produit disponible dans 'this.products'\");\n          return;\n        }\n\n        // Mapping des lignes de commande avec les données produits\n        this.cartItems = lines.map(line => {\n          const productData = this.products.find(p => p.id === line.fk_product) || {};\n          return {\n            lineId: line.id,\n            id: line.fk_product,\n            name: productData.name || \"Produit inconnu\",\n            description: productData.description || \"\",\n            image: productData.image || \"\",\n            price: line.subprice,\n            // ou productData.price si tu préfères\n            quantity: line.qty\n          };\n        });\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du panier depuis Dolibarr:\", error);\n      }\n    }\n  },\n  mounted() {\n    // Au montage, on récupère ou crée la commande brouillon depuis Dolibarr,\n    // puis on récupère les lignes de commande pour afficher le panier.\n    this.getOrCreateDraftOrder().then(orderId => {\n      if (orderId) {\n        this.fetchCartFromDolibarr();\n      }\n    });\n  }\n};","map":{"version":3,"names":["name","data","cartItems","totalPrice","orderId","methods","formatCurrency","value","Intl","NumberFormat","style","currency","format","updateTotal","reduce","sum","product","price","quantity","updateCart","console","error","apiKey","localStorage","getItem","apiLink","Error","updateUrl","lineId","response","fetch","method","headers","body","JSON","stringify","qty","ok","json","log","validateOrder","alert","fetchProducts","url","products","getOrCreateDraftOrder","clientId","searchUrl","searchRes","existingOrders","Array","isArray","length","existingOrderId","id","createUrl","today","Date","toISOString","split","createRes","socid","date","status","newOrder","fetchCartFromDolibarr","lines","map","line","productData","find","p","fk_product","description","image","subprice","mounted","then"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/CartPage.vue"],"sourcesContent":["<template>\n  <div class=\"cart-page\">\n    <h1>Votre Panier</h1>\n\n    <!-- Affichage des produits dans le panier, si le panier n'est pas vide -->\n    <div class=\"cart-items\" v-if=\"cartItems.length\">\n      <div v-for=\"(product, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n        <div class=\"cart-item-info\">\n          <img :src=\"product.image\" alt=\"Product Image\" class=\"cart-item-image\" />\n          <div class=\"cart-item-details\">\n            <h3 class=\"cart-item-name\">{{ product.name }}</h3>\n            <p class=\"cart-item-description\">{{ product.description }}</p>\n          </div>\n        </div>\n        \n        <div class=\"cart-item-quantity\">\n          <input\n            type=\"number\"\n            v-model.number=\"product.quantity\"\n            min=\"1\"\n            @change=\"updateCart(product)\"\n            class=\"quantity-input\"\n          />\n        </div>\n\n        <div class=\"cart-item-price\">\n          <span class=\"product-unit-price\">{{ formatCurrency(product.price) }}</span>\n          <span class=\"product-total-price\">{{ formatCurrency(product.price * product.quantity) }}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Message si le panier est vide -->\n    <p v-else class=\"empty-message\">Votre panier est vide.</p>\n\n    <!-- Résumé du panier et bouton de commande -->\n    <div class=\"cart-summary\" v-if=\"cartItems.length\">\n      <div class=\"total\">\n        <p>Total : <span>{{ formatCurrency(totalPrice) }}</span></p>\n      </div>\n      <button class=\"checkout-button\" @click=\"validateOrder\">\n        Valider la commande\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null, // ID de la commande brouillon\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce((sum, product) => {\n        return sum + product.price * product.quantity;\n      }, 0);\n    },\n    async updateCart(product) {\n      // Mise à jour du produit modifié dans la commande Dolibarr\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        // Appel PUT (ou PATCH) pour mettre à jour la ligne de commande sur Dolibarr\n        // Remarque : la méthode exacte dépend de l'API Dolibarr. Ici, on suppose une URL du type /orders/{orderId}/lines/{lineId}\n        // et que chaque \"product\" possède un attribut \"lineId\" fourni par l'API.\n        const updateUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({\n            qty: product.quantity,\n          }),\n        });\n        if (!response.ok) {\n          console.error(\"Erreur lors de la mise à jour de la ligne produit\", await response.json());\n        } else {\n          console.log(\"Ligne mise à jour pour\", product.name);\n        }\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n      this.updateTotal();\n    },\n    validateOrder() {\n      alert(\"Commande validée !\");\n      // Ici, vous pourrez ajouter la logique de validation finale côté Dolibarr\n    },\n    async fetchProducts() {\n  try {\n    const apiKey = localStorage.getItem(\"apiKey\");\n    const apiLink = localStorage.getItem(\"apiLink\");\n    if (!apiKey || !apiLink) {\n      throw new Error(\"API Key ou API Link manquant\");\n    }\n    const url = `${apiLink}/products`;  // Assure-toi que l'endpoint /products est correct\n    const response = await fetch(url, {\n      headers: {\n        \"DOLAPIKEY\": apiKey,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(\"Erreur lors de la récupération des produits depuis Dolibarr\");\n    }\n    const products = await response.json();  // Assurez-vous que la réponse est un tableau de produits\n    this.products = products;\n    console.log(\"Produits récupérés:\", this.products);\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des produits:\", error);\n  }\n},\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\"); // Ex: \"http://localhost:8888/dolibarr-21.0.0/htdocs/api/index.php\"\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n\n        // Recherche d'une commande brouillon existante pour ce client\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: { \"DOLAPIKEY\": apiKey },\n        });\n        const existingOrders = await searchRes.json();\n        console.log(\"Réponse recherche commande:\", existingOrders);\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          const existingOrderId = existingOrders[0].id;\n          this.orderId = existingOrderId;\n          console.log(\"Commande existante trouvée :\", existingOrderId);\n          return existingOrderId;\n        }\n\n        // Sinon, créer une nouvelle commande brouillon\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0, // Brouillon\n          }),\n        });\n        const newOrder = await createRes.json();\n        console.log(\"Réponse création commande:\", newOrder);\n        if (newOrder.id) {\n          this.orderId = newOrder.id;\n          console.log(\"Nouvelle commande créée :\", newOrder.id);\n          return newOrder.id;\n        } else {\n          console.error(\"Erreur lors de la création de la commande brouillon\", newOrder);\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Erreur dans getOrCreateDraftOrder :\", error);\n        return null;\n      }\n    },\n    async fetchCartFromDolibarr() {\n  try {\n    if (!this.orderId) {\n      console.error(\"Aucune commande brouillon disponible pour récupérer le panier\");\n      return;\n    }\n    const apiKey = localStorage.getItem(\"apiKey\");\n    const apiLink = localStorage.getItem(\"apiLink\");\n    if (!apiKey || !apiLink) {\n      throw new Error(\"API Key ou API Link manquant\");\n    }\n    const url = `${apiLink}/orders/${this.orderId}/lines`;\n    const response = await fetch(url, {\n      headers: {\n        \"DOLAPIKEY\": apiKey,\n      },\n    });\n    const lines = await response.json();\n    console.log(\"Lignes de commande récupérées:\", lines);\n\n    // Vérification de l'existence de 'this.products'\n    if (!this.products || this.products.length === 0) {\n      console.error(\"Aucun produit disponible dans 'this.products'\");\n      return;\n    }\n\n    // Mapping des lignes de commande avec les données produits\n    this.cartItems = lines.map(line => {\n      const productData = this.products.find(p => p.id === line.fk_product) || {};\n      return {\n        lineId: line.id,\n        id: line.fk_product,\n        name: productData.name || \"Produit inconnu\",\n        description: productData.description || \"\",\n        image: productData.image || \"\",\n        price: line.subprice, // ou productData.price si tu préfères\n        quantity: line.qty,\n      };\n    });\n    this.updateTotal();\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération du panier depuis Dolibarr:\", error);\n  }\n  },\n  },\n  mounted() {\n    // Au montage, on récupère ou crée la commande brouillon depuis Dolibarr,\n    // puis on récupère les lignes de commande pour afficher le panier.\n    this.getOrCreateDraftOrder().then(orderId => {\n      if (orderId) {\n        this.fetchCartFromDolibarr();\n      }\n    });\n  },\n};\n</script>\n\n<style scoped>\n/* Conteneur de la page du panier */\n.cart-page {\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Titre */\nh1 {\n  font-size: 32px;\n  color: #0e100e;\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n/* Liste des produits dans le panier */\n.cart-items {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* Chaque produit du panier */\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #f7f7f7;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n/* Détails du produit */\n.cart-item-info {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n/* Image du produit */\n.cart-item-image {\n  width: 80px;\n  height: auto;\n  border-radius: 5px;\n}\n\n/* Nom et description du produit */\n.cart-item-details {\n  max-width: 400px;\n}\n\n/* Quantité */\n.cart-item-quantity input {\n  width: 50px;\n  padding: 5px;\n  font-size: 16px;\n  text-align: center;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n/* Prix unitaire et prix total */\n.cart-item-price {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.product-unit-price,\n.product-total-price {\n  font-size: 18px;\n  color: #0e100e;\n}\n\n.product-total-price {\n  font-weight: bold;\n  margin-top: 10px;\n}\n\n/* Résumé du panier et bouton de commande */\n.cart-summary {\n  margin-top: 30px;\n  text-align: right;\n}\n\n.total {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.checkout-button {\n  padding: 10px 30px;\n  background-color: #5aaad8;\n  color: white;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.checkout-button:hover {\n  background-color: #0e100e;\n}\n\n/* Message quand le panier est vide */\n.empty-message {\n  text-align: center;\n  font-size: 20px;\n  color: #888;\n  margin-top: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}