{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null,\n      products: []\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce((sum, product) => {\n        return sum + product.priceTtc * product.quantity;\n      }, 0);\n    },\n    async updateCart(product) {\n      if (!this.orderId) return console.error(\"Aucune commande brouillon.\");\n\n      // Empêche les quantités < 1\n      if (product.quantity < 1) {\n        product.quantity = 1;\n      }\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) throw new Error(\"API Key ou API Link manquant\");\n        const updateUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey\n          },\n          body: JSON.stringify({\n            qty: parseFloat(product.quantity)\n          })\n        });\n        if (!response.ok) {\n          const err = await response.json();\n          return console.error(\"Erreur API:\", err);\n        }\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n    },\n    validateOrder() {\n      alert(\"Commande validée !\");\n    },\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const existingOrders = await searchRes.json();\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          this.orderId = existingOrders[0].id;\n          return this.orderId;\n        }\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0\n          })\n        });\n        const newOrder = await createRes.json();\n        if (newOrder.id) {\n          this.orderId = newOrder.id;\n          return newOrder.id;\n        } else {\n          console.error(\"Erreur lors de la création de la commande brouillon\", newOrder);\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Erreur dans getOrCreateDraftOrder :\", error);\n        return null;\n      }\n    },\n    async fetchProducts() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) throw new Error(\"API Key ou API Link manquant\");\n        const url = `${apiLink}/products`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const products = await response.json();\n        this.products = products;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des produits:\", error);\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        await this.fetchProducts();\n        if (!this.products || this.products.length === 0) {\n          console.error(\"Aucun produit disponible dans 'this.products'\");\n          return;\n        }\n        if (!this.orderId) {\n          console.error(\"Aucune commande brouillon disponible pour récupérer le panier\");\n          return;\n        }\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        const url = `${apiLink}/orders/${this.orderId}/lines`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const lines = await response.json();\n        const filteredLines = lines.filter(line => parseFloat(line.qty) > 0);\n\n        // Fusionner les articles du panier par ID de produit\n        const mergedCartItems = this.mergeCartItems(filteredLines);\n        this.cartItems = mergedCartItems;\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du panier depuis Dolibarr:\", error);\n      }\n    },\n    mergeCartItems(lines) {\n      const mergedItems = [];\n      lines.forEach(line => {\n        const productData = this.products.find(p => p.id === line.fk_product) || {};\n        const tvaRate = parseFloat(productData.tva_tx || 0) / 100;\n        const priceHt = parseFloat(line.subprice);\n        const priceTtc = +(priceHt * (1 + tvaRate)).toFixed(2);\n\n        // Vérifie si le produit est déjà dans le panier\n        const existingProduct = mergedItems.find(item => item.id === line.fk_product);\n        if (existingProduct) {\n          // Fusionne les quantités\n          existingProduct.quantity += parseFloat(line.qty);\n        } else {\n          // Ajoute le produit si ce n'est pas déjà dans le panier\n          mergedItems.push({\n            lineId: line.id,\n            id: line.fk_product,\n            name: productData.label || productData.name || \"Produit inconnu\",\n            description: productData.description || \"\",\n            image: productData.photo || productData.image || \"\",\n            priceHt: priceHt,\n            priceTtc: priceTtc,\n            quantity: Math.max(1, parseFloat(line.qty) || 1)\n          });\n        }\n      });\n      return mergedItems;\n    },\n    async deleteCartItem(product) {\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) throw new Error(\"API Key ou API Link manquant\");\n        const deleteUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(deleteUrl, {\n          method: \"DELETE\",\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        if (!response.ok) {\n          console.error(\"Erreur lors de la suppression\", await response.json());\n        } else {\n          this.cartItems = this.cartItems.filter(item => item.lineId !== product.lineId);\n          this.updateTotal();\n        }\n      } catch (error) {\n        console.error(\"Erreur deleteCartItem:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.getOrCreateDraftOrder().then(orderId => {\n      if (orderId) this.fetchCartFromDolibarr();\n    });\n  }\n};","map":{"version":3,"names":["name","data","cartItems","totalPrice","orderId","products","methods","formatCurrency","value","Intl","NumberFormat","style","currency","format","updateTotal","reduce","sum","product","priceTtc","quantity","updateCart","console","error","apiKey","localStorage","getItem","apiLink","Error","updateUrl","lineId","response","fetch","method","headers","body","JSON","stringify","qty","parseFloat","ok","err","json","validateOrder","alert","getOrCreateDraftOrder","clientId","searchUrl","searchRes","existingOrders","Array","isArray","length","id","createUrl","today","Date","toISOString","split","createRes","socid","date","status","newOrder","fetchProducts","url","fetchCartFromDolibarr","lines","filteredLines","filter","line","mergedCartItems","mergeCartItems","mergedItems","forEach","productData","find","p","fk_product","tvaRate","tva_tx","priceHt","subprice","toFixed","existingProduct","item","push","label","description","image","photo","Math","max","deleteCartItem","deleteUrl","mounted","then"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/CartPage.vue"],"sourcesContent":["<template>\n  <div class=\"cart-page\">\n    <h1>Votre Panier</h1>\n\n    <!-- Affichage des produits dans le panier, si le panier n'est pas vide -->\n    <div class=\"cart-items\" v-if=\"cartItems.length\">\n      <div v-for=\"(product, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n        <div class=\"cart-item-info\">\n          <img :src=\"product.image\" alt=\"Product Image\" class=\"cart-item-image\" />\n          <div class=\"cart-item-details\">\n            <h3 class=\"cart-item-name\">{{ product.name }}</h3>\n            <p class=\"cart-item-description\">{{ product.description }}</p>\n          </div>\n        </div>\n\n        <div class=\"cart-item-quantity\">\n          <span class=\"quantity-display\">{{ product.quantity }}</span>\n        </div>\n\n        <div class=\"cart-item-price\">\n          <span class=\"product-unit-price\">{{ formatCurrency(product.priceTtc) }} TTC</span>\n          <span class=\"product-total-price\">{{ formatCurrency(product.priceTtc * product.quantity) }}</span>\n        </div>\n\n        <button class=\"remove-button\" @click=\"deleteCartItem(product)\">\n          Supprimer\n        </button>\n      </div>\n    </div>\n\n    <!-- Message si le panier est vide -->\n    <p v-else class=\"empty-message\">Votre panier est vide.</p>\n\n    <!-- Résumé du panier et bouton de commande -->\n    <div class=\"cart-summary\" v-if=\"cartItems.length\">\n      <div class=\"total\">\n        <p>Total : <span>{{ formatCurrency(totalPrice) }}</span></p>\n      </div>\n      <button class=\"checkout-button\" @click=\"validateOrder\">\n        Valider la commande\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null,\n      products: []\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce((sum, product) => {\n        return sum + (product.priceTtc * product.quantity);\n      }, 0);\n    },\n    async updateCart(product) {\n      if (!this.orderId) return console.error(\"Aucune commande brouillon.\");\n\n      // Empêche les quantités < 1\n      if (product.quantity < 1) {\n        product.quantity = 1;\n      }\n\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) throw new Error(\"API Key ou API Link manquant\");\n\n        const updateUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({ qty: parseFloat(product.quantity) }),\n        });\n\n        if (!response.ok) {\n          const err = await response.json();\n          return console.error(\"Erreur API:\", err);\n        }\n\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n    },\n    validateOrder() {\n      alert(\"Commande validée !\");\n    },\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: { \"DOLAPIKEY\": apiKey },\n        });\n        const existingOrders = await searchRes.json();\n\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          this.orderId = existingOrders[0].id;\n          return this.orderId;\n        }\n\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0,\n          }),\n        });\n\n        const newOrder = await createRes.json();\n        if (newOrder.id) {\n          this.orderId = newOrder.id;\n          return newOrder.id;\n        } else {\n          console.error(\"Erreur lors de la création de la commande brouillon\", newOrder);\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Erreur dans getOrCreateDraftOrder :\", error);\n        return null;\n      }\n    },\n    async fetchProducts() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) throw new Error(\"API Key ou API Link manquant\");\n\n        const url = `${apiLink}/products`;\n        const response = await fetch(url, {\n          headers: { \"DOLAPIKEY\": apiKey },\n        });\n        const products = await response.json();\n        this.products = products;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des produits:\", error);\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        await this.fetchProducts();\n        if (!this.products || this.products.length === 0) {\n          console.error(\"Aucun produit disponible dans 'this.products'\");\n          return;\n        }\n\n        if (!this.orderId) {\n          console.error(\"Aucune commande brouillon disponible pour récupérer le panier\");\n          return;\n        }\n\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        const url = `${apiLink}/orders/${this.orderId}/lines`;\n\n        const response = await fetch(url, {\n          headers: { \"DOLAPIKEY\": apiKey },\n        });\n        const lines = await response.json();\n        \n\n        const filteredLines = lines.filter(line => parseFloat(line.qty) > 0);\n\n        // Fusionner les articles du panier par ID de produit\n        const mergedCartItems = this.mergeCartItems(filteredLines);\n\n        this.cartItems = mergedCartItems;\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du panier depuis Dolibarr:\", error);\n      }\n    },\n    mergeCartItems(lines) {\n      const mergedItems = [];\n      lines.forEach(line => {\n        const productData = this.products.find(p => p.id === line.fk_product) || {};\n        const tvaRate = parseFloat(productData.tva_tx || 0) / 100;\n        const priceHt = parseFloat(line.subprice);\n        const priceTtc = +(priceHt * (1 + tvaRate)).toFixed(2);\n\n        // Vérifie si le produit est déjà dans le panier\n        const existingProduct = mergedItems.find(item => item.id === line.fk_product);\n        if (existingProduct) {\n          // Fusionne les quantités\n          existingProduct.quantity += parseFloat(line.qty);\n        } else {\n          // Ajoute le produit si ce n'est pas déjà dans le panier\n          mergedItems.push({\n            lineId: line.id,\n            id: line.fk_product,\n            name: productData.label || productData.name || \"Produit inconnu\",\n            description: productData.description || \"\",\n            image: productData.photo || productData.image || \"\",\n            priceHt: priceHt,\n            priceTtc: priceTtc,\n            quantity: Math.max(1, parseFloat(line.qty) || 1),\n          });\n        }\n      });\n\n      return mergedItems;\n    },\n    async deleteCartItem(product) {\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) throw new Error(\"API Key ou API Link manquant\");\n\n        const deleteUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(deleteUrl, {\n          method: \"DELETE\",\n          headers: {\n            \"DOLAPIKEY\": apiKey,\n          },\n        });\n\n        if (!response.ok) {\n          console.error(\"Erreur lors de la suppression\", await response.json());\n        } else {\n          this.cartItems = this.cartItems.filter(item => item.lineId !== product.lineId);\n          this.updateTotal();\n        }\n      } catch (error) {\n        console.error(\"Erreur deleteCartItem:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.getOrCreateDraftOrder().then(orderId => {\n      if (orderId) this.fetchCartFromDolibarr();\n    });\n  }\n};\n</script>\n\n<style scoped>\n/* Conteneur de la page du panier */\n.cart-page {\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Titre */\nh1 {\n  font-size: 32px;\n  color: #0e100e;\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n/* Liste des produits dans le panier */\n.cart-items {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* Chaque produit du panier */\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #f7f7f7;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n/* Détails du produit */\n.cart-item-info {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n/* Image du produit */\n.cart-item-image {\n  width: 80px;\n  height: auto;\n  border-radius: 5px;\n}\n\n/* Nom et description du produit */\n.cart-item-details {\n  max-width: 400px;\n}\n\n/* Quantité */\n.cart-item-quantity input {\n  width: 50px;\n  padding: 5px;\n  font-size: 16px;\n  text-align: center;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n/* Prix unitaire et prix total */\n.cart-item-price {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.product-unit-price,\n.product-total-price {\n  font-size: 18px;\n  color: #0e100e;\n}\n\n.product-total-price {\n  font-weight: bold;\n  margin-top: 10px;\n}\n\n/* Résumé du panier et bouton de commande */\n.cart-summary {\n  margin-top: 30px;\n  text-align: right;\n}\n\n.total {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.checkout-button {\n  padding: 10px 30px;\n  background-color: #5aaad8;\n  color: white;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.checkout-button:hover {\n  background-color: #0e100e;\n}\n\n/* Message quand le panier est vide */\n.empty-message {\n  text-align: center;\n  font-size: 20px;\n  color: #888;\n  margin-top: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}