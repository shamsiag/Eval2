{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport async function fetchInvoiceForOrder(apiLink, apiKey, orderId) {\n  const url = `${apiLink}/orders/${orderId}/invoices`;\n  const response = await fetch(url, {\n    headers: {\n      DOLAPIKEY: apiKey\n    }\n  });\n  if (!response.ok) return null;\n  const invoices = await response.json();\n  return invoices.length > 0 ? invoices[0] : null;\n}\nexport async function fetchOrdersWithInvoices(apiLink, apiKey, clientId) {\n  const url = `${apiLink}/orders?sqlfilters=(fk_soc:=:${clientId})`;\n  const response = await fetch(url, {\n    headers: {\n      DOLAPIKEY: apiKey,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(`Erreur HTTP: ${response.status}`);\n  const rawOrders = await response.json();\n  const ordersWithInvoices = await Promise.all(rawOrders.map(async order => {\n    const invoice = await fetchInvoiceForOrder(apiLink, apiKey, order.id);\n    return {\n      ...order,\n      invoice,\n      isPaid: invoice ? invoice.paye === \"1\" || invoice.paye === 1 : false\n    };\n  }));\n  return ordersWithInvoices;\n}","map":{"version":3,"names":["fetchInvoiceForOrder","apiLink","apiKey","orderId","url","response","fetch","headers","DOLAPIKEY","ok","invoices","json","length","fetchOrdersWithInvoices","clientId","Error","status","rawOrders","ordersWithInvoices","Promise","all","map","order","invoice","id","isPaid","paye"],"sources":["/Users/macbookpro/Sham/S6/Eval2-1/frontend/src/utils/api.js"],"sourcesContent":["export async function fetchInvoiceForOrder(apiLink, apiKey, orderId) {\n    const url = `${apiLink}/orders/${orderId}/invoices`;\n    const response = await fetch(url, {\n      headers: { DOLAPIKEY: apiKey },\n    });\n  \n    if (!response.ok) return null;\n    const invoices = await response.json();\n    return invoices.length > 0 ? invoices[0] : null;\n  }\n  \n  export async function fetchOrdersWithInvoices(apiLink, apiKey, clientId) {\n    const url = `${apiLink}/orders?sqlfilters=(fk_soc:=:${clientId})`;\n    const response = await fetch(url, {\n      headers: { DOLAPIKEY: apiKey, \"Content-Type\": \"application/json\" },\n    });\n  \n    if (!response.ok) throw new Error(`Erreur HTTP: ${response.status}`);\n  \n    const rawOrders = await response.json();\n  \n    const ordersWithInvoices = await Promise.all(\n      rawOrders.map(async (order) => {\n        const invoice = await fetchInvoiceForOrder(apiLink, apiKey, order.id);\n        return {\n          ...order,\n          invoice,\n          isPaid: invoice ? invoice.paye === \"1\" || invoice.paye === 1 : false,\n        };\n      })\n    );\n  \n    return ordersWithInvoices;\n  }\n  "],"mappings":";;AAAA,OAAO,eAAeA,oBAAoBA,CAACC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACjE,MAAMC,GAAG,GAAG,GAAGH,OAAO,WAAWE,OAAO,WAAW;EACnD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAChCG,OAAO,EAAE;MAAEC,SAAS,EAAEN;IAAO;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE,OAAO,IAAI;EAC7B,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EACtC,OAAOD,QAAQ,CAACE,MAAM,GAAG,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI;AACjD;AAEA,OAAO,eAAeG,uBAAuBA,CAACZ,OAAO,EAAEC,MAAM,EAAEY,QAAQ,EAAE;EACvE,MAAMV,GAAG,GAAG,GAAGH,OAAO,gCAAgCa,QAAQ,GAAG;EACjE,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAChCG,OAAO,EAAE;MAAEC,SAAS,EAAEN,MAAM;MAAE,cAAc,EAAE;IAAmB;EACnE,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIM,KAAK,CAAC,gBAAgBV,QAAQ,CAACW,MAAM,EAAE,CAAC;EAEpE,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,CAACM,IAAI,CAAC,CAAC;EAEvC,MAAMO,kBAAkB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC1CH,SAAS,CAACI,GAAG,CAAC,MAAOC,KAAK,IAAK;IAC7B,MAAMC,OAAO,GAAG,MAAMvB,oBAAoB,CAACC,OAAO,EAAEC,MAAM,EAAEoB,KAAK,CAACE,EAAE,CAAC;IACrE,OAAO;MACL,GAAGF,KAAK;MACRC,OAAO;MACPE,MAAM,EAAEF,OAAO,GAAGA,OAAO,CAACG,IAAI,KAAK,GAAG,IAAIH,OAAO,CAACG,IAAI,KAAK,CAAC,GAAG;IACjE,CAAC;EACH,CAAC,CACH,CAAC;EAED,OAAOR,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}