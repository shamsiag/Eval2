{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      allOrders: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {}\n    };\n  },\n  computed: {\n    filteredPaidSales() {\n      if (this.dateFilter === 'all') {\n        return this.paidSalesData;\n      }\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      return this.paidSalesData.filter(sale => {\n        const dateParts = sale.date.split('/');\n        const saleDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);\n        if (this.dateFilter === 'today') {\n          return saleDate >= today;\n        } else if (this.dateFilter === 'week') {\n          const lastWeek = new Date(today);\n          lastWeek.setDate(today.getDate() - 7);\n          return saleDate >= lastWeek;\n        } else if (this.dateFilter === 'month') {\n          const lastMonth = new Date(today);\n          lastMonth.setMonth(today.getMonth() - 1);\n          return saleDate >= lastMonth;\n        }\n        return true;\n      });\n    },\n    filteredPendingOrders() {\n      if (this.statusFilter === 'all') {\n        return this.pendingOrdersData;\n      }\n      return this.pendingOrdersData.filter(order => {\n        return order.rawStatus === this.statusFilter;\n      });\n    }\n  },\n  mounted() {\n    this.fetchAllOrdersData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      if (!timestamp) return \"Inconnue\";\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllOrdersData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n\n        // Récupérer toutes les commandes\n        await this.fetchOrders();\n\n        // Calculer les KPIs\n        this.calculateKPIs();\n\n        // Générer tous les graphiques\n        this.renderAllCharts();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n      }\n    },\n    async fetchOrders() {\n      try {\n        // Récupérer toutes les commandes\n        const url = `${this.apiLink}/orders`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const rawOrders = await response.json();\n        console.log(\"Commandes récupérées:\", rawOrders);\n\n        // Pour chaque commande, récupérer les détails et les factures associées\n        this.allOrders = await Promise.all(rawOrders.map(async order => {\n          // Récupérer les détails de la commande\n          const orderDetails = await this.fetchOrderDetails(order.id);\n\n          // Récupérer la facture associée\n          const invoice = await this.fetchInvoiceForOrder(order.id);\n          return {\n            ...orderDetails,\n            invoice,\n            isPaid: invoice ? invoice.paye === \"1\" || invoice.paye === 1 : false\n          };\n        }));\n\n        // Traiter les données pour l'affichage\n        this.processOrdersData();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    async fetchOrderDetails(orderId) {\n      try {\n        const url = `${this.apiLink}/orders/${orderId}`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau pour la commande ${orderId}: ${response.statusText}`);\n        }\n        return await response.json();\n      } catch (error) {\n        console.error(`Erreur lors de la récupération des détails de la commande ${orderId}:`, error);\n        return null;\n      }\n    },\n    async fetchInvoiceForOrder(orderId) {\n      try {\n        const url = `${this.apiLink}/orders/${orderId}/invoices`;\n        const response = await fetch(url, {\n          headers: {\n            DOLAPIKEY: this.apiKey\n          }\n        });\n        if (!response.ok) {\n          console.warn(`Pas de facture pour la commande ${orderId}`);\n          return null;\n        }\n        const invoices = await response.json();\n        return invoices.length > 0 ? invoices[0] : null;\n      } catch (error) {\n        console.error(\"Erreur de récupération de facture pour commande\", orderId, error);\n        return null;\n      }\n    },\n    getStatusText(order) {\n      switch (order.status) {\n        case \"0\":\n          return \"Brouillon\";\n        case \"1\":\n          if (order.billed && (order.billed === true || order.billed === \"1\")) {\n            return \"Validé-Facturé\";\n          } else if (order.invoice) {\n            return \"Validé-Facture créée\";\n          } else {\n            return \"Validé\";\n          }\n        case \"2\":\n          return \"Facturée\";\n        case \"3\":\n          return \"Livrée\";\n        case \"4\":\n          return \"Traitée\";\n        case \"5\":\n          return \"Payée\";\n        case \"-1\":\n          return \"Annulée\";\n        default:\n          return \"Statut inconnu\";\n      }\n    },\n    getStatusClass(status) {\n      switch (status) {\n        case \"0\":\n          return \"draft\";\n        case \"1\":\n          return \"validated\";\n        case \"2\":\n          return \"invoiced\";\n        case \"3\":\n          return \"processing\";\n        case \"4\":\n          return \"processed\";\n        case \"5\":\n          return \"paid\";\n        case \"-1\":\n          return \"cancelled\";\n        default:\n          return \"unknown\";\n      }\n    },\n    processOrdersData() {\n      this.paidSalesData = [];\n      this.pendingOrdersData = [];\n      this.allOrders.forEach(order => {\n        // Vérifier si la commande a des lignes\n        if (order.lines && Array.isArray(order.lines)) {\n          const orderDate = this.formatDate(order.date_creation);\n          const clientName = order.socname || \"Client inconnu\";\n          const statusText = this.getStatusText(order);\n          const statusClass = this.getStatusClass(order.status);\n          const isPaid = order.isPaid || order.status === \"5\";\n          order.lines.forEach(line => {\n            const productName = line.product_label || line.label || \"Produit inconnu\";\n            const productReference = line.product_ref || \"Référence inconnue\";\n            const productCategory = line.tag || \"Catégorie inconnue\";\n            const quantity = parseFloat(line.qty) || 0;\n            const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n            const saleData = {\n              date: orderDate,\n              client: clientName,\n              product: productName,\n              reference: productReference,\n              category: productCategory,\n              quantity: quantity,\n              total: lineTotal,\n              status: statusText,\n              statusClass: statusClass,\n              orderId: order.id,\n              rawStatus: order.status\n            };\n\n            // Ajouter aux données appropriées selon le statut\n            if (isPaid) {\n              this.paidSalesData.push(saleData);\n            } else {\n              this.pendingOrdersData.push(saleData);\n            }\n          });\n        }\n      });\n      console.log(\"Données des ventes payées:\", this.paidSalesData);\n      console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n\n      // Nombre total de commandes en attente\n      const uniqueOrders = new Set(this.pendingOrdersData.map(item => item.orderId));\n      this.totalPendingOrders = uniqueOrders.size;\n\n      // Calcul du panier moyen\n      const uniquePaidOrders = new Set(this.paidSalesData.map(item => item.orderId));\n      const paidOrdersCount = uniquePaidOrders.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n\n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrders = uniqueOrders.size + paidOrdersCount;\n      this.conversionRate = totalOrders > 0 ? (paidOrdersCount / totalOrders * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [{\n              data: categoryData,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: dateData,\n              fill: false,\n              borderColor: '#5AAAD8',\n              tension: 0.1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n\n      // Compter par statut\n      const statusCounts = {};\n      allOrders.forEach(order => {\n        statusCounts[order.status] = (statusCounts[order.status] || 0) + 1;\n      });\n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [{\n              data: statusData,\n              backgroundColor: ['#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct).sort((a, b) => b[1] - a[1]).slice(0, 5);\n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: productData,\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6\n            }]\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Vous pourriez récupérer ces données à partir des commandes\n      // Par exemple, en analysant les adresses de livraison\n      // Pour l'instant, utilisons des données fictives comme dans le code d'origine\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [{\n              data: geoValues,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Dans une implémentation réelle, vous analyseriez les données pour\n      // trouver combien de commandes chaque client a passées\n      // Pour l'instant, utilisons des données fictives\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [{\n          label: 'Nombre de clients',\n          data: [65, 40, 25, 15],\n          backgroundColor: '#5AAAD8',\n          borderRadius: 6\n        }]\n      };\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function () {\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Les données sont automatiquement filtrées via le computed property filteredPaidSales\n    },\n    statusFilter: function () {\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Les données sont automatiquement filtrées via le computed property filteredPendingOrders\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","allOrders","paidSalesData","pendingOrdersData","apiKey","localStorage","getItem","apiLink","dateFilter","statusFilter","totalSales","totalPendingOrders","conversionRate","averageOrderValue","charts","computed","filteredPaidSales","now","Date","today","getFullYear","getMonth","getDate","filter","sale","dateParts","date","split","saleDate","lastWeek","setDate","lastMonth","setMonth","filteredPendingOrders","order","rawStatus","mounted","fetchAllOrdersData","methods","formatDate","timestamp","toLocaleDateString","formatCurrency","value","Intl","NumberFormat","style","currency","format","Error","fetchOrders","calculateKPIs","renderAllCharts","error","console","url","log","response","fetch","headers","ok","statusText","rawOrders","json","Promise","all","map","orderDetails","fetchOrderDetails","id","invoice","fetchInvoiceForOrder","isPaid","paye","processOrdersData","orderId","DOLAPIKEY","warn","invoices","length","getStatusText","status","billed","getStatusClass","forEach","lines","Array","isArray","orderDate","date_creation","clientName","socname","statusClass","line","productName","product_label","label","productReference","product_ref","productCategory","tag","quantity","parseFloat","qty","lineTotal","subprice","toFixed","saleData","client","product","reference","category","total","push","reduce","uniqueOrders","Set","item","size","uniquePaidOrders","paidOrdersCount","totalOrders","categorySalesChart","Object","values","chart","destroy","renderCategorySalesChart","renderSalesTrendChart","renderOrderStatusChart","renderTopProductsChart","renderGeoDistributionChart","renderCustomerLoyaltyChart","aggregatedByCategory","categoryLabels","keys","categoryData","ctx","document","getElementById","type","labels","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","color","salesByDate","sortedDates","sort","a","b","reverse","join","dateLabels","dateData","salesTrendChart","fill","borderColor","tension","display","scales","y","beginAtZero","ticks","x","statusCounts","statusLabels","statusData","orderStatusChart","salesByProduct","sortedProducts","entries","slice","productLabels","productData","topProductsChart","borderRadius","indexAxis","geoData","geoLabels","geoValues","geoDistributionChart","loyaltyData","customerLoyaltyChart","watch"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2 class=\"section-title\">Tableau</h2>\n    <h2 class=\"section-title\">de</h2>\n    <h2 class=\"section-title\">bord</h2>\n    \n    <div class=\"dashboard-content\">\n      <!-- Résumé des indicateurs clés -->\n      <div class=\"kpi-container\">\n        <div class=\"kpi-card\">\n          <h3>Total des ventes</h3>\n          <p class=\"kpi-value\">{{ totalSales }}€</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Commandes en attente</h3>\n          <p class=\"kpi-value\">{{ totalPendingOrders }}</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Taux de conversion</h3>\n          <p class=\"kpi-value\">{{ conversionRate }}%</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Panier moyen</h3>\n          <p class=\"kpi-value\">{{ averageOrderValue }}€</p>\n        </div>\n      </div>\n\n      <!-- Graphiques d'analyse -->\n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Ventes par catégorie</h3>\n          <canvas id=\"categorySalesChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Évolution des ventes</h3>\n          <canvas id=\"salesTrendChart\"></canvas>\n        </div>\n      </div>\n      \n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Statut des commandes</h3>\n          <canvas id=\"orderStatusChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Top produits vendus</h3>\n          <canvas id=\"topProductsChart\"></canvas>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes payées -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes payées</h2>\n          <div class=\"filters\">\n            <select v-model=\"dateFilter\">\n              <option value=\"all\">Toutes les périodes</option>\n              <option value=\"today\">Aujourd'hui</option>\n              <option value=\"week\">Cette semaine</option>\n              <option value=\"month\">Ce mois</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(sale, index) in filteredPaidSales\" :key=\"'paid-'+index\">\n                <td>{{ sale.date }}</td>\n                <td>{{ sale.client }}</td>\n                <td>{{ sale.product }}</td>\n                <td>{{ sale.reference }}</td>\n                <td>{{ sale.category }}</td>\n                <td>{{ sale.quantity }}</td>\n                <td>{{ sale.total }}€</td>\n                <td><span class=\"status-tag paid\">{{ sale.status }}</span></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes en cours -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes en attente</h2>\n          <div class=\"filters\">\n            <select v-model=\"statusFilter\">\n              <option value=\"all\">Tous les statuts</option>\n              <option value=\"0\">Brouillon</option>\n              <option value=\"1\">Validée</option>\n              <option value=\"3\">En traitement</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(order, index) in filteredPendingOrders\" :key=\"'pending-'+index\">\n                <td>{{ order.date }}</td>\n                <td>{{ order.client }}</td>\n                <td>{{ order.product }}</td>\n                <td>{{ order.reference }}</td>\n                <td>{{ order.quantity }}</td>\n                <td>{{ order.total }}€</td>\n                <td><span :class=\"'status-tag ' + order.statusClass\">{{ order.status }}</span></td>\n                <td>\n                  <button class=\"action-btn\">Détails</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Analyse des clients -->\n      <div class=\"data-section\">\n        <h2>Analyse clientèle</h2>\n        <div class=\"charts-row\">\n          <div class=\"chart-container\">\n            <h3>Répartition géographique</h3>\n            <canvas id=\"geoDistributionChart\"></canvas>\n          </div>\n          <div class=\"chart-container\">\n            <h3>Fidélité clients</h3>\n            <canvas id=\"customerLoyaltyChart\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      allOrders: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {}\n    };\n  },\n  computed: {\n    filteredPaidSales() {\n      if (this.dateFilter === 'all') {\n        return this.paidSalesData;\n      }\n      \n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      \n      return this.paidSalesData.filter(sale => {\n        const dateParts = sale.date.split('/');\n        const saleDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);\n        \n        if (this.dateFilter === 'today') {\n          return saleDate >= today;\n        } else if (this.dateFilter === 'week') {\n          const lastWeek = new Date(today);\n          lastWeek.setDate(today.getDate() - 7);\n          return saleDate >= lastWeek;\n        } else if (this.dateFilter === 'month') {\n          const lastMonth = new Date(today);\n          lastMonth.setMonth(today.getMonth() - 1);\n          return saleDate >= lastMonth;\n        }\n        return true;\n      });\n    },\n    filteredPendingOrders() {\n      if (this.statusFilter === 'all') {\n        return this.pendingOrdersData;\n      }\n      \n      return this.pendingOrdersData.filter(order => {\n        return order.rawStatus === this.statusFilter;\n      });\n    }\n  },\n  mounted() {\n    this.fetchAllOrdersData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      if (!timestamp) return \"Inconnue\";\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllOrdersData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        \n        // Récupérer toutes les commandes\n        await this.fetchOrders();\n        \n        // Calculer les KPIs\n        this.calculateKPIs();\n        \n        // Générer tous les graphiques\n        this.renderAllCharts();\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n      }\n    },\n    async fetchOrders() {\n      try {\n        // Récupérer toutes les commandes\n        const url = `${this.apiLink}/orders`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        \n        const rawOrders = await response.json();\n        console.log(\"Commandes récupérées:\", rawOrders);\n        \n        // Pour chaque commande, récupérer les détails et les factures associées\n        this.allOrders = await Promise.all(\n          rawOrders.map(async (order) => {\n            // Récupérer les détails de la commande\n            const orderDetails = await this.fetchOrderDetails(order.id);\n            \n            // Récupérer la facture associée\n            const invoice = await this.fetchInvoiceForOrder(order.id);\n            \n            return {\n              ...orderDetails,\n              invoice,\n              isPaid: invoice ? invoice.paye === \"1\" || invoice.paye === 1 : false,\n            };\n          })\n        );\n        \n        // Traiter les données pour l'affichage\n        this.processOrdersData();\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    async fetchOrderDetails(orderId) {\n      try {\n        const url = `${this.apiLink}/orders/${orderId}`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Erreur réseau pour la commande ${orderId}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n      } catch (error) {\n        console.error(`Erreur lors de la récupération des détails de la commande ${orderId}:`, error);\n        return null;\n      }\n    },\n    async fetchInvoiceForOrder(orderId) {\n      try {\n        const url = `${this.apiLink}/orders/${orderId}/invoices`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (!response.ok) {\n          console.warn(`Pas de facture pour la commande ${orderId}`);\n          return null;\n        }\n\n        const invoices = await response.json();\n        return invoices.length > 0 ? invoices[0] : null;\n      } catch (error) {\n        console.error(\"Erreur de récupération de facture pour commande\", orderId, error);\n        return null;\n      }\n    },\n    getStatusText(order) {\n      switch (order.status) {\n        case \"0\":\n          return \"Brouillon\";\n        case \"1\":\n          if (order.billed && (order.billed === true || order.billed === \"1\")) {\n            return \"Validé-Facturé\";\n          } else if (order.invoice) {\n            return \"Validé-Facture créée\";\n          } else {\n            return \"Validé\";\n          }\n        case \"2\":\n          return \"Facturée\";\n        case \"3\":\n          return \"Livrée\";\n        case \"4\":\n          return \"Traitée\";\n        case \"5\":\n          return \"Payée\";\n        case \"-1\":\n          return \"Annulée\";\n        default:\n          return \"Statut inconnu\";\n      }\n    },\n    getStatusClass(status) {\n      switch (status) {\n        case \"0\": return \"draft\";\n        case \"1\": return \"validated\";\n        case \"2\": return \"invoiced\";\n        case \"3\": return \"processing\";\n        case \"4\": return \"processed\";\n        case \"5\": return \"paid\";\n        case \"-1\": return \"cancelled\";\n        default: return \"unknown\";\n      }\n    },\n    processOrdersData() {\n      this.paidSalesData = [];\n      this.pendingOrdersData = [];\n      \n      this.allOrders.forEach(order => {\n        // Vérifier si la commande a des lignes\n        if (order.lines && Array.isArray(order.lines)) {\n          const orderDate = this.formatDate(order.date_creation);\n          const clientName = order.socname || \"Client inconnu\";\n          const statusText = this.getStatusText(order);\n          const statusClass = this.getStatusClass(order.status);\n          const isPaid = order.isPaid || order.status === \"5\";\n          \n          order.lines.forEach(line => {\n            const productName = line.product_label || line.label || \"Produit inconnu\";\n            const productReference = line.product_ref || \"Référence inconnue\";\n            const productCategory = line.tag || \"Catégorie inconnue\";\n            const quantity = parseFloat(line.qty) || 0;\n            const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n            \n            const saleData = {\n              date: orderDate,\n              client: clientName,\n              product: productName,\n              reference: productReference,\n              category: productCategory,\n              quantity: quantity,\n              total: lineTotal,\n              status: statusText,\n              statusClass: statusClass,\n              orderId: order.id,\n              rawStatus: order.status\n            };\n            \n            // Ajouter aux données appropriées selon le statut\n            if (isPaid) {\n              this.paidSalesData.push(saleData);\n            } else {\n              this.pendingOrdersData.push(saleData);\n            }\n          });\n        }\n      });\n      \n      console.log(\"Données des ventes payées:\", this.paidSalesData);\n      console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n      \n      // Nombre total de commandes en attente\n      const uniqueOrders = new Set(this.pendingOrdersData.map(item => item.orderId));\n      this.totalPendingOrders = uniqueOrders.size;\n      \n      // Calcul du panier moyen\n      const uniquePaidOrders = new Set(this.paidSalesData.map(item => item.orderId));\n      const paidOrdersCount = uniquePaidOrders.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? \n        (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n      \n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrders = uniqueOrders.size + paidOrdersCount;\n      this.conversionRate = totalOrders > 0 ? \n        ((paidOrdersCount / totalOrders) * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      \n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [\n              {\n                data: categoryData,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      \n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: dateData,\n                fill: false,\n                borderColor: '#5AAAD8',\n                tension: 0.1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n      \n      // Compter par statut\n      const statusCounts = {};\n      allOrders.forEach(order => {\n        statusCounts[order.status] = (statusCounts[order.status] || 0) + 1;\n      });\n      \n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [\n              {\n                data: statusData,\n                backgroundColor: [\n                  '#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5);\n      \n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: productData,\n                backgroundColor: '#5AAAD8',\n                borderRadius: 6,\n              },\n            ],\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Vous pourriez récupérer ces données à partir des commandes\n      // Par exemple, en analysant les adresses de livraison\n      // Pour l'instant, utilisons des données fictives comme dans le code d'origine\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      \n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [\n              {\n                data: geoValues,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Dans une implémentation réelle, vous analyseriez les données pour\n      // trouver combien de commandes chaque client a passées\n      // Pour l'instant, utilisons des données fictives\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [\n          {\n            label: 'Nombre de clients',\n            data: [65, 40, 25, 15],\n            backgroundColor: '#5AAAD8',\n            borderRadius: 6,\n          }\n        ]\n      };\n\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function() {\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Les données sont automatiquement filtrées via le computed property filteredPaidSales\n    },\n    statusFilter: function() {\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Les données sont automatiquement filtrées via le computed property filteredPendingOrders\n    }\n  }\n};\n</script>\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n  margin-left: 115px;\n}\n\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n  min-height: 100vh;\n}\n\nh1, h2, h3 {\n  font-family: 'PP Formula', sans-serif;\n  margin-bottom: 1rem;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n  margin-right: 115px;\n  padding-top: 30px;\n}\n\n/* KPI Cards */\n.kpi-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.kpi-card {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  padding: 20px;\n  flex: 1;\n  min-width: 200px;\n  text-align: center;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.kpi-value {\n  font-size: 28px;\n  font-weight: bold;\n  margin-top: 10px;\n  color: #5AAAD8;\n}\n\n/* Chart layouts */\n.charts-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  flex: 1;\n  min-width: 300px;\n  color: #1e1e1e;\n}\n\n.chart-container h3 {\n  color: #1e1e1e;\n  margin-bottom: 15px;\n  font-size: 18px;\n}\n\n/* Data tables */\n.data-section {\n  margin-bottom: 40px;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.filters select {\n  padding: 8px 12px;\n  border-radius: 6px;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #f7f7f7;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  width: 100%;\n  color: #1e1e1e;\n  overflow-x: auto;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.9em;\n}\n\nth, td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\nth {\n  background-color: #f7f7f7;\n  font-weight: bold;\n}\n\n/* Status tags */\n.status-tag {\n  padding: 5px 10px;\n  border-radius: 12px;\n  font-size: 0.85em;\n  color: white;\n  font-weight: 500;\n}\n\n.status-tag.paid {\n  background-color: #28a745;\n}\n\n.status-tag.draft {\n  background-color: #6c757d;\n}\n\n.status-tag.validated {\n  background-color: #007bff;\n}\n\n.status-tag.processing {\n  background-color: #ffc107;\n  color: #1e1e1e;\n}\n\n.status-tag.invoiced {\n  background-color: #17a2b8;\n}\n\n.status-tag.processed {\n  background-color: #20c997;\n}\n\n.status-tag.cancelled {\n  background-color: #dc3545;\n}\n\n.status-tag.unknown {\n  background-color: #6c757d;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #5AAAD8;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-size: 0.85em;\n}\n\n.action-btn:hover {\n  background-color: #4990b8;\n}\n\n</style>\n"],"mappings":";;;;;;;;;;;;;AA+JA,OAAOA,KAAI,MAAO,eAAe;AAEjC,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE,EAAE;MACjBC,iBAAiB,EAAE,EAAE;MACrBC,MAAM,EAAEC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MACtCC,OAAO,EAAEF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;MACxCE,UAAU,EAAE,KAAK;MACjBC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,CAAC;MACbC,kBAAkB,EAAE,CAAC;MACrBC,cAAc,EAAE,CAAC;MACjBC,iBAAiB,EAAE,CAAC;MACpBC,MAAM,EAAE,CAAC;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiBA,CAAA,EAAG;MAClB,IAAI,IAAI,CAACR,UAAS,KAAM,KAAK,EAAE;QAC7B,OAAO,IAAI,CAACN,aAAa;MAC3B;MAEA,MAAMe,GAAE,GAAI,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,KAAI,GAAI,IAAID,IAAI,CAACD,GAAG,CAACG,WAAW,CAAC,CAAC,EAAEH,GAAG,CAACI,QAAQ,CAAC,CAAC,EAAEJ,GAAG,CAACK,OAAO,CAAC,CAAC,CAAC;MAExE,OAAO,IAAI,CAACpB,aAAa,CAACqB,MAAM,CAACC,IAAG,IAAK;QACvC,MAAMC,SAAQ,GAAID,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;QACtC,MAAMC,QAAO,GAAI,IAAIV,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,IAAI,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;QAEvE,IAAI,IAAI,CAACjB,UAAS,KAAM,OAAO,EAAE;UAC/B,OAAOoB,QAAO,IAAKT,KAAK;QAC1B,OAAO,IAAI,IAAI,CAACX,UAAS,KAAM,MAAM,EAAE;UACrC,MAAMqB,QAAO,GAAI,IAAIX,IAAI,CAACC,KAAK,CAAC;UAChCU,QAAQ,CAACC,OAAO,CAACX,KAAK,CAACG,OAAO,CAAC,IAAI,CAAC,CAAC;UACrC,OAAOM,QAAO,IAAKC,QAAQ;QAC7B,OAAO,IAAI,IAAI,CAACrB,UAAS,KAAM,OAAO,EAAE;UACtC,MAAMuB,SAAQ,GAAI,IAAIb,IAAI,CAACC,KAAK,CAAC;UACjCY,SAAS,CAACC,QAAQ,CAACb,KAAK,CAACE,QAAQ,CAAC,IAAI,CAAC,CAAC;UACxC,OAAOO,QAAO,IAAKG,SAAS;QAC9B;QACA,OAAO,IAAI;MACb,CAAC,CAAC;IACJ,CAAC;IACDE,qBAAqBA,CAAA,EAAG;MACtB,IAAI,IAAI,CAACxB,YAAW,KAAM,KAAK,EAAE;QAC/B,OAAO,IAAI,CAACN,iBAAiB;MAC/B;MAEA,OAAO,IAAI,CAACA,iBAAiB,CAACoB,MAAM,CAACW,KAAI,IAAK;QAC5C,OAAOA,KAAK,CAACC,SAAQ,KAAM,IAAI,CAAC1B,YAAY;MAC9C,CAAC,CAAC;IACJ;EACF,CAAC;EACD2B,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,SAAS,EAAE;MACpB,IAAI,CAACA,SAAS,EAAE,OAAO,UAAU;MACjC,MAAMd,IAAG,GAAI,IAAIR,IAAI,CAACsB,SAAQ,GAAI,IAAI,CAAC;MACvC,OAAOd,IAAI,CAACe,kBAAkB,CAAC,OAAO,CAAC;IACzC,CAAC;IACDC,cAAcA,CAACC,KAAK,EAAE;MACpB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QACpCC,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;IAClB,CAAC;IACD,MAAMN,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,IAAI,CAAC,IAAI,CAACjC,MAAK,IAAK,CAAC,IAAI,CAACG,OAAO,EAAE;UACjC,MAAM,IAAI0C,KAAK,CAAC,8BAA8B,CAAC;QACjD;;QAEA;QACA,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;;QAExB;QACA,IAAI,CAACC,aAAa,CAAC,CAAC;;QAEpB;QACA,IAAI,CAACC,eAAe,CAAC,CAAC;MAExB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACrE;IACF,CAAC;IACD,MAAMH,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF;QACA,MAAMK,GAAE,GAAI,GAAG,IAAI,CAAChD,OAAO,SAAS;QACpC+C,OAAO,CAACE,GAAG,CAAC,oCAAoC,EAAED,GAAG,CAAC;QACtD,MAAME,QAAO,GAAI,MAAMC,KAAK,CAACH,GAAG,EAAE;UAChCI,OAAO,EAAE;YACP,WAAW,EAAE,IAAI,CAACvD;UACpB;QACF,CAAC,CAAC;QAEF,IAAI,CAACqD,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIX,KAAK,CAAC,kBAAkBQ,QAAQ,CAACI,UAAU,EAAE,CAAC;QAC1D;QAEA,MAAMC,SAAQ,GAAI,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACvCT,OAAO,CAACE,GAAG,CAAC,uBAAuB,EAAEM,SAAS,CAAC;;QAE/C;QACA,IAAI,CAAC7D,SAAQ,GAAI,MAAM+D,OAAO,CAACC,GAAG,CAChCH,SAAS,CAACI,GAAG,CAAC,MAAOhC,KAAK,IAAK;UAC7B;UACA,MAAMiC,YAAW,GAAI,MAAM,IAAI,CAACC,iBAAiB,CAAClC,KAAK,CAACmC,EAAE,CAAC;;UAE3D;UACA,MAAMC,OAAM,GAAI,MAAM,IAAI,CAACC,oBAAoB,CAACrC,KAAK,CAACmC,EAAE,CAAC;UAEzD,OAAO;YACL,GAAGF,YAAY;YACfG,OAAO;YACPE,MAAM,EAAEF,OAAM,GAAIA,OAAO,CAACG,IAAG,KAAM,GAAE,IAAKH,OAAO,CAACG,IAAG,KAAM,IAAI;UACjE,CAAC;QACH,CAAC,CACH,CAAC;;QAED;QACA,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAE1B,EAAE,OAAOrB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;IACF,CAAC;IACD,MAAMe,iBAAiBA,CAACO,OAAO,EAAE;MAC/B,IAAI;QACF,MAAMpB,GAAE,GAAI,GAAG,IAAI,CAAChD,OAAO,WAAWoE,OAAO,EAAE;QAC/C,MAAMlB,QAAO,GAAI,MAAMC,KAAK,CAACH,GAAG,EAAE;UAChCI,OAAO,EAAE;YACP,WAAW,EAAE,IAAI,CAACvD;UACpB;QACF,CAAC,CAAC;QAEF,IAAI,CAACqD,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIX,KAAK,CAAC,kCAAkC0B,OAAO,KAAKlB,QAAQ,CAACI,UAAU,EAAE,CAAC;QACtF;QAEA,OAAO,MAAMJ,QAAQ,CAACM,IAAI,CAAC,CAAC;MAC9B,EAAE,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6DAA6DsB,OAAO,GAAG,EAAEtB,KAAK,CAAC;QAC7F,OAAO,IAAI;MACb;IACF,CAAC;IACD,MAAMkB,oBAAoBA,CAACI,OAAO,EAAE;MAClC,IAAI;QACF,MAAMpB,GAAE,GAAI,GAAG,IAAI,CAAChD,OAAO,WAAWoE,OAAO,WAAW;QACxD,MAAMlB,QAAO,GAAI,MAAMC,KAAK,CAACH,GAAG,EAAE;UAChCI,OAAO,EAAE;YAAEiB,SAAS,EAAE,IAAI,CAACxE;UAAO;QACpC,CAAC,CAAC;QAEF,IAAI,CAACqD,QAAQ,CAACG,EAAE,EAAE;UAChBN,OAAO,CAACuB,IAAI,CAAC,mCAAmCF,OAAO,EAAE,CAAC;UAC1D,OAAO,IAAI;QACb;QAEA,MAAMG,QAAO,GAAI,MAAMrB,QAAQ,CAACM,IAAI,CAAC,CAAC;QACtC,OAAOe,QAAQ,CAACC,MAAK,GAAI,IAAID,QAAQ,CAAC,CAAC,IAAI,IAAI;MACjD,EAAE,OAAOzB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEsB,OAAO,EAAEtB,KAAK,CAAC;QAChF,OAAO,IAAI;MACb;IACF,CAAC;IACD2B,aAAaA,CAAC9C,KAAK,EAAE;MACnB,QAAQA,KAAK,CAAC+C,MAAM;QAClB,KAAK,GAAG;UACN,OAAO,WAAW;QACpB,KAAK,GAAG;UACN,IAAI/C,KAAK,CAACgD,MAAK,KAAMhD,KAAK,CAACgD,MAAK,KAAM,IAAG,IAAKhD,KAAK,CAACgD,MAAK,KAAM,GAAG,CAAC,EAAE;YACnE,OAAO,gBAAgB;UACzB,OAAO,IAAIhD,KAAK,CAACoC,OAAO,EAAE;YACxB,OAAO,sBAAsB;UAC/B,OAAO;YACL,OAAO,QAAQ;UACjB;QACF,KAAK,GAAG;UACN,OAAO,UAAU;QACnB,KAAK,GAAG;UACN,OAAO,QAAQ;QACjB,KAAK,GAAG;UACN,OAAO,SAAS;QAClB,KAAK,GAAG;UACN,OAAO,OAAO;QAChB,KAAK,IAAI;UACP,OAAO,SAAS;QAClB;UACE,OAAO,gBAAgB;MAC3B;IACF,CAAC;IACDa,cAAcA,CAACF,MAAM,EAAE;MACrB,QAAQA,MAAM;QACZ,KAAK,GAAG;UAAE,OAAO,OAAO;QACxB,KAAK,GAAG;UAAE,OAAO,WAAW;QAC5B,KAAK,GAAG;UAAE,OAAO,UAAU;QAC3B,KAAK,GAAG;UAAE,OAAO,YAAY;QAC7B,KAAK,GAAG;UAAE,OAAO,WAAW;QAC5B,KAAK,GAAG;UAAE,OAAO,MAAM;QACvB,KAAK,IAAI;UAAE,OAAO,WAAW;QAC7B;UAAS,OAAO,SAAS;MAC3B;IACF,CAAC;IACDP,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACxE,aAAY,GAAI,EAAE;MACvB,IAAI,CAACC,iBAAgB,GAAI,EAAE;MAE3B,IAAI,CAACF,SAAS,CAACmF,OAAO,CAAClD,KAAI,IAAK;QAC9B;QACA,IAAIA,KAAK,CAACmD,KAAI,IAAKC,KAAK,CAACC,OAAO,CAACrD,KAAK,CAACmD,KAAK,CAAC,EAAE;UAC7C,MAAMG,SAAQ,GAAI,IAAI,CAACjD,UAAU,CAACL,KAAK,CAACuD,aAAa,CAAC;UACtD,MAAMC,UAAS,GAAIxD,KAAK,CAACyD,OAAM,IAAK,gBAAgB;UACpD,MAAM9B,UAAS,GAAI,IAAI,CAACmB,aAAa,CAAC9C,KAAK,CAAC;UAC5C,MAAM0D,WAAU,GAAI,IAAI,CAACT,cAAc,CAACjD,KAAK,CAAC+C,MAAM,CAAC;UACrD,MAAMT,MAAK,GAAItC,KAAK,CAACsC,MAAK,IAAKtC,KAAK,CAAC+C,MAAK,KAAM,GAAG;UAEnD/C,KAAK,CAACmD,KAAK,CAACD,OAAO,CAACS,IAAG,IAAK;YAC1B,MAAMC,WAAU,GAAID,IAAI,CAACE,aAAY,IAAKF,IAAI,CAACG,KAAI,IAAK,iBAAiB;YACzE,MAAMC,gBAAe,GAAIJ,IAAI,CAACK,WAAU,IAAK,oBAAoB;YACjE,MAAMC,eAAc,GAAIN,IAAI,CAACO,GAAE,IAAK,oBAAoB;YACxD,MAAMC,QAAO,GAAIC,UAAU,CAACT,IAAI,CAACU,GAAG,KAAK,CAAC;YAC1C,MAAMC,SAAQ,GAAI,CAACF,UAAU,CAACT,IAAI,CAACY,QAAQ,IAAIJ,QAAQ,EAAEK,OAAO,CAAC,CAAC,CAAC;YAEnE,MAAMC,QAAO,GAAI;cACfjF,IAAI,EAAE8D,SAAS;cACfoB,MAAM,EAAElB,UAAU;cAClBmB,OAAO,EAAEf,WAAW;cACpBgB,SAAS,EAAEb,gBAAgB;cAC3Bc,QAAQ,EAAEZ,eAAe;cACzBE,QAAQ,EAAEA,QAAQ;cAClBW,KAAK,EAAER,SAAS;cAChBvB,MAAM,EAAEpB,UAAU;cAClB+B,WAAW,EAAEA,WAAW;cACxBjB,OAAO,EAAEzC,KAAK,CAACmC,EAAE;cACjBlC,SAAS,EAAED,KAAK,CAAC+C;YACnB,CAAC;;YAED;YACA,IAAIT,MAAM,EAAE;cACV,IAAI,CAACtE,aAAa,CAAC+G,IAAI,CAACN,QAAQ,CAAC;YACnC,OAAO;cACL,IAAI,CAACxG,iBAAiB,CAAC8G,IAAI,CAACN,QAAQ,CAAC;YACvC;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEFrD,OAAO,CAACE,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAACtD,aAAa,CAAC;MAC7DoD,OAAO,CAACE,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAACrD,iBAAiB,CAAC;IAC1E,CAAC;IACDgD,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAACzC,UAAS,GAAI,IAAI,CAACR,aAAa,CAACgH,MAAM,CAAC,CAACF,KAAK,EAAExF,IAAI,KAAK;QAC3D,OAAOwF,KAAI,GAAIV,UAAU,CAAC9E,IAAI,CAACwF,KAAK,CAAC;MACvC,CAAC,EAAE,CAAC,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC;;MAEhB;MACA,MAAMS,YAAW,GAAI,IAAIC,GAAG,CAAC,IAAI,CAACjH,iBAAiB,CAAC+D,GAAG,CAACmD,IAAG,IAAKA,IAAI,CAAC1C,OAAO,CAAC,CAAC;MAC9E,IAAI,CAAChE,kBAAiB,GAAIwG,YAAY,CAACG,IAAI;;MAE3C;MACA,MAAMC,gBAAe,GAAI,IAAIH,GAAG,CAAC,IAAI,CAAClH,aAAa,CAACgE,GAAG,CAACmD,IAAG,IAAKA,IAAI,CAAC1C,OAAO,CAAC,CAAC;MAC9E,MAAM6C,eAAc,GAAID,gBAAgB,CAACD,IAAI;MAC7C,IAAI,CAACzG,iBAAgB,GAAI2G,eAAc,GAAI,IACzC,CAAC,IAAI,CAAC9G,UAAS,GAAI8G,eAAe,EAAEd,OAAO,CAAC,CAAC,IAAI,CAAC;;MAEpD;MACA,MAAMe,WAAU,GAAIN,YAAY,CAACG,IAAG,GAAIE,eAAe;MACvD,IAAI,CAAC5G,cAAa,GAAI6G,WAAU,GAAI,IAClC,CAAED,eAAc,GAAIC,WAAW,GAAI,GAAG,EAAEf,OAAO,CAAC,CAAC,IAAI,CAAC;IAC1D,CAAC;IACDtD,eAAeA,CAAA,EAAG;MAChB;MACA,IAAI,IAAI,CAACtC,MAAM,CAAC4G,kBAAkB,EAAE;QAClCC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC9G,MAAM,CAAC,CAACsE,OAAO,CAACyC,KAAI,IAAKA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;MAC9D;MAEA,IAAI,CAACC,wBAAwB,CAAC,CAAC;MAC/B,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAC5B,IAAI,CAACC,sBAAsB,CAAC,CAAC;MAC7B,IAAI,CAACC,sBAAsB,CAAC,CAAC;MAC7B,IAAI,CAACC,0BAA0B,CAAC,CAAC;MACjC,IAAI,CAACC,0BAA0B,CAAC,CAAC;IACnC,CAAC;IACDL,wBAAwBA,CAAA,EAAG;MACzB,MAAMM,oBAAmB,GAAI,CAAC,CAAC;MAC/B,IAAI,CAACnI,aAAa,CAACkF,OAAO,CAAC5D,IAAG,IAAK;QACjC6G,oBAAoB,CAAC7G,IAAI,CAACuF,QAAQ,IAAI,CAACsB,oBAAoB,CAAC7G,IAAI,CAACuF,QAAQ,KAAK,CAAC,IAAIT,UAAU,CAAC9E,IAAI,CAACwF,KAAK,CAAC;MAC3G,CAAC,CAAC;MAEF,MAAMsB,cAAa,GAAIX,MAAM,CAACY,IAAI,CAACF,oBAAoB,CAAC;MACxD,MAAMG,YAAW,GAAIF,cAAc,CAACpE,GAAG,CAAC8B,KAAI,IAAKqC,oBAAoB,CAACrC,KAAK,CAAC,CAAC;MAE7E,MAAMyC,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MACzD,IAAIF,GAAG,EAAE;QACP,IAAI,CAAC3H,MAAM,CAAC4G,kBAAiB,GAAI,IAAI5H,KAAK,CAAC2I,GAAG,EAAE;UAC9CG,IAAI,EAAE,UAAU;UAChB5I,IAAI,EAAE;YACJ6I,MAAM,EAAEP,cAAc;YACtBQ,QAAQ,EAAE,CACR;cACE9I,IAAI,EAAEwI,YAAY;cAClBO,eAAe,EAAE,CACf,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAQ,CAChE;cACDC,WAAW,EAAE;YACf,CAAC;UAEL,CAAC;UACDC,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNC,QAAQ,EAAE,OAAO;gBACjBR,MAAM,EAAE;kBACNS,KAAK,EAAE;gBACT;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IACDtB,qBAAqBA,CAAA,EAAG;MACtB;MACA,MAAMuB,WAAU,GAAI,CAAC,CAAC;MACtB,IAAI,CAACrJ,aAAa,CAACkF,OAAO,CAAC5D,IAAG,IAAK;QACjC+H,WAAW,CAAC/H,IAAI,CAACE,IAAI,IAAI,CAAC6H,WAAW,CAAC/H,IAAI,CAACE,IAAI,KAAK,CAAC,IAAI4E,UAAU,CAAC9E,IAAI,CAACwF,KAAK,CAAC;MACjF,CAAC,CAAC;;MAEF;MACA,MAAMwC,WAAU,GAAI7B,MAAM,CAACY,IAAI,CAACgB,WAAW,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC1D,OAAO,IAAIzI,IAAI,CAACwI,CAAC,CAAC/H,KAAK,CAAC,GAAG,CAAC,CAACiI,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI3I,IAAI,CAACyI,CAAC,CAAChI,KAAK,CAAC,GAAG,CAAC,CAACiI,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;MAChG,CAAC,CAAC;MAEF,MAAMC,UAAS,GAAIN,WAAW;MAC9B,MAAMO,QAAO,GAAIP,WAAW,CAACtF,GAAG,CAACxC,IAAG,IAAK6H,WAAW,CAAC7H,IAAI,CAAC,CAAC;MAE3D,MAAM+G,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;MACtD,IAAIF,GAAG,EAAE;QACP,IAAI,CAAC3H,MAAM,CAACkJ,eAAc,GAAI,IAAIlK,KAAK,CAAC2I,GAAG,EAAE;UAC3CG,IAAI,EAAE,MAAM;UACZ5I,IAAI,EAAE;YACJ6I,MAAM,EAAEiB,UAAU;YAClBhB,QAAQ,EAAE,CACR;cACE9C,KAAK,EAAE,YAAY;cACnBhG,IAAI,EAAE+J,QAAQ;cACdE,IAAI,EAAE,KAAK;cACXC,WAAW,EAAE,SAAS;cACtBC,OAAO,EAAE;YACX,CAAC;UAEL,CAAC;UACDlB,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNgB,OAAO,EAAE,IAAI;gBACbvB,MAAM,EAAE;kBACNS,KAAK,EAAE;gBACT;cACF;YACF,CAAC;YACDe,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,WAAW,EAAE,IAAI;gBACjBC,KAAK,EAAE;kBACLlB,KAAK,EAAE;gBACT;cACF,CAAC;cACDmB,CAAC,EAAE;gBACDD,KAAK,EAAE;kBACLlB,KAAK,EAAE;gBACT;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IACDrB,sBAAsBA,CAAA,EAAG;MACvB;MACA,MAAMhI,SAAQ,GAAI,CAAC,GAAG,IAAI,CAACC,aAAa,EAAE,GAAG,IAAI,CAACC,iBAAiB,CAAC;;MAEpE;MACA,MAAMuK,YAAW,GAAI,CAAC,CAAC;MACvBzK,SAAS,CAACmF,OAAO,CAAClD,KAAI,IAAK;QACzBwI,YAAY,CAACxI,KAAK,CAAC+C,MAAM,IAAI,CAACyF,YAAY,CAACxI,KAAK,CAAC+C,MAAM,KAAK,CAAC,IAAI,CAAC;MACpE,CAAC,CAAC;MAEF,MAAM0F,YAAW,GAAIhD,MAAM,CAACY,IAAI,CAACmC,YAAY,CAAC;MAC9C,MAAME,UAAS,GAAID,YAAY,CAACzG,GAAG,CAAC8B,KAAI,IAAK0E,YAAY,CAAC1E,KAAK,CAAC,CAAC;MAEjE,MAAMyC,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;MACvD,IAAIF,GAAG,EAAE;QACP,IAAI,CAAC3H,MAAM,CAAC+J,gBAAe,GAAI,IAAI/K,KAAK,CAAC2I,GAAG,EAAE;UAC5CG,IAAI,EAAE,KAAK;UACX5I,IAAI,EAAE;YACJ6I,MAAM,EAAE8B,YAAY;YACpB7B,QAAQ,EAAE,CACR;cACE9I,IAAI,EAAE4K,UAAU;cAChB7B,eAAe,EAAE,CACf,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAQ,CACrD;cACDC,WAAW,EAAE;YACf,CAAC;UAEL,CAAC;UACDC,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNC,QAAQ,EAAE,OAAO;gBACjBR,MAAM,EAAE;kBACNS,KAAK,EAAE;gBACT;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IACDpB,sBAAsBA,CAAA,EAAG;MACvB;MACA,MAAM4C,cAAa,GAAI,CAAC,CAAC;MACzB,IAAI,CAAC5K,aAAa,CAACkF,OAAO,CAAC5D,IAAG,IAAK;QACjCsJ,cAAc,CAACtJ,IAAI,CAACqF,OAAO,IAAI,CAACiE,cAAc,CAACtJ,IAAI,CAACqF,OAAO,KAAK,CAAC,IAAIP,UAAU,CAAC9E,IAAI,CAACwF,KAAK,CAAC;MAC7F,CAAC,CAAC;;MAEF;MACA,MAAM+D,cAAa,GAAIpD,MAAM,CAACqD,OAAO,CAACF,cAAc,EACjDrB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,IAAID,CAAC,CAAC,CAAC,CAAC,EAC1BuB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAEd,MAAMC,aAAY,GAAIH,cAAc,CAAC7G,GAAG,CAACmD,IAAG,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC;MACzD,MAAM8D,WAAU,GAAIJ,cAAc,CAAC7G,GAAG,CAACmD,IAAG,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC;MAEvD,MAAMoB,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;MACvD,IAAIF,GAAG,EAAE;QACP,IAAI,CAAC3H,MAAM,CAACsK,gBAAe,GAAI,IAAItL,KAAK,CAAC2I,GAAG,EAAE;UAC5CG,IAAI,EAAE,KAAK;UACX5I,IAAI,EAAE;YACJ6I,MAAM,EAAEqC,aAAa;YACrBpC,QAAQ,EAAE,CACR;cACE9C,KAAK,EAAE,YAAY;cACnBhG,IAAI,EAAEmL,WAAW;cACjBpC,eAAe,EAAE,SAAS;cAC1BsC,YAAY,EAAE;YAChB,CAAC;UAEL,CAAC;UACDpC,OAAO,EAAE;YACPqC,SAAS,EAAE,GAAG;YACdpC,UAAU,EAAE,IAAI;YAChBC,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNgB,OAAO,EAAE;cACX;YACF,CAAC;YACDC,MAAM,EAAE;cACNI,CAAC,EAAE;gBACDF,WAAW,EAAE,IAAI;gBACjBC,KAAK,EAAE;kBACLlB,KAAK,EAAE;gBACT;cACF,CAAC;cACDgB,CAAC,EAAE;gBACDE,KAAK,EAAE;kBACLlB,KAAK,EAAE;gBACT;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IACDnB,0BAA0BA,CAAA,EAAG;MAC3B;MACA;MACA;MACA,MAAMoD,OAAM,GAAI;QACd,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,EAAE;QACV,WAAW,EAAE,EAAE;QACf,UAAU,EAAE,EAAE;QACd,OAAO,EAAE,CAAC;QACV,QAAQ,EAAE;MACZ,CAAC;MAED,MAAMC,SAAQ,GAAI7D,MAAM,CAACY,IAAI,CAACgD,OAAO,CAAC;MACtC,MAAME,SAAQ,GAAI9D,MAAM,CAACC,MAAM,CAAC2D,OAAO,CAAC;MAExC,MAAM9C,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,sBAAsB,CAAC;MAC3D,IAAIF,GAAG,EAAE;QACP,IAAI,CAAC3H,MAAM,CAAC4K,oBAAmB,GAAI,IAAI5L,KAAK,CAAC2I,GAAG,EAAE;UAChDG,IAAI,EAAE,KAAK;UACX5I,IAAI,EAAE;YACJ6I,MAAM,EAAE2C,SAAS;YACjB1C,QAAQ,EAAE,CACR;cACE9I,IAAI,EAAEyL,SAAS;cACf1C,eAAe,EAAE,CACf,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAQ,CAChE;cACDC,WAAW,EAAE;YACf,CAAC;UAEL,CAAC;UACDC,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNC,QAAQ,EAAE,OAAO;gBACjBR,MAAM,EAAE;kBACNS,KAAK,EAAE;gBACT;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IACDlB,0BAA0BA,CAAA,EAAG;MAC3B;MACA;MACA;MACA,MAAMuD,WAAU,GAAI;QAClB9C,MAAM,EAAE,CAAC,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC;QAC5DC,QAAQ,EAAE,CACR;UACE9C,KAAK,EAAE,mBAAmB;UAC1BhG,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;UACtB+I,eAAe,EAAE,SAAS;UAC1BsC,YAAY,EAAE;QAChB;MAEJ,CAAC;MAED,MAAM5C,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,sBAAsB,CAAC;MAC3D,IAAIF,GAAG,EAAE;QACP,IAAI,CAAC3H,MAAM,CAAC8K,oBAAmB,GAAI,IAAI9L,KAAK,CAAC2I,GAAG,EAAE;UAChDG,IAAI,EAAE,KAAK;UACX5I,IAAI,EAAE2L,WAAW;UACjB1C,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBC,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNgB,OAAO,EAAE;cACX;YACF,CAAC;YACDC,MAAM,EAAE;cACNC,CAAC,EAAE;gBACDC,WAAW,EAAE,IAAI;gBACjBC,KAAK,EAAE;kBACLlB,KAAK,EAAE;gBACT;cACF,CAAC;cACDmB,CAAC,EAAE;gBACDD,KAAK,EAAE;kBACLlB,KAAK,EAAE;gBACT;cACF;YACF;UACF;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EACDuC,KAAK,EAAE;IACLrL,UAAU,EAAE,SAAAA,CAAA,EAAW;MACrB8C,OAAO,CAACE,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAChD,UAAU,CAAC;MACtD;IACF,CAAC;IACDC,YAAY,EAAE,SAAAA,CAAA,EAAW;MACvB6C,OAAO,CAACE,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC/C,YAAY,CAAC;MAC1D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}