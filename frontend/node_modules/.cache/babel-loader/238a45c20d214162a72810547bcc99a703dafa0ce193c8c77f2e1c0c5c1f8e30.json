{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-content\"\n};\nconst _hoisted_3 = {\n  class: \"kpi-container\"\n};\nconst _hoisted_4 = {\n  class: \"kpi-card\"\n};\nconst _hoisted_5 = {\n  class: \"kpi-value\"\n};\nconst _hoisted_6 = {\n  class: \"kpi-card\"\n};\nconst _hoisted_7 = {\n  class: \"kpi-value\"\n};\nconst _hoisted_8 = {\n  class: \"kpi-card\"\n};\nconst _hoisted_9 = {\n  class: \"kpi-value\"\n};\nconst _hoisted_10 = {\n  class: \"kpi-card\"\n};\nconst _hoisted_11 = {\n  class: \"kpi-value\"\n};\nconst _hoisted_12 = {\n  class: \"data-section\"\n};\nconst _hoisted_13 = {\n  class: \"section-header\"\n};\nconst _hoisted_14 = {\n  class: \"filters\"\n};\nconst _hoisted_15 = {\n  class: \"sales-details\"\n};\nconst _hoisted_16 = {\n  class: \"status-tag paid\"\n};\nconst _hoisted_17 = {\n  class: \"data-section\"\n};\nconst _hoisted_18 = {\n  class: \"section-header\"\n};\nconst _hoisted_19 = {\n  class: \"filters\"\n};\nconst _hoisted_20 = {\n  class: \"sales-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[14] || (_cache[14] = _createElementVNode(\"h2\", {\n    class: \"section-title\"\n  }, \"Tableau\", -1 /* HOISTED */)), _cache[15] || (_cache[15] = _createElementVNode(\"h2\", {\n    class: \"section-title\"\n  }, \"de\", -1 /* HOISTED */)), _cache[16] || (_cache[16] = _createElementVNode(\"h2\", {\n    class: \"section-title\"\n  }, \"bord\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Résumé des indicateurs clés \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Total des ventes\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_5, _toDisplayString($data.totalSales) + \"€\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_6, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Commandes en attente\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_7, _toDisplayString($data.totalPendingOrders), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_8, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Taux de conversion\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_9, _toDisplayString($data.conversionRate) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_10, [_cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Panier moyen\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_11, _toDisplayString($data.averageOrderValue) + \"€\", 1 /* TEXT */)])]), _createCommentVNode(\" Graphiques d'analyse \"), _cache[13] || (_cache[13] = _createStaticVNode(\"<div class=\\\"charts-row\\\" data-v-f2d5740e><div class=\\\"chart-container\\\" data-v-f2d5740e><h3 data-v-f2d5740e>Ventes par catégorie</h3><canvas id=\\\"categorySalesChart\\\" data-v-f2d5740e></canvas></div><div class=\\\"chart-container\\\" data-v-f2d5740e><h3 data-v-f2d5740e>Évolution des ventes</h3><canvas id=\\\"salesTrendChart\\\" data-v-f2d5740e></canvas></div></div><div class=\\\"charts-row\\\" data-v-f2d5740e><div class=\\\"chart-container\\\" data-v-f2d5740e><h3 data-v-f2d5740e>Statut des commandes</h3><canvas id=\\\"orderStatusChart\\\" data-v-f2d5740e></canvas></div><div class=\\\"chart-container\\\" data-v-f2d5740e><h3 data-v-f2d5740e>Top produits vendus</h3><canvas id=\\\"topProductsChart\\\" data-v-f2d5740e></canvas></div></div>\", 2)), _createCommentVNode(\" Tableau des commandes payées \"), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Commandes payées\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.dateFilter = $event)\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"option\", {\n    value: \"all\"\n  }, \"Toutes les périodes\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"today\"\n  }, \"Aujourd'hui\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Cette semaine\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"month\"\n  }, \"Ce mois\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.dateFilter]])])]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"table\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Client\"), _createElementVNode(\"th\", null, \"Produit\"), _createElementVNode(\"th\", null, \"Référence\"), _createElementVNode(\"th\", null, \"Catégorie\"), _createElementVNode(\"th\", null, \"Quantité\"), _createElementVNode(\"th\", null, \"Total\"), _createElementVNode(\"th\", null, \"Statut\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredPaidSales, (sale, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: 'paid-' + index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(sale.date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.client), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.product), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.reference), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.quantity), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.total) + \"€\", 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", _hoisted_16, _toDisplayString(sale.status), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])]), _createCommentVNode(\" Tableau des commandes en cours \"), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Commandes en attente\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_19, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.statusFilter = $event)\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"option\", {\n    value: \"all\"\n  }, \"Tous les statuts\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"0\"\n  }, \"Brouillon\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"1\"\n  }, \"Validée\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"3\"\n  }, \"En traitement\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.statusFilter]])])]), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"table\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Produit\"), _createElementVNode(\"th\", null, \"Référence\"), _createElementVNode(\"th\", null, \"Catégorie\"), _createElementVNode(\"th\", null, \"Quantité\"), _createElementVNode(\"th\", null, \"Total\"), _createElementVNode(\"th\", null, \"Statut\"), _createElementVNode(\"th\", null, \"Actions\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredPendingOrders, (order, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: 'pending-' + index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(order.date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.client), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.product), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.reference), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.quantity), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(order.total) + \"€\", 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      class: _normalizeClass('status-tag ' + order.statusClass)\n    }, _toDisplayString(order.status), 3 /* TEXT, CLASS */)]), _cache[11] || (_cache[11] = _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: \"action-btn\"\n    }, \"Détails\")], -1 /* HOISTED */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])])]), _createCommentVNode(\" Analyse des clients \")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","$data","totalSales","_hoisted_6","_hoisted_7","totalPendingOrders","_hoisted_8","_hoisted_9","conversionRate","_hoisted_10","_hoisted_11","averageOrderValue","_createStaticVNode","_hoisted_12","_hoisted_13","_hoisted_14","_cache","$event","dateFilter","value","_hoisted_15","_Fragment","_renderList","$options","filteredPaidSales","sale","index","key","date","client","product","reference","category","quantity","total","_hoisted_16","status","_hoisted_17","_hoisted_18","_hoisted_19","statusFilter","_hoisted_20","filteredPendingOrders","order","_normalizeClass","statusClass"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2 class=\"section-title\">Tableau</h2>\n    <h2 class=\"section-title\">de</h2>\n    <h2 class=\"section-title\">bord</h2>\n    \n    <div class=\"dashboard-content\">\n      <!-- Résumé des indicateurs clés -->\n      <div class=\"kpi-container\">\n        <div class=\"kpi-card\">\n          <h3>Total des ventes</h3>\n          <p class=\"kpi-value\">{{ totalSales }}€</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Commandes en attente</h3>\n          <p class=\"kpi-value\">{{ totalPendingOrders }}</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Taux de conversion</h3>\n          <p class=\"kpi-value\">{{ conversionRate }}%</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Panier moyen</h3>\n          <p class=\"kpi-value\">{{ averageOrderValue }}€</p>\n        </div>\n      </div>\n\n      <!-- Graphiques d'analyse -->\n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Ventes par catégorie</h3>\n          <canvas id=\"categorySalesChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Évolution des ventes</h3>\n          <canvas id=\"salesTrendChart\"></canvas>\n        </div>\n      </div>\n      \n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Statut des commandes</h3>\n          <canvas id=\"orderStatusChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Top produits vendus</h3>\n          <canvas id=\"topProductsChart\"></canvas>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes payées -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes payées</h2>\n          <div class=\"filters\">\n            <select v-model=\"dateFilter\">\n              <option value=\"all\">Toutes les périodes</option>\n              <option value=\"today\">Aujourd'hui</option>\n              <option value=\"week\">Cette semaine</option>\n              <option value=\"month\">Ce mois</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(sale, index) in filteredPaidSales\" :key=\"'paid-'+index\">\n                <td>{{ sale.date }}</td>\n                <td>{{ sale.client }}</td>\n                <td>{{ sale.product }}</td>\n                <td>{{ sale.reference }}</td>\n                <td>{{ sale.category }}</td>\n                <td>{{ sale.quantity }}</td>\n                <td>{{ sale.total }}€</td>\n                <td><span class=\"status-tag paid\">{{ sale.status }}</span></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes en cours -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes en attente</h2>\n          <div class=\"filters\">\n            <select v-model=\"statusFilter\">\n              <option value=\"all\">Tous les statuts</option>\n              <option value=\"0\">Brouillon</option>\n              <option value=\"1\">Validée</option>\n              <option value=\"3\">En traitement</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(order, index) in filteredPendingOrders\" :key=\"'pending-'+index\">\n                <td>{{ order.date }}</td>\n                <td>{{ order.client }}</td>\n                <td>{{ order.product }}</td>\n                <td>{{ order.reference }}</td>\n                <td>{{ order.category }}</td>\n                <td>{{ order.quantity }}</td>\n                <td>{{ order.total }}€</td>\n                <td><span :class=\"'status-tag ' + order.statusClass\">{{ order.status }}</span></td>\n                <td>\n                  <button class=\"action-btn\">Détails</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Analyse des clients -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      allOrders: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {},\n      productCategories: {} // Cache pour les catégories de produits\n    };\n  },\n  computed: {\n    filteredPaidSales() {\n      if (this.dateFilter === 'all') {\n        return this.paidSalesData;\n      }\n      \n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      \n      return this.paidSalesData.filter(sale => {\n        const dateParts = sale.date.split('/');\n        const saleDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);\n        \n        if (this.dateFilter === 'today') {\n          return saleDate >= today;\n        } else if (this.dateFilter === 'week') {\n          const lastWeek = new Date(today);\n          lastWeek.setDate(today.getDate() - 7);\n          return saleDate >= lastWeek;\n        } else if (this.dateFilter === 'month') {\n          const lastMonth = new Date(today);\n          lastMonth.setMonth(today.getMonth() - 1);\n          return saleDate >= lastMonth;\n        }\n        return true;\n      });\n    },\n    filteredPendingOrders() {\n      if (this.statusFilter === 'all') {\n        return this.pendingOrdersData;\n      }\n      \n      return this.pendingOrdersData.filter(order => {\n        return order.rawStatus === this.statusFilter;\n      });\n    }\n  },\n  mounted() {\n    this.fetchAllOrdersData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      if (!timestamp) return \"Inconnue\";\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllOrdersData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        \n        // Récupérer toutes les commandes\n        await this.fetchOrders();\n        \n        // Calculer les KPIs\n        this.calculateKPIs();\n        \n        // Générer tous les graphiques\n        this.renderAllCharts();\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n      }\n    },\n    async fetchOrders() {\n      try {\n        // Récupérer toutes les commandes\n        const url = `${this.apiLink}/orders`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        \n        const rawOrders = await response.json();\n        console.log(\"Commandes récupérées:\", rawOrders);\n        \n        // Pour chaque commande, récupérer les détails et les factures associées\n        this.allOrders = await Promise.all(\n          rawOrders.map(async (order) => {\n            // Récupérer les détails de la commande\n            const orderDetails = await this.fetchOrderDetails(order.id);\n            \n            // Récupérer la facture associée\n            const invoice = await this.fetchInvoiceForOrder(order.id);\n            \n            return {\n              ...orderDetails,\n              invoice,\n              isPaid: invoice ? invoice.paye === \"1\" || invoice.paye === 1 : false,\n            };\n          })\n        );\n        \n        // Traiter les données pour l'affichage\n        await this.processOrdersData();\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    async fetchOrderDetails(orderId) {\n      try {\n        const url = `${this.apiLink}/orders/${orderId}`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Erreur réseau pour la commande ${orderId}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n      } catch (error) {\n        console.error(`Erreur lors de la récupération des détails de la commande ${orderId}:`, error);\n        return null;\n      }\n    },\n    async fetchInvoiceForOrder(orderId) {\n      try {\n        const url = `${this.apiLink}/orders/${orderId}/invoices`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (!response.ok) {\n          console.warn(`Pas de facture pour la commande ${orderId}`);\n          return null;\n        }\n\n        const invoices = await response.json();\n        return invoices.length > 0 ? invoices[0] : null;\n      } catch (error) {\n        console.error(\"Erreur de récupération de facture pour commande\", orderId, error);\n        return null;\n      }\n    },\n    async fetchProductCategories(productId) {\n      // Si nous avons déjà récupéré les catégories pour ce produit, utiliser le cache\n      if (this.productCategories[productId]) {\n        return this.productCategories[productId];\n      }\n      \n      try {\n        const url = `${this.apiLink}/products/${productId}/categories`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (!response.ok) {\n          console.warn(`Pas de catégories pour le produit ${productId}`);\n          this.productCategories[productId] = \"Non catégorisé\";\n          return \"Non catégorisé\";\n        }\n\n        const categories = await response.json();\n        if (categories && categories.length > 0) {\n          // Prendre la première catégorie comme catégorie principale\n          const categoryName = categories[0].label || \"Catégorie inconnue\";\n          this.productCategories[productId] = categoryName;\n          return categoryName;\n        } else {\n          this.productCategories[productId] = \"Non catégorisé\";\n          return \"Non catégorisé\";\n        }\n      } catch (error) {\n        console.error(`Erreur lors de la récupération des catégories pour le produit ${productId}:`, error);\n        this.productCategories[productId] = \"Erreur de catégorie\";\n        return \"Erreur de catégorie\";\n      }\n    },\n    getStatusText(order) {\n      switch (order.status) {\n        case \"0\":\n          return \"Brouillon\";\n        case \"1\":\n          if (order.billed && (order.billed === true || order.billed === \"1\")) {\n            return \"Validé-Facturé\";\n          } else if (order.invoice) {\n            return \"Validé-Facture créée\";\n          } else {\n            return \"Validé\";\n          }\n        case \"2\":\n          return \"Facturée\";\n        case \"3\":\n          return \"Livrée\";\n        case \"4\":\n          return \"Traitée\";\n        case \"5\":\n          return \"Payée\";\n        case \"-1\":\n          return \"Annulée\";\n        default:\n          return \"Statut inconnu\";\n      }\n    },\n    getStatusClass(status) {\n      switch (status) {\n        case \"0\": return \"draft\";\n        case \"1\": return \"validated\";\n        case \"2\": return \"invoiced\";\n        case \"3\": return \"processing\";\n        case \"4\": return \"processed\";\n        case \"5\": return \"paid\";\n        case \"-1\": return \"cancelled\";\n        default: return \"unknown\";\n      }\n    },\n    async processOrdersData() {\n      this.paidSalesData = [];\n      this.pendingOrdersData = [];\n      \n      // Traiter chaque commande\n      for (const order of this.allOrders) {\n        // Vérifier si la commande a des lignes\n        if (order.lines && Array.isArray(order.lines)) {\n          const orderDate = this.formatDate(order.date_creation);\n          const clientName = order.socname || \"Client inconnu\";\n          const statusText = this.getStatusText(order);\n          const statusClass = this.getStatusClass(order.status);\n          const isPaid = order.isPaid || order.status === \"5\";\n          \n          // Traiter chaque ligne de la commande\n          for (const line of order.lines) {\n            const productName = line.product_label || line.label || \"Produit inconnu\";\n            const productReference = line.product_ref || \"Référence inconnue\";\n            const quantity = parseFloat(line.qty) || 0;\n            const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n            \n            // Récupérer la catégorie du produit si nous avons un ID de produit\n            let categoryName = \"Catégorie inconnue\";\n            if (line.fk_product) {\n              categoryName = await this.fetchProductCategories(line.fk_product);\n            }\n            \n            const saleData = {\n              date: orderDate,\n              client: clientName,\n              product: productName,\n              reference: productReference,\n              category: categoryName,\n              quantity: quantity,\n              total: lineTotal,\n              status: statusText,\n              statusClass: statusClass,\n              orderId: order.id,\n              rawStatus: order.status\n            };\n            \n            // Ajouter aux données appropriées selon le statut\n            if (isPaid) {\n              this.paidSalesData.push(saleData);\n            } else {\n              this.pendingOrdersData.push(saleData);\n            }\n          }\n        }\n      }\n      \n      console.log(\"Données des ventes payées:\", this.paidSalesData);\n      console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n      \n      // Nombre total de commandes en attente\n      const uniqueOrders = new Set(this.pendingOrdersData.map(item => item.orderId));\n      this.totalPendingOrders = uniqueOrders.size;\n      \n      // Calcul du panier moyen\n      const uniquePaidOrders = new Set(this.paidSalesData.map(item => item.orderId));\n      const paidOrdersCount = uniquePaidOrders.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? \n        (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n      \n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrders = uniqueOrders.size + paidOrdersCount;\n      this.conversionRate = totalOrders > 0 ? \n        ((paidOrdersCount / totalOrders) * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      \n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [\n              {\n                data: categoryData,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      \n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: dateData,\n                fill: false,\n                borderColor: '#5AAAD8',\n                tension: 0.1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n      \n      // Compter par statut\n      const statusCounts = {};\n      allOrders.forEach(order => {\n        statusCounts[order.status] = (statusCounts[order.status] || 0) + 1;\n      });\n      \n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [\n              {\n                data: statusData,\n                backgroundColor: [\n                  '#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5);\n      \n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: productData,\n                backgroundColor: '#5AAAD8',\n                borderRadius: 6,\n              },\n            ],\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Dans une implémentation complète, vous pourriez analyser les adresses des clients \n      // Pour l'instant, utilisons des données fictives\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      \n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [\n              {\n                data: geoValues,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Dans une implémentation complète, vous pourriez compter les commandes par client\n      // Pour l'instant, utilisons des données fictives\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [\n          {\n            label: 'Nombre de clients',\n            data: [65, 40, 25, 15],\n            backgroundColor: '#5AAAD8',\n            borderRadius: 6,\n          }\n        ]\n      };\n\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function() {\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Les données sont automatiquement filtrées via le computed property filteredPaidSales\n    },\n    statusFilter: function() {\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Les données sont automatiquement filtrées via le computed property filteredPendingOrders\n    }\n  }\n};\n</script>\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n  margin-left: 115px;\n}\n\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n  min-height: 100vh;\n}\n\nh1, h2, h3 {\n  font-family: 'PP Formula', sans-serif;\n  margin-bottom: 1rem;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n  margin-right: 115px;\n  padding-top: 30px;\n}\n\n/* KPI Cards */\n.kpi-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.kpi-card {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  padding: 20px;\n  flex: 1;\n  min-width: 200px;\n  text-align: center;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.kpi-value {\n  font-size: 28px;\n  font-weight: bold;\n  margin-top: 10px;\n  color: #5AAAD8;\n}\n\n/* Chart layouts */\n.charts-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  flex: 1;\n  min-width: 300px;\n  color: #1e1e1e;\n}\n\n.chart-container h3 {\n  color: #1e1e1e;\n  margin-bottom: 15px;\n  font-size: 18px;\n}\n\n/* Data tables */\n.data-section {\n  margin-bottom: 40px;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.filters select {\n  padding: 8px 12px;\n  border-radius: 6px;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #f7f7f7;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  width: 100%;\n  color: #1e1e1e;\n  overflow-x: auto;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.9em;\n}\n\nth, td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\nth {\n  background-color: #f7f7f7;\n  font-weight: bold;\n}\n\n/* Status tags */\n.status-tag {\n  padding: 5px 10px;\n  border-radius: 12px;\n  font-size: 0.85em;\n  color: white;\n  font-weight: 500;\n}\n\n.status-tag.paid {\n  background-color: #28a745;\n}\n\n.status-tag.draft {\n  background-color: #6c757d;\n}\n\n.status-tag.validated {\n  background-color: #007bff;\n}\n\n.status-tag.processing {\n  background-color: #ffc107;\n  color: #1e1e1e;\n}\n\n.status-tag.invoiced {\n  background-color: #17a2b8;\n}\n\n.status-tag.processed {\n  background-color: #20c997;\n}\n\n.status-tag.cancelled {\n  background-color: #dc3545;\n}\n\n.status-tag.unknown {\n  background-color: #6c757d;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #5AAAD8;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-size: 0.85em;\n}\n\n.action-btn:hover {\n  background-color: #4990b8;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}