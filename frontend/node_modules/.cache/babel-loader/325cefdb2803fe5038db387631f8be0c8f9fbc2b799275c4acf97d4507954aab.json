{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sales-dashboard\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  const _component_SalesSummary = _resolveComponent(\"SalesSummary\");\n  const _component_ProductSalesList = _resolveComponent(\"ProductSalesList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavBar), _cache[0] || (_cache[0] = _createElementVNode(\"h1\", {\n    class: \"title\"\n  }, \"Tableau de bord des ventes\", -1 /* HOISTED */)), _createVNode(_component_SalesSummary, {\n    \"total-sales\": $data.summary.total_sales\n  }, null, 8 /* PROPS */, [\"total-sales\"]), _createVNode(_component_ProductSalesList, {\n    products: $data.summary.product_sales\n  }, null, 8 /* PROPS */, [\"products\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_NavBar","_createElementVNode","_component_SalesSummary","$data","summary","total_sales","_component_ProductSalesList","products","product_sales"],"sources":["/Users/macbookpro/Sham/S6/Eval2-1/frontend/src/views/SalesDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"sales-dashboard\">\n    <NavBar />\n    <h1 class=\"title\">Tableau de bord des ventes</h1>\n\n    <SalesSummary :total-sales=\"summary.total_sales\" />\n\n    <ProductSalesList :products=\"summary.product_sales\" />\n  </div>\n</template>\n\n<script>\nimport NavBar from \"@/components/NavBar.vue\";\nimport SalesSummary from \"@/components/SalesSummary.vue\";\nimport ProductSalesList from \"@/components/ProductSalesList.vue\";\n\nexport default {\n  name: \"SalesDashboard\",\n  components: {\n    NavBar,\n    SalesSummary,\n    ProductSalesList,\n  },\n  data() {\n    return {\n      summary: {\n        total_sales: 0,\n        product_sales: [],\n      },\n      authToken: localStorage.getItem('authToken'),\n      apiLink: localStorage.getItem('apiLink') || 'http://localhost:8080/api/v1'\n    };\n  },\n  async mounted() {\n    await this.fetchSales();\n  },\n  methods: {\n    async fetchSales() {\n      try {\n        const filter = encodeURIComponent(\"DocStatus eq 'CO' AND IsSOTrx eq true\");\n        const select = \"C_Order_ID,DocumentNo,DateOrdered\";\n        const expand = encodeURIComponent(\"C_OrderLine($select=M_Product_ID,QtyOrdered,LineNetAmt;$expand=M_Product_ID($select=Name))\");\n        const url = `${this.apiLink}/models/C_Order?$filter=${filter}&$select=${select}&$expand=${expand}`;\n\n        const headers = this.authToken ? { 'Authorization': `Bearer ${this.authToken}` } : {};\n        const response = await fetch(url, { headers });\n        if (!response.ok) throw new Error(`Erreur réseau: ${response.statusText}`);\n\n        const data = await response.json();\n        const orders = Array.isArray(data.records) ? data.records : [];\n\n        // 1. Aplatir toutes les lignes de commande\n        const lines = orders.flatMap(order => order.C_OrderLine || []);\n\n        // 2. Calcul du chiffre d'affaires total\n        const totalSales = lines.reduce((sum, line) => sum + (parseFloat(line.LineNetAmt) || 0), 0);\n\n        // 3. Regroupement par produit\n        const salesMap = {};\n        lines.forEach(line => {\n          const prod = line.M_Product_ID || {};\n          const pid = prod.id;\n          if (!salesMap[pid]) {\n            salesMap[pid] = { name: prod.Name || '', sales: 0, quantity: 0 };\n          }\n          salesMap[pid].sales += parseFloat(line.LineNetAmt) || 0;\n          salesMap[pid].quantity += parseFloat(line.QtyOrdered) || 0;\n        });\n\n        // 4. Format pour ProductSalesList\n        const productSales = Object.values(salesMap).map(p => ({\n          label: p.name,\n          qty_sold: p.quantity,\n          total_ttc: p.sales\n        }));\n\n        // Mise à jour du state\n        this.summary.total_sales = totalSales;\n        this.summary.product_sales = productSales;\n      } catch (error) {\n        console.error(\"Erreur de chargement des ventes :\", error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.sales-dashboard {\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 20px;\n}\n.title {\n  font-size: 2rem;\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;;;;uBAA5BC,mBAAA,CAOM,OAPNC,UAOM,GANJC,YAAA,CAAUC,iBAAA,G,0BACVC,mBAAA,CAAiD;IAA7CL,KAAK,EAAC;EAAO,GAAC,4BAA0B,sBAE5CG,YAAA,CAAmDG,uBAAA;IAApC,aAAW,EAAEC,KAAA,CAAAC,OAAO,CAACC;4CAEpCN,YAAA,CAAsDO,2BAAA;IAAnCC,QAAQ,EAAEJ,KAAA,CAAAC,OAAO,CAACI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}