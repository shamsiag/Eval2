{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'MesCommandes',\n  data() {\n    return {\n      orders: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      clientId: localStorage.getItem('clientId')\n    };\n  },\n  created() {\n    this.fetchOrders();\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        if (!this.apiKey || !this.apiLink || !this.clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n        // Récupérer toutes les commandes du client\n        const url = `${this.apiLink}/orders?fk_soc=${this.clientId}`;\n        const response = await axios.get(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        this.orders = response.data;\n        console.log(\"Commandes récupérées:\", this.orders);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    // Formatage du montant\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    // Convertir un timestamp Unix (en secondes) en date lisible\n    formatDate(timestamp) {\n      if (!timestamp) return \"Inconnue\";\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    // Mapping des statuts selon vos correspondances\n    getStatusText(order) {\n      console.log(\"Statut de la commande:\", order.status);\n      console.log(\"StatuT:\", order.statut);\n      console.log(\"Billed:\", order.billed);\n      switch (order.status) {\n        case \"0\":\n          return \"Commande créée\";\n        case \"1\":\n          \"Validé\";\n        case \"2\":\n          return \"Invoice created\";\n        case \"3\":\n          return \"Delivered\";\n        case \"4\":\n          return \"Processed\";\n        case \"-1\":\n          return \"Canceled\";\n        default:\n          return \"Statut inconnu\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","orders","apiKey","localStorage","getItem","apiLink","clientId","created","fetchOrders","methods","Error","url","response","get","headers","console","log","error","formatCurrency","value","Intl","NumberFormat","style","currency","format","formatDate","timestamp","date","Date","toLocaleDateString","getStatusText","order","status","statut","billed"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/OrdersPage.vue"],"sourcesContent":["<template>\n    <div class=\"orders-page\">\n      <h1>Mes Commandes</h1>\n      <table v-if=\"orders.length\">\n        <thead>\n          <tr>\n            <th>Référence</th>\n            <th>Date</th>\n            <th>Total TTC</th>\n            <th>Statut</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"order in orders\" :key=\"order.id\">\n            <td>{{ order.ref || order.id }}</td>\n            <td>{{ formatDate(order.date_creation) }}</td>\n            <td>{{ formatCurrency(order.total_ttc) }}</td>\n            <td>{{ getStatusText(order) }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <p v-else>Aucune commande trouvée.</p>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name: 'MesCommandes',\n    data() {\n      return {\n        orders: [],\n        apiKey: localStorage.getItem('apiKey'),\n        apiLink: localStorage.getItem('apiLink'),\n        clientId: localStorage.getItem('clientId'),\n      };\n    },\n    created() {\n      this.fetchOrders();\n    },\n    methods: {\n      async fetchOrders() {\n        try {\n          if (!this.apiKey || !this.apiLink || !this.clientId) {\n            throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n          }\n          // Récupérer toutes les commandes du client\n          const url = `${this.apiLink}/orders?fk_soc=${this.clientId}`;\n          const response = await axios.get(url, {\n            headers: { \"DOLAPIKEY\": this.apiKey },\n          });\n          this.orders = response.data;\n          console.log(\"Commandes récupérées:\", this.orders);\n        } catch (error) {\n          console.error(\"Erreur lors de la récupération des commandes:\", error);\n        }\n      },\n      // Formatage du montant\n      formatCurrency(value) {\n        return new Intl.NumberFormat(\"fr-FR\", {\n          style: \"currency\",\n          currency: \"EUR\",\n        }).format(value);\n      },\n      // Convertir un timestamp Unix (en secondes) en date lisible\n      formatDate(timestamp) {\n        if (!timestamp) return \"Inconnue\";\n        const date = new Date(timestamp * 1000);\n        return date.toLocaleDateString(\"fr-FR\");\n      },\n      // Mapping des statuts selon vos correspondances\n      getStatusText(order) {\n        console.log(\"Statut de la commande:\", order.status);\n        console.log(\"StatuT:\", order.statut);\n        console.log(\"Billed:\", order.billed);\n        switch (order.status) {\n        case \"0\":\n            return \"Commande créée\";\n        case \"1\":\n            \"Validé\";\n            \n        case \"2\":\n            return \"Invoice created\";\n        case \"3\":\n            return \"Delivered\";\n        case \"4\":\n            return \"Processed\";\n        case \"-1\":\n            return \"Canceled\";\n        default:\n            return \"Statut inconnu\";\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .orders-page {\n    padding: 40px 20px;\n    background-color: #0e100e;\n    color: #f7f7f7;\n    font-family: 'PP Formula', sans-serif;\n  }\n  \n  h1 {\n    font-family: 'DAWBE';\n    font-size: 48px;\n    margin-bottom: 30px;\n    text-align: center;\n  }\n  \n  table {\n    width: 100%;\n    border-collapse: collapse;\n    background: white;\n    color: #1e1e1e;\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 20px;\n  }\n  \n  th, td {\n    padding: 12px 15px;\n    border: 1px solid #ddd;\n  }\n  \n  th {\n    background-color: #5aaad8;\n    color: white;\n    text-align: left;\n  }\n  \n  tbody tr:nth-child(even) {\n    background-color: #f3f3f3;\n  }\n  </style>\n  "],"mappings":"AA0BE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAEC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MACtCC,OAAO,EAAEF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;MACxCE,QAAQ,EAAEH,YAAY,CAACC,OAAO,CAAC,UAAU;IAC3C,CAAC;EACH,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,CAAC,IAAI,CAACN,MAAK,IAAK,CAAC,IAAI,CAACG,OAAM,IAAK,CAAC,IAAI,CAACC,QAAQ,EAAE;UACnD,MAAM,IAAII,KAAK,CAAC,oDAAoD,CAAC;QACvE;QACA;QACA,MAAMC,GAAE,GAAI,GAAG,IAAI,CAACN,OAAO,kBAAkB,IAAI,CAACC,QAAQ,EAAE;QAC5D,MAAMM,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAACF,GAAG,EAAE;UACpCG,OAAO,EAAE;YAAE,WAAW,EAAE,IAAI,CAACZ;UAAO;QACtC,CAAC,CAAC;QACF,IAAI,CAACD,MAAK,GAAIW,QAAQ,CAACZ,IAAI;QAC3Be,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACf,MAAM,CAAC;MACnD,EAAE,OAAOgB,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;IACF,CAAC;IACD;IACAC,cAAcA,CAACC,KAAK,EAAE;MACpB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QACpCC,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;IAClB,CAAC;IACD;IACAM,UAAUA,CAACC,SAAS,EAAE;MACpB,IAAI,CAACA,SAAS,EAAE,OAAO,UAAU;MACjC,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAQ,GAAI,IAAI,CAAC;MACvC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,CAAC;IACzC,CAAC;IACD;IACAC,aAAaA,CAACC,KAAK,EAAE;MACnBhB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEe,KAAK,CAACC,MAAM,CAAC;MACnDjB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEe,KAAK,CAACE,MAAM,CAAC;MACpClB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEe,KAAK,CAACG,MAAM,CAAC;MACpC,QAAQH,KAAK,CAACC,MAAM;QACpB,KAAK,GAAG;UACJ,OAAO,gBAAgB;QAC3B,KAAK,GAAG;UACJ,QAAQ;QAEZ,KAAK,GAAG;UACJ,OAAO,iBAAiB;QAC5B,KAAK,GAAG;UACJ,OAAO,WAAW;QACtB,KAAK,GAAG;UACJ,OAAO,WAAW;QACtB,KAAK,IAAI;UACL,OAAO,UAAU;QACrB;UACI,OAAO,gBAAgB;MAC3B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}