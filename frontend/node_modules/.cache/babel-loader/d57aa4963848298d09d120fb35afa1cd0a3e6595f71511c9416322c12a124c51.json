{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null,\n      products: [],\n      apiKey: localStorage.getItem(\"apiKey\"),\n      apiLink: localStorage.getItem(\"apiLink\")\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce((sum, product) => sum + product.priceTtc * product.quantity, 0);\n    },\n    async updateCart(product) {\n      if (!this.orderId) return console.error(\"Aucune commande brouillon.\");\n      if (product.quantity < 1) product.quantity = 1;\n      try {\n        const updateUrl = `${this.apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            DOLAPIKEY: this.apiKey\n          },\n          body: JSON.stringify({\n            qty: parseFloat(product.quantity)\n          })\n        });\n        if (!response.ok) {\n          const err = await response.json();\n          return console.error(\"Erreur API:\", err);\n        }\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n    },\n    async validateOrder() {\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n      try {\n        const updateStatusUrl = `${this.apiLink}/orders/${this.orderId}/validate`;\n        const response = await fetch(updateStatusUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            DOLAPIKEY: this.apiKey\n          },\n          body: JSON.stringify({\n            status: 5\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          console.error(\"Erreur lors de la validation de la commande\", error);\n          return;\n        }\n        alert(\"Commande validée et payée !\");\n        this.$router.push(\"/confirmation\");\n      } catch (error) {\n        console.error(\"Erreur lors de la validation de la commande:\", error);\n      }\n    },\n    async initCart() {\n      try {\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!clientId || !this.apiKey || !this.apiLink) throw new Error(\"Données manquantes (ClientId, API Key ou API Link)\");\n        const searchUrl = `${this.apiLink}/orders?sqlfilters=(fk_statut:=:0)and(fk_soc:=:${clientId})`;\n        const response = await fetch(searchUrl, {\n          headers: {\n            DOLAPIKEY: this.apiKey\n          }\n        });\n        if (!response.ok) throw new Error(\"Erreur réseau\");\n        const orders = await response.json();\n        if (orders.length > 0) {\n          this.orderId = orders[0].id;\n        } else {\n          this.orderId = await this.createDraftOrder(clientId);\n        }\n        await this.fetchCartFromDolibarr();\n      } catch (error) {\n        console.error(\"Erreur lors de l'initialisation du panier:\", error);\n      }\n    },\n    async createDraftOrder(clientId) {\n      const payload = {\n        socid: clientId,\n        date: new Date().toISOString().split(\"T\")[0],\n        status: 0,\n        lines: []\n      };\n      const response = await fetch(`${this.apiLink}/orders`, {\n        method: \"POST\",\n        headers: {\n          DOLAPIKEY: this.apiKey,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        const message = await response.text();\n        throw new Error(`Erreur création commande: ${message}`);\n      }\n      const newOrder = await response.json();\n      return newOrder.id;\n    },\n    async fetchProducts() {\n      try {\n        const url = `${this.apiLink}/products`;\n        const response = await fetch(url, {\n          headers: {\n            DOLAPIKEY: this.apiKey\n          }\n        });\n        this.products = await response.json();\n      } catch (error) {\n        console.error(\"Erreur produits:\", error);\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        await this.fetchProducts();\n        if (!this.orderId) return;\n        const url = `${this.apiLink}/orders/${this.orderId}/lines`;\n        const response = await fetch(url, {\n          headers: {\n            DOLAPIKEY: this.apiKey\n          }\n        });\n        const lines = await response.json();\n        const filteredLines = lines.filter(line => parseFloat(line.qty) > 0);\n        this.cartItems = this.mergeCartItems(filteredLines);\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur récupération panier:\", error);\n      }\n    },\n    mergeCartItems(lines) {\n      // Fusion des lignes du panier avec des produits identiques\n      const mergedItems = [];\n      lines.forEach(line => {\n        const productData = this.products.find(p => p.id === line.fk_product) || {};\n        const tvaRate = parseFloat(productData.tva_tx || 0) / 100;\n        const priceHt = parseFloat(line.subprice);\n        const priceTtc = +(priceHt * (1 + tvaRate)).toFixed(2);\n        const existingProduct = mergedItems.find(item => item.id === line.fk_product);\n        if (existingProduct) {\n          // Si le produit existe déjà, on ajoute la quantité\n          existingProduct.quantity += parseFloat(line.qty) || 1;\n        } else {\n          // Sinon, on l'ajoute comme un nouvel élément\n          mergedItems.push({\n            lineId: line.id,\n            id: line.fk_product,\n            name: productData.label || \"Produit inconnu\",\n            description: productData.description || \"\",\n            image: productData.photo || \"\",\n            priceHt,\n            priceTtc,\n            quantity: Math.max(1, parseFloat(line.qty) || 1)\n          });\n        }\n      });\n      return mergedItems;\n    },\n    async deleteCartItem(product) {\n      if (!this.orderId) return;\n      try {\n        const deleteUrl = `${this.apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(deleteUrl, {\n          method: \"DELETE\",\n          headers: {\n            DOLAPIKEY: this.apiKey\n          }\n        });\n        if (response.ok) {\n          this.cartItems = this.cartItems.filter(item => item.lineId !== product.lineId);\n          this.updateTotal();\n        } else {\n          console.error(\"Erreur suppression:\", await response.json());\n        }\n      } catch (error) {\n        console.error(\"Erreur deleteCartItem:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.initCart();\n  }\n};","map":{"version":3,"names":["name","data","cartItems","totalPrice","orderId","products","apiKey","localStorage","getItem","apiLink","methods","formatCurrency","value","Intl","NumberFormat","style","currency","format","updateTotal","reduce","sum","product","priceTtc","quantity","updateCart","console","error","updateUrl","lineId","response","fetch","method","headers","DOLAPIKEY","body","JSON","stringify","qty","parseFloat","ok","err","json","validateOrder","updateStatusUrl","status","alert","$router","push","initCart","clientId","Error","searchUrl","orders","length","id","createDraftOrder","fetchCartFromDolibarr","payload","socid","date","Date","toISOString","split","lines","message","text","newOrder","fetchProducts","url","filteredLines","filter","line","mergeCartItems","mergedItems","forEach","productData","find","p","fk_product","tvaRate","tva_tx","priceHt","subprice","toFixed","existingProduct","item","label","description","image","photo","Math","max","deleteCartItem","deleteUrl","mounted"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/CartPage.vue"],"sourcesContent":["<template>\n  <h2 class=\"section-title\">TON</h2>\n  <h2 class=\"section-title\">PANIER</h2>\n  <div class=\"cart-page\">\n    \n\n    <!-- Affichage des produits dans le panier, si le panier n'est pas vide -->\n    <div class=\"cart-items\" v-if=\"cartItems.length\">\n      <div v-for=\"(product, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n        <div class=\"cart-item-info\">\n          <img :src=\"product.image\" alt=\"Product Image\" class=\"cart-item-image\" />\n          <div class=\"cart-item-details\">\n            <h3 class=\"cart-item-name\">{{ product.name }}</h3>\n            <p class=\"cart-item-description\">{{ product.description }}</p>\n          </div>\n        </div>\n\n        <div class=\"cart-item-quantity\">\n          <span class=\"quantity-display\">{{ product.quantity }}</span>\n        </div>\n\n        <div class=\"cart-item-price\">\n          <span class=\"product-unit-price\">{{ formatCurrency(product.priceTtc) }} TTC</span>\n          <span class=\"product-total-price\">{{ formatCurrency(product.priceTtc * product.quantity) }}</span>\n        </div>\n\n        <button class=\"remove-button\" @click=\"deleteCartItem(product)\">\n          Supprimer\n        </button>\n      </div>\n    </div>\n\n    <!-- Message si le panier est vide -->\n    <p v-else class=\"empty-message\">Votre panier est vide.</p>\n\n    <!-- Résumé du panier et bouton de commande -->\n    <div class=\"cart-summary\" v-if=\"cartItems.length\">\n      <div class=\"total\">\n        <p>Total : <span>{{ formatCurrency(totalPrice) }}</span></p>\n      </div>\n      <button class=\"checkout-button\" @click=\"validateOrder\">\n        Valider la commande\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null,\n      products: [],\n      apiKey: localStorage.getItem(\"apiKey\"),\n      apiLink: localStorage.getItem(\"apiLink\"),\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce(\n        (sum, product) => sum + product.priceTtc * product.quantity,\n        0\n      );\n    },\n    async updateCart(product) {\n      if (!this.orderId) return console.error(\"Aucune commande brouillon.\");\n\n      if (product.quantity < 1) product.quantity = 1;\n\n      try {\n        const updateUrl = `${this.apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            DOLAPIKEY: this.apiKey,\n          },\n          body: JSON.stringify({ qty: parseFloat(product.quantity) }),\n        });\n\n        if (!response.ok) {\n          const err = await response.json();\n          return console.error(\"Erreur API:\", err);\n        }\n\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n    },\n    async validateOrder() {\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n\n      try {\n        const updateStatusUrl = `${this.apiLink}/orders/${this.orderId}/validate`;\n        const response = await fetch(updateStatusUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            DOLAPIKEY: this.apiKey,\n          },\n          body: JSON.stringify({ status: 5 }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          console.error(\"Erreur lors de la validation de la commande\", error);\n          return;\n        }\n\n        alert(\"Commande validée et payée !\");\n        this.$router.push(\"/confirmation\");\n      } catch (error) {\n        console.error(\"Erreur lors de la validation de la commande:\", error);\n      }\n    },\n    async initCart() {\n      try {\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!clientId || !this.apiKey || !this.apiLink)\n          throw new Error(\"Données manquantes (ClientId, API Key ou API Link)\");\n\n        const searchUrl = `${this.apiLink}/orders?sqlfilters=(fk_statut:=:0)and(fk_soc:=:${clientId})`;\n        const response = await fetch(searchUrl, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (!response.ok) throw new Error(\"Erreur réseau\");\n\n        const orders = await response.json();\n\n        if (orders.length > 0) {\n          this.orderId = orders[0].id;\n        } else {\n          this.orderId = await this.createDraftOrder(clientId);\n        }\n\n        await this.fetchCartFromDolibarr();\n      } catch (error) {\n        console.error(\"Erreur lors de l'initialisation du panier:\", error);\n      }\n    },\n    async createDraftOrder(clientId) {\n      const payload = {\n        socid: clientId,\n        date: new Date().toISOString().split(\"T\")[0],\n        status: 0,\n        lines: [],\n      };\n\n      const response = await fetch(`${this.apiLink}/orders`, {\n        method: \"POST\",\n        headers: {\n          DOLAPIKEY: this.apiKey,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const message = await response.text();\n        throw new Error(`Erreur création commande: ${message}`);\n      }\n\n      const newOrder = await response.json();\n      return newOrder.id;\n    },\n    async fetchProducts() {\n      try {\n        const url = `${this.apiLink}/products`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        this.products = await response.json();\n      } catch (error) {\n        console.error(\"Erreur produits:\", error);\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        await this.fetchProducts();\n\n        if (!this.orderId) return;\n\n        const url = `${this.apiLink}/orders/${this.orderId}/lines`;\n        const response = await fetch(url, {\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        const lines = await response.json();\n        const filteredLines = lines.filter((line) => parseFloat(line.qty) > 0);\n        this.cartItems = this.mergeCartItems(filteredLines);\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur récupération panier:\", error);\n      }\n    },\n    mergeCartItems(lines) {\n  // Fusion des lignes du panier avec des produits identiques\n    const mergedItems = [];\n\n    lines.forEach((line) => {\n      const productData = this.products.find((p) => p.id === line.fk_product) || {};\n      const tvaRate = parseFloat(productData.tva_tx || 0) / 100;\n      const priceHt = parseFloat(line.subprice);\n      const priceTtc = +(priceHt * (1 + tvaRate)).toFixed(2);\n\n      const existingProduct = mergedItems.find(item => item.id === line.fk_product);\n      \n      if (existingProduct) {\n        // Si le produit existe déjà, on ajoute la quantité\n        existingProduct.quantity += parseFloat(line.qty) || 1;\n      } else {\n        // Sinon, on l'ajoute comme un nouvel élément\n        mergedItems.push({\n          lineId: line.id,\n          id: line.fk_product,\n          name: productData.label || \"Produit inconnu\",\n          description: productData.description || \"\",\n          image: productData.photo || \"\",\n          priceHt,\n          priceTtc,\n          quantity: Math.max(1, parseFloat(line.qty) || 1),\n        });\n      }\n    });\n\n    return mergedItems;\n  },\n    async deleteCartItem(product) {\n      if (!this.orderId) return;\n\n      try {\n        const deleteUrl = `${this.apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(deleteUrl, {\n          method: \"DELETE\",\n          headers: { DOLAPIKEY: this.apiKey },\n        });\n\n        if (response.ok) {\n          this.cartItems = this.cartItems.filter((item) => item.lineId !== product.lineId);\n          this.updateTotal();\n        } else {\n          console.error(\"Erreur suppression:\", await response.json());\n        }\n      } catch (error) {\n        console.error(\"Erreur deleteCartItem:\", error);\n      }\n    },\n  },\n  mounted() {\n    this.initCart();\n  },\n};\n</script>\n\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n  margin-left:115px;\n}\n\n@font-face {\n  font-family: 'PP Formula';\n  src: url('@/assets/fonts/PPFormula-NarrowRegular.otf') format('opentype');\n  font-weight: medium;\n}\n\n@font-face {\n  font-family: 'DAWBE';\n  src: url('@/assets/fonts/dawbe.otf') format('opentype');\n  font-weight: bold;\n}\n\n/* Conteneur de la page du panier */\n.cart-page {\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Titre */\nh1 {\n  font-size: 32px;\n  color: #0e100e;\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n/* Liste des produits dans le panier */\n.cart-items {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* Chaque produit du panier */\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #f7f7f7;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n/* Détails du produit */\n.cart-item-info {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n/* Image du produit */\n.cart-item-image {\n  width: 80px;\n  height: auto;\n  border-radius: 5px;\n}\n\n/* Nom et description du produit */\n.cart-item-details {\n  max-width: 400px;\n}\n\n/* Quantité */\n.cart-item-quantity input {\n  width: 50px;\n  padding: 5px;\n  font-size: 16px;\n  text-align: center;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n/* Prix unitaire et prix total */\n.cart-item-price {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.product-unit-price,\n.product-total-price {\n  font-size: 18px;\n  color: #0e100e;\n}\n\n.product-total-price {\n  font-weight: bold;\n  margin-top: 10px;\n}\n\n/* Résumé du panier et bouton de commande */\n.cart-summary {\n  margin-top: 30px;\n  text-align: right;\n}\n\n.total {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.checkout-button {\n  padding: 10px 30px;\n  background-color: #5aaad8;\n  color: white;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.checkout-button:hover {\n  background-color: #0e100e;\n}\n\n/* Message quand le panier est vide */\n.empty-message {\n  text-align: center;\n  font-size: 20px;\n  color: #888;\n  margin-top: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}