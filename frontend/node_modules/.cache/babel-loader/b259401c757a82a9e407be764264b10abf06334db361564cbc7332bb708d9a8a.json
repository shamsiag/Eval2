{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink')\n    };\n  },\n  mounted() {\n    this.fetchSalesData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchSalesData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${this.apiLink}/orders?status=5`;\n        console.log(\"URL de récupération des commandes payées:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes payées récupérées:\", orders);\n        const sales = [];\n        orders.forEach(order => {\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n              const productName = line.product_label || line.label || \"Produit inconnu\";\n              const productReference = line.product_ref || \"Référence inconnue\";\n              const productCategory = line.category || \"Catégorie inconnue\";\n              const quantity = parseFloat(line.qty) || 0;\n              const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n              const status = order.status_label || \"Statut inconnu\";\n              const clientName = order.client_name || \"Client inconnu\";\n              sales.push({\n                date: saleDate,\n                client: clientName,\n                product: productName,\n                reference: productReference,\n                category: productCategory,\n                quantity: quantity,\n                total: lineTotal,\n                status: status\n              });\n            });\n          }\n        });\n        this.salesData = sales;\n        console.log(\"Données des ventes:\", this.salesData);\n        this.renderChart();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des ventes:\", error);\n      }\n    },\n    renderChart() {\n      const aggregatedByProduct = {};\n      const aggregatedByCategory = {};\n      this.salesData.forEach(sale => {\n        // Agréger par produit\n        aggregatedByProduct[sale.product] = (aggregatedByProduct[sale.product] || 0) + parseFloat(sale.total);\n        // Agréger par catégorie\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n      const productLabels = Object.keys(aggregatedByProduct);\n      const productData = productLabels.map(label => aggregatedByProduct[label]);\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n      const ctx = document.getElementById('salesChart');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: productLabels.concat(categoryLabels),\n          datasets: [{\n            label: 'Ventes par produit (€)',\n            data: productData.concat(categoryData),\n            backgroundColor: '#5AAAD8',\n            borderRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true\n            }\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","salesData","apiKey","localStorage","getItem","apiLink","mounted","fetchSalesData","methods","formatDate","timestamp","date","Date","toLocaleDateString","formatCurrency","value","Intl","NumberFormat","style","currency","format","Error","url","console","log","response","fetch","headers","ok","statusText","orders","json","sales","forEach","order","lines","Array","isArray","line","saleDate","date_creation","productName","product_label","label","productReference","product_ref","productCategory","category","quantity","parseFloat","qty","lineTotal","subprice","toFixed","status","status_label","clientName","client_name","push","client","product","reference","total","renderChart","error","aggregatedByProduct","aggregatedByCategory","sale","productLabels","Object","keys","productData","map","categoryLabels","categoryData","ctx","document","getElementById","type","labels","concat","datasets","backgroundColor","borderRadius","options","responsive","plugins","legend","display"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>Tableau de bord</h1>\n\n    <div class=\"dashboard-content\">\n      <div class=\"chart-container\">\n        <canvas id=\"salesChart\"></canvas>\n      </div>\n\n      <div class=\"sales-details\">\n        <h2>Détails des ventes</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Client</th>\n              <th>Produit</th>\n              <th>Référence</th>\n              <th>Catégorie</th>\n              <th>Quantité</th>\n              <th>Total</th>\n              <th>Statut</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(sale, index) in salesData\" :key=\"index\">\n              <td>{{ sale.date }}</td>\n              <td>{{ sale.client }}</td>\n              <td>{{ sale.product }}</td>\n              <td>{{ sale.reference }}</td>\n              <td>{{ sale.category }}</td>\n              <td>{{ sale.quantity }}</td>\n              <td>{{ sale.total }}€</td>\n              <td>{{ sale.status }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n    };\n  },\n  mounted() {\n    this.fetchSalesData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    async fetchSalesData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${this.apiLink}/orders?status=5`;\n        console.log(\"URL de récupération des commandes payées:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes payées récupérées:\", orders);\n\n        const sales = [];\n        orders.forEach(order => {\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n              const productName = line.product_label || line.label || \"Produit inconnu\";\n              const productReference = line.product_ref || \"Référence inconnue\";\n              const productCategory = line.category || \"Catégorie inconnue\";\n              const quantity = parseFloat(line.qty) || 0;\n              const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n              const status = order.status_label || \"Statut inconnu\";\n              const clientName = order.client_name || \"Client inconnu\";\n              \n              sales.push({\n                date: saleDate,\n                client: clientName,\n                product: productName,\n                reference: productReference,\n                category: productCategory,\n                quantity: quantity,\n                total: lineTotal,\n                status: status,\n              });\n            });\n          }\n        });\n\n        this.salesData = sales;\n        console.log(\"Données des ventes:\", this.salesData);\n        this.renderChart();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des ventes:\", error);\n      }\n    },\n    renderChart() {\n      const aggregatedByProduct = {};\n      const aggregatedByCategory = {};\n\n      this.salesData.forEach(sale => {\n        // Agréger par produit\n        aggregatedByProduct[sale.product] = (aggregatedByProduct[sale.product] || 0) + parseFloat(sale.total);\n        // Agréger par catégorie\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const productLabels = Object.keys(aggregatedByProduct);\n      const productData = productLabels.map(label => aggregatedByProduct[label]);\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('salesChart');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: productLabels.concat(categoryLabels),\n          datasets: [\n            {\n              label: 'Ventes par produit (€)',\n              data: productData.concat(categoryData),\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n            },\n          },\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n}\n\nh1 {\n  font-family: 'DAWBE';\n  font-size: 48px;\n  margin-bottom: 30px;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 600px;\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 800px;\n  color: #1e1e1e;\n  display: flex;\n}\n\n.sales-details h2 {\n  margin-bottom: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.95em;\n  display: inline;\n}\n\nth, td {\n  padding: 10px;\n  text-align: left;\n  border-bottom: 1px solid #ccc;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}