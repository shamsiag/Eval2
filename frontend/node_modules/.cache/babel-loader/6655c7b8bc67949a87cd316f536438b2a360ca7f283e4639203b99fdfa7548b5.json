{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport NavBar from \"@/components/NavBar.vue\";\nimport SalesSummary from \"@/components/SalesSummary.vue\";\nimport ProductSalesList from \"@/components/ProductSalesList.vue\";\nexport default {\n  name: \"SalesDashboard\",\n  components: {\n    NavBar,\n    SalesSummary,\n    ProductSalesList\n  },\n  data() {\n    return {\n      summary: {\n        total_sales: 0,\n        product_sales: []\n      },\n      authToken: localStorage.getItem('authToken'),\n      apiLink: localStorage.getItem('apiLink') || 'http://localhost:8080/api/v1'\n    };\n  },\n  methods: {\n    async fetchSales() {\n      try {\n        const url = `${this.apiLink}/models/C_Order?$filter=DocStatus eq 'IP' AND IsSOTrx eq true&$select=C_Order_ID,DocumentNo,DateOrdered&$expand=C_OrderLine($select=M_Product_ID,QtyOrdered,LineNetAmt;$expand=M_Product_ID($select=Name))`;\n        const headers = this.authToken ? {\n          'Authorization': `Bearer ${this.authToken}`\n        } : {};\n        const response = await fetch(url, {\n          headers\n        });\n        if (!response.ok) throw new Error(`Erreur réseau: ${response.statusText}`);\n        const data = await response.json();\n        // Flatten all order lines\n        const lines = data.records.flatMap(order => order.C_OrderLine.map(line => ({\n          productId: line.M_Product_ID.id,\n          name: line.M_Product_ID.Name,\n          amount: parseFloat(line.LineNetAmt),\n          qty: parseFloat(line.QtyOrdered)\n        })));\n\n        // Total sales amount\n        const totalSales = lines.reduce((sum, l) => sum + l.amount, 0);\n\n        // Group by product\n        const map = {};\n        lines.forEach(l => {\n          if (!map[l.productId]) {\n            map[l.productId] = {\n              productId: l.productId,\n              name: l.name,\n              total_sales: 0,\n              total_qty: 0\n            };\n          }\n          map[l.productId].total_sales += l.amount;\n          map[l.productId].total_qty += l.qty;\n        });\n        const productSales = Object.values(map);\n        this.summary.total_sales = totalSales;\n        this.summary.product_sales = productSales;\n      } catch (error) {\n        console.error(\"Erreur de chargement des ventes :\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchSales();\n  }\n};","map":{"version":3,"names":["NavBar","SalesSummary","ProductSalesList","name","components","data","summary","total_sales","product_sales","authToken","localStorage","getItem","apiLink","methods","fetchSales","url","headers","response","fetch","ok","Error","statusText","json","lines","records","flatMap","order","C_OrderLine","map","line","productId","M_Product_ID","id","Name","amount","parseFloat","LineNetAmt","qty","QtyOrdered","totalSales","reduce","sum","l","forEach","total_qty","productSales","Object","values","error","console","mounted"],"sources":["/Users/macbookpro/Sham/S6/Eval2-1/frontend/src/views/SalesDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"sales-dashboard\">\n    <NavBar />\n    <h1 class=\"title\">Tableau de bord des ventes</h1>\n\n    <SalesSummary :total-sales=\"summary.total_sales\" />\n\n    <ProductSalesList :products=\"summary.product_sales\" />\n  </div>\n</template>\n\n<script>\nimport NavBar from \"@/components/NavBar.vue\";\nimport SalesSummary from \"@/components/SalesSummary.vue\";\nimport ProductSalesList from \"@/components/ProductSalesList.vue\";\n\nexport default {\n  name: \"SalesDashboard\",\n  components: {\n    NavBar,\n    SalesSummary,\n    ProductSalesList,\n  },\n  data() {\n    return {\n      summary: {\n        total_sales: 0,\n        product_sales: [],\n      },\n      authToken: localStorage.getItem('authToken'),\n      apiLink: localStorage.getItem('apiLink') || 'http://localhost:8080/api/v1'\n    };\n  },\n  methods: {\n    async fetchSales() {\n      try {\n        const url = `${this.apiLink}/models/C_Order?$filter=DocStatus eq 'IP' AND IsSOTrx eq true&$select=C_Order_ID,DocumentNo,DateOrdered&$expand=C_OrderLine($select=M_Product_ID,QtyOrdered,LineNetAmt;$expand=M_Product_ID($select=Name))`;\n        const headers = this.authToken\n          ? { 'Authorization': `Bearer ${this.authToken}` }\n          : {};\n        const response = await fetch(url, { headers });\n        if (!response.ok) throw new Error(`Erreur réseau: ${response.statusText}`);\n\n        const data = await response.json();\n        // Flatten all order lines\n        const lines = data.records.flatMap(order =>\n          order.C_OrderLine.map(line => ({\n            productId: line.M_Product_ID.id,\n            name: line.M_Product_ID.Name,\n            amount: parseFloat(line.LineNetAmt),\n            qty: parseFloat(line.QtyOrdered)\n          }))\n        );\n\n        // Total sales amount\n        const totalSales = lines.reduce((sum, l) => sum + l.amount, 0);\n\n        // Group by product\n        const map = {};\n        lines.forEach(l => {\n          if (!map[l.productId]) {\n            map[l.productId] = { productId: l.productId, name: l.name, total_sales: 0, total_qty: 0 };\n          }\n          map[l.productId].total_sales += l.amount;\n          map[l.productId].total_qty += l.qty;\n        });\n        const productSales = Object.values(map);\n\n        this.summary.total_sales = totalSales;\n        this.summary.product_sales = productSales;\n      } catch (error) {\n        console.error(\"Erreur de chargement des ventes :\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchSales();\n  }\n};\n</script>\n\n<style scoped>\n.sales-dashboard {\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 20px;\n}\n.title {\n  font-size: 2rem;\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}