{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-content\"\n};\nconst _hoisted_3 = {\n  class: \"sales-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Tableau de bord\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    class: \"chart-container\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"salesChart\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Détails des ventes\", -1 /* HOISTED */)), _createElementVNode(\"table\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Date\"), _createElementVNode(\"th\", null, \"Client\"), _createElementVNode(\"th\", null, \"Produit\"), _createElementVNode(\"th\", null, \"Référence\"), _createElementVNode(\"th\", null, \"Catégorie\"), _createElementVNode(\"th\", null, \"Quantité\"), _createElementVNode(\"th\", null, \"Total\"), _createElementVNode(\"th\", null, \"Statut\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.salesData, (sale, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(sale.date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.client), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.product), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.reference), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.quantity), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.total) + \"€\", 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(sale.status), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","id","_hoisted_3","_Fragment","_renderList","$data","salesData","sale","index","key","_toDisplayString","date","client","product","reference","category","quantity","total","status"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>Tableau de bord</h1>\n\n    <div class=\"dashboard-content\">\n      <div class=\"chart-container\">\n        <canvas id=\"salesChart\"></canvas>\n      </div>\n\n      <div class=\"sales-details\">\n        <h2>Détails des ventes</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Client</th>\n              <th>Produit</th>\n              <th>Référence</th>\n              <th>Catégorie</th>\n              <th>Quantité</th>\n              <th>Total</th>\n              <th>Statut</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(sale, index) in salesData\" :key=\"index\">\n              <td>{{ sale.date }}</td>\n              <td>{{ sale.client }}</td>\n              <td>{{ sale.product }}</td>\n              <td>{{ sale.reference }}</td>\n              <td>{{ sale.category }}</td>\n              <td>{{ sale.quantity }}</td>\n              <td>{{ sale.total }}€</td>\n              <td>{{ sale.status }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n    };\n  },\n  mounted() {\n    this.fetchSalesData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    async fetchSalesData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${this.apiLink}/orders?status=5`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes payées récupérées:\", orders);\n\n        const sales = [];\n        orders.forEach(order => {\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n              const productName = line.product_label || line.label || \"Produit inconnu\";\n              const productReference = line.product_ref || \"Référence inconnue\";\n              const productCategory = line.category || \"Catégorie inconnue\";\n              const quantity = parseFloat(line.qty) || 0;\n              const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n              const status = order.status_label || \"Statut inconnu\";\n              const clientName = order.client_name || \"Client inconnu\";\n              \n              sales.push({\n                date: saleDate,\n                client: clientName,\n                product: productName,\n                reference: productReference,\n                category: productCategory,\n                quantity: quantity,\n                total: lineTotal,\n                status: status,\n              });\n            });\n          }\n        });\n\n        this.salesData = sales;\n        console.log(\"Données des ventes:\", this.salesData);\n        this.renderChart();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des ventes:\", error);\n      }\n    },\n    renderChart() {\n      const aggregatedByProduct = {};\n      const aggregatedByCategory = {};\n\n      this.salesData.forEach(sale => {\n        // Agréger par produit\n        aggregatedByProduct[sale.product] = (aggregatedByProduct[sale.product] || 0) + parseFloat(sale.total);\n        // Agréger par catégorie\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const productLabels = Object.keys(aggregatedByProduct);\n      const productData = productLabels.map(label => aggregatedByProduct[label]);\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('salesChart');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: productLabels.concat(categoryLabels),\n          datasets: [\n            {\n              label: 'Ventes par produit (€)',\n              data: productData.concat(categoryData),\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n            },\n          },\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n}\n\nh1 {\n  font-family: 'DAWBE';\n  font-size: 48px;\n  margin-bottom: 30px;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 800px;\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 800px;\n  margin: auto;\n  color: #1e1e1e;\n}\n\n.sales-details h2 {\n  margin-bottom: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.95em;\n}\n\nth, td {\n  padding: 10px;\n  text-align: left;\n  border-bottom: 1px solid #ccc;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAGfA,KAAK,EAAC;AAAmB;;EAKvBA,KAAK,EAAC;AAAe;;uBAR9BC,mBAAA,CAsCM,OAtCNC,UAsCM,G,0BArCJC,mBAAA,CAAwB,YAApB,iBAAe,sBAEnBA,mBAAA,CAkCM,OAlCNC,UAkCM,G,0BAjCJD,mBAAA,CAEM;IAFDH,KAAK,EAAC;EAAiB,IAC1BG,mBAAA,CAAiC;IAAzBE,EAAE,EAAC;EAAY,G,sBAGzBF,mBAAA,CA4BM,OA5BNG,UA4BM,G,0BA3BJH,mBAAA,CAA2B,YAAvB,oBAAkB,sBACtBA,mBAAA,CAyBQ,gB,0BAxBNA,mBAAA,CAWQ,gBAVNA,mBAAA,CASK,aARHA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAe,YAAX,QAAM,GACVA,mBAAA,CAAgB,YAAZ,SAAO,GACXA,mBAAA,CAAkB,YAAd,WAAS,GACbA,mBAAA,CAAkB,YAAd,WAAS,GACbA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAc,YAAV,OAAK,GACTA,mBAAA,CAAe,YAAX,QAAM,E,wBAGdA,mBAAA,CAWQ,iB,kBAVNF,mBAAA,CASKM,SAAA,QAlCjBC,WAAA,CAyBwCC,KAAA,CAAAC,SAAS,EAzBjD,CAyBwBC,IAAI,EAAEC,KAAK;yBAAvBX,mBAAA,CASK;MATmCY,GAAG,EAAED;IAAK,IAChDT,mBAAA,CAAwB,YAAAW,gBAAA,CAAjBH,IAAI,CAACI,IAAI,kBAChBZ,mBAAA,CAA0B,YAAAW,gBAAA,CAAnBH,IAAI,CAACK,MAAM,kBAClBb,mBAAA,CAA2B,YAAAW,gBAAA,CAApBH,IAAI,CAACM,OAAO,kBACnBd,mBAAA,CAA6B,YAAAW,gBAAA,CAAtBH,IAAI,CAACO,SAAS,kBACrBf,mBAAA,CAA4B,YAAAW,gBAAA,CAArBH,IAAI,CAACQ,QAAQ,kBACpBhB,mBAAA,CAA4B,YAAAW,gBAAA,CAArBH,IAAI,CAACS,QAAQ,kBACpBjB,mBAAA,CAA0B,YAAAW,gBAAA,CAAnBH,IAAI,CAACU,KAAK,IAAG,GAAC,iBACrBlB,mBAAA,CAA0B,YAAAW,gBAAA,CAAnBH,IAAI,CAACW,MAAM,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}