{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport NavBar from '@/components/NavBar.vue';\nexport default {\n  name: 'ShopPage',\n  components: {\n    NavBar\n  },\n  data() {\n    return {\n      products: [] // On commence avec un tableau vide\n    };\n  },\n  created() {\n    this.fetchProductsFromDolibarr(); // Récupérer les produits au moment de la création du composant\n  },\n  methods: {\n    async fetchProductsFromDolibarr() {\n      try {\n        const apiKey = localStorage.getItem('apiKey');\n        const apiLink = localStorage.getItem('apiLink');\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${apiLink}/products`; // URL de l'API Dolibarr pour récupérer les produits\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const products = await response.json();\n        console.log(\"Produits récupérés de Dolibarr:\", products);\n        this.products = products.map(product => {\n          return {\n            id: product.id,\n            name: product.label,\n            description: product.description || 'Aucune description disponible.',\n            image: product.fk_photo ? `${apiLink}/product/photos/${product.fk_photo}` : null,\n            // Vérification de l'image\n            price: product.price_ht // Prix hors taxe ou autre champ approprié\n          };\n        });\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des produits depuis Dolibarr:\", error);\n      }\n    },\n    async addToCart(product) {\n      // Vérification de la connexion\n      const isLoggedIn = localStorage.getItem('authToken'); // Vérifier un token ou état d'authentification\n\n      if (!isLoggedIn) {\n        alert('Vous devez être connecté pour ajouter des produits au panier.');\n        this.$router.push({\n          name: 'login'\n        });\n        return;\n      }\n\n      // Mise à jour du panier en localStorage\n      let cart = JSON.parse(localStorage.getItem('cart')) || [];\n      const existingProductIndex = cart.findIndex(item => item.name === product.name);\n      if (existingProductIndex !== -1) {\n        cart[existingProductIndex].quantity += 1;\n      } else {\n        product.quantity = 1;\n        cart.push(product);\n      }\n      localStorage.setItem('cart', JSON.stringify(cart));\n\n      // Récupérer ou créer la commande brouillon côté Dolibarr\n      const orderId = await this.getOrCreateDraftOrder();\n      if (!orderId) {\n        alert('Erreur lors de la récupération ou de la création du panier Dolibarr.');\n        return;\n      }\n\n      // Ajouter le produit à la commande côté Dolibarr\n      await this.addProductToDolibarrCart(product, orderId);\n      alert(`Produit ajouté au panier : ${product.name}`);\n    },\n    // Méthodes pour gérer le panier et la commande dans Dolibarr\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem('apiKey');\n        const apiLink = localStorage.getItem('apiLink');\n        const clientId = localStorage.getItem('clientId');\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n\n        // Recherche d'une commande brouillon existante pour ce client\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: {\n            \"DOLAPIKEY\": apiKey\n          }\n        });\n        const existingOrders = await searchRes.json();\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          return existingOrders[0].id;\n        }\n\n        // Créer une nouvelle commande brouillon\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            \"DOLAPIKEY\": apiKey\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0 // Brouillon\n          })\n        });\n        const newOrder = await createRes.json();\n        return newOrder.id || null;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération ou création de la commande:\", error);\n        return null;\n      }\n    },\n    async addProductToDolibarrCart(product, orderId) {\n      try {\n        const apiKey = localStorage.getItem('apiKey');\n        const apiLink = localStorage.getItem('apiLink');\n        if (!apiLink || !apiKey) {\n          throw new Error('API Key ou API Link manquant');\n        }\n        const orderLine = {\n          fk_product: product.id,\n          qty: product.quantity,\n          subprice: product.price\n        };\n        const response = await fetch(`${apiLink}/orders/${orderId}/lines`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'DOLAPIKEY': apiKey\n          },\n          body: JSON.stringify(orderLine)\n        });\n        if (response.ok) {\n          console.log('Produit ajouté à la commande Dolibarr');\n        } else {\n          const errorData = await response.json();\n          console.error('Erreur lors de l\\'ajout du produit à Dolibarr', errorData);\n        }\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du produit à Dolibarr:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["NavBar","name","components","data","products","created","fetchProductsFromDolibarr","methods","apiKey","localStorage","getItem","apiLink","Error","url","response","fetch","headers","json","console","log","map","product","id","label","description","image","fk_photo","price","price_ht","error","addToCart","isLoggedIn","alert","$router","push","cart","JSON","parse","existingProductIndex","findIndex","item","quantity","setItem","stringify","orderId","getOrCreateDraftOrder","addProductToDolibarrCart","clientId","searchUrl","searchRes","existingOrders","Array","isArray","length","createUrl","today","Date","toISOString","split","createRes","method","body","socid","date","status","newOrder","orderLine","fk_product","qty","subprice","ok","errorData"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/ShopPage.vue"],"sourcesContent":["<template>\n  <NavBar />\n  <section class=\"shop-section\">\n    <h2 class=\"section-title\">NOS</h2>\n    <h2 class=\"section-title\">PRODUITS</h2>\n\n    <div class=\"cards-container\">\n      <div \n        v-for=\"(product, index) in products\" \n        :key=\"index\" \n        class=\"product-card\"\n      >\n        <img :src=\"product.image || require('@/assets/item/default-product.png')\" :alt=\"product.name\" class=\"product-image\" />\n        <h3 class=\"product-name\">{{ product.name }}</h3>\n        <p class=\"product-description\">{{ product.description }}</p>\n        <button class=\"product-button\" @click=\"addToCart(product)\">Ajouter au panier</button>\n      </div>\n    </div>\n  </section>\n</template>\n\n<script>\nimport NavBar from '@/components/NavBar.vue';\n\nexport default {\n  name: 'ShopPage',\n  components: {\n    NavBar\n  },\n  data() {\n    return {\n      products: [] // On commence avec un tableau vide\n    };\n  },\n  created() {\n    this.fetchProductsFromDolibarr(); // Récupérer les produits au moment de la création du composant\n  },\n  methods: {\n    async fetchProductsFromDolibarr() {\n      try {\n        const apiKey = localStorage.getItem('apiKey');\n        const apiLink = localStorage.getItem('apiLink');\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n\n        const url = `${apiLink}/products`; // URL de l'API Dolibarr pour récupérer les produits\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey,\n          },\n        });\n\n        const products = await response.json();\n        console.log(\"Produits récupérés de Dolibarr:\", products);\n\n        this.products = products.map(product => {\n          return {\n            id: product.id,\n            name: product.label,\n            description: product.description || 'Aucune description disponible.',\n            image: product.fk_photo ? `${apiLink}/product/photos/${product.fk_photo}` : null, // Vérification de l'image\n            price: product.price_ht, // Prix hors taxe ou autre champ approprié\n          };\n        });\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des produits depuis Dolibarr:\", error);\n      }\n    },\n\n    async addToCart(product) {\n      // Vérification de la connexion\n      const isLoggedIn = localStorage.getItem('authToken'); // Vérifier un token ou état d'authentification\n\n      if (!isLoggedIn) {\n        alert('Vous devez être connecté pour ajouter des produits au panier.');\n        this.$router.push({ name: 'login' });\n        return;\n      }\n\n      // Mise à jour du panier en localStorage\n      let cart = JSON.parse(localStorage.getItem('cart')) || [];\n      const existingProductIndex = cart.findIndex(item => item.name === product.name);\n      if (existingProductIndex !== -1) {\n        cart[existingProductIndex].quantity += 1;\n      } else {\n        product.quantity = 1;\n        cart.push(product);\n      }\n      localStorage.setItem('cart', JSON.stringify(cart));\n\n      // Récupérer ou créer la commande brouillon côté Dolibarr\n      const orderId = await this.getOrCreateDraftOrder();\n      if (!orderId) {\n        alert('Erreur lors de la récupération ou de la création du panier Dolibarr.');\n        return;\n      }\n\n      // Ajouter le produit à la commande côté Dolibarr\n      await this.addProductToDolibarrCart(product, orderId);\n\n      alert(`Produit ajouté au panier : ${product.name}`);\n    },\n\n    // Méthodes pour gérer le panier et la commande dans Dolibarr\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem('apiKey');\n        const apiLink = localStorage.getItem('apiLink');\n        const clientId = localStorage.getItem('clientId');\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n\n        // Recherche d'une commande brouillon existante pour ce client\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: { \"DOLAPIKEY\": apiKey }\n        });\n        const existingOrders = await searchRes.json();\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          return existingOrders[0].id;\n        }\n\n        // Créer une nouvelle commande brouillon\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0 // Brouillon\n          })\n        });\n        const newOrder = await createRes.json();\n        return newOrder.id || null;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération ou création de la commande:\", error);\n        return null;\n      }\n    },\n\n    async addProductToDolibarrCart(product, orderId) {\n      try {\n        const apiKey = localStorage.getItem('apiKey');\n        const apiLink = localStorage.getItem('apiLink');\n        if (!apiLink || !apiKey) {\n          throw new Error('API Key ou API Link manquant');\n        }\n\n        const orderLine = {\n          fk_product: product.id,\n          qty: product.quantity,\n          subprice: product.price\n        };\n\n        const response = await fetch(`${apiLink}/orders/${orderId}/lines`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'DOLAPIKEY': apiKey,\n          },\n          body: JSON.stringify(orderLine),\n        });\n\n        if (response.ok) {\n          console.log('Produit ajouté à la commande Dolibarr');\n        } else {\n          const errorData = await response.json();\n          console.error('Erreur lors de l\\'ajout du produit à Dolibarr', errorData);\n        }\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du produit à Dolibarr:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Optionnel : modifications spécifiques à la page Shop */\n.shop-section {\n  text-align: left;\n  padding: 40px 20px;\n}\n\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  margin-left: 115px;\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\n@font-face {\n  font-family: 'PP Formula';\n  src: url('@/assets/fonts/PPFormula-NarrowRegular.otf') format('opentype');\n  font-weight: medium;\n}\n\n@font-face {\n  font-family: 'DAWBE';\n  src: url('@/assets/fonts/dawbe.otf') format('opentype');\n  font-weight: bold;\n}\n\n/* Section globale */\n.products-section {\n  text-align: left;\n  padding: 40px 20px;\n}\n\n/* Titre */\n.section-title {\n  font-size: 56px;\n  margin-left: 115px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\n/* Conteneur des cartes */\n.cards-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* 3 produits par ligne */\n  gap: 50px;\n  max-width: 75%; /* Ajuste à la largeur du parent */\n  overflow-x: hidden; /* Empêche le scroll horizontal */\n  overflow-y: auto; /* Défilement vertical */\n  padding-bottom: 10px;\n  margin-left: 25%;\n  height: 100vh; /* Ajuste la hauteur pour voir le scroll vertical */\n}\n\n/* Style des cartes */\n.product-card {\n  background-color: white;\n  padding: 15px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease, color 0.3s ease;\n  text-align: left;\n  width: 100%;\n  height: 499px;\n  flex-shrink: 0; \n  flex-grow: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.product-card:hover {\n  transform: scale(1.05);\n  color: #5AAAD8;\n}\n\n/* Image */\n.product-image {\n  width: 221px;\n  height: auto;\n  border-radius: 8px;\n  margin-left: 100px;\n}\n\n/* Nom du produit */\n.product-name {\n  font-size: 1.5em;\n  margin: 10px 0;\n  font-family: 'DAWBE';\n  color: #1E1E1E;\n  max-width: 250px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: normal;\n  margin-bottom: 0;\n}\n\n/* Description */\n.product-description {\n  margin-top: 0;\n  font-size: 1em;\n  color: #1E1E1E;\n  font-family: 'PP Formula', sans-serif;\n  margin-bottom: 10px;\n  max-width: 250px;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: normal;\n}\n\n/* Bouton */\n.product-button {\n  padding: 10px 15px;\n  border: none;\n  background-color: #0E100E;\n  color: white;\n  cursor: pointer;\n  border-radius: 5px;\n  transition: background-color 0.3s;\n  font-family: 'PP Formula', sans-serif;\n  margin-top: auto;\n  align-self: flex-end;\n}\n\n.product-card:hover .product-name,\n.product-card:hover .product-description {\n  color: #5AAAD8;\n}\n\n.product-button:hover {\n  background-color: #5AAAD8;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}