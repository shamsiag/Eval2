{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {}\n    };\n  },\n  mounted() {\n    this.fetchAllOrdersData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllOrdersData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n\n        // Récupérer les commandes payées (status=5)\n        await this.fetchPaidOrders();\n\n        // Récupérer les commandes en attente (status=1,2,3)\n        await this.fetchPendingOrders();\n\n        // Calculer les KPIs\n        this.calculateKPIs();\n\n        // Générer tous les graphiques\n        this.renderAllCharts();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n      }\n    },\n    async fetchPaidOrders() {\n      try {\n        const url = `${this.apiLink}/orders?status=5`;\n        console.log(\"URL de récupération des commandes payées:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes payées récupérées:\", orders);\n        this.paidSalesData = this.processOrdersData(orders);\n        console.log(\"Données des ventes payées:\", this.paidSalesData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes payées:\", error);\n      }\n    },\n    async fetchPendingOrders() {\n      try {\n        // Récupérer les commandes en attente (statuts 1, 2, 3)\n        const url = `${this.apiLink}/orders??sqlfilters=(status:=:1,2,3)`;\n        console.log(\"URL de récupération des commandes en attente:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes en attente récupérées:\", orders);\n        this.pendingOrdersData = this.processOrdersData(orders, true);\n        console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes en attente:\", error);\n      }\n    },\n    processOrdersData(orders, isPending = false) {\n      const salesData = [];\n      orders.forEach(order => {\n        if (order.lines && Array.isArray(order.lines)) {\n          order.lines.forEach(line => {\n            const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n            const productName = line.product_label || line.label || \"Produit inconnu\";\n            const productReference = line.product_ref || \"Référence inconnue\";\n            const productCategory = line.tag || \"Catégorie inconnue\";\n            const quantity = parseFloat(line.qty) || 0;\n            const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n            const status = order.status_label || \"Statut inconnu\";\n            const clientName = order.client || \"Client inconnu\";\n\n            // Déterminer la classe CSS pour le statut\n            let statusClass = \"unknown\";\n            if (!isPending) {\n              statusClass = \"paid\";\n            } else {\n              // Statut pour les commandes en attente\n              switch (order.status) {\n                case \"1\":\n                  statusClass = \"draft\";\n                  break;\n                case \"2\":\n                  statusClass = \"validated\";\n                  break;\n                case \"3\":\n                  statusClass = \"processing\";\n                  break;\n                default:\n                  statusClass = \"unknown\";\n                  break;\n              }\n            }\n            salesData.push({\n              date: saleDate,\n              client: clientName,\n              product: productName,\n              reference: productReference,\n              category: productCategory,\n              quantity: quantity,\n              total: lineTotal,\n              status: status,\n              statusClass: statusClass,\n              orderId: order.id\n            });\n          });\n        }\n      });\n      return salesData;\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n\n      // Nombre total de commandes en attente\n      const uniqueOrders = new Set(this.pendingOrdersData.map(item => item.orderId));\n      this.totalPendingOrders = uniqueOrders.size;\n\n      // Calcul du panier moyen\n      const uniquePaidOrders = new Set(this.paidSalesData.map(item => item.orderId));\n      const paidOrdersCount = uniquePaidOrders.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n\n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrders = uniqueOrders.size + paidOrdersCount;\n      this.conversionRate = totalOrders > 0 ? (paidOrdersCount / totalOrders * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [{\n              data: categoryData,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: dateData,\n              fill: false,\n              borderColor: '#5AAAD8',\n              tension: 0.1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n\n      // Compter par statut\n      const statusCounts = {};\n      allOrders.forEach(order => {\n        statusCounts[order.status] = (statusCounts[order.status] || 0) + 1;\n      });\n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [{\n              data: statusData,\n              backgroundColor: ['#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct).sort((a, b) => b[1] - a[1]).slice(0, 5);\n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: productData,\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6\n            }]\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Simulation de données géographiques - à remplacer par des données réelles\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [{\n              data: geoValues,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Simulation de données de fidélité - à remplacer par des données réelles\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [{\n          label: 'Nombre de clients',\n          data: [65, 40, 25, 15],\n          backgroundColor: '#5AAAD8',\n          borderRadius: 6\n        }]\n      };\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function () {\n      // Implémenter le filtrage par date\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Logique de filtrage à ajouter\n    },\n    statusFilter: function () {\n      // Implémenter le filtrage par statut\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Logique de filtrage à ajouter\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","salesData","paidSalesData","pendingOrdersData","apiKey","localStorage","getItem","apiLink","dateFilter","statusFilter","totalSales","totalPendingOrders","conversionRate","averageOrderValue","charts","mounted","fetchAllOrdersData","methods","formatDate","timestamp","date","Date","toLocaleDateString","formatCurrency","value","Intl","NumberFormat","style","currency","format","Error","fetchPaidOrders","fetchPendingOrders","calculateKPIs","renderAllCharts","error","console","url","log","response","fetch","headers","ok","statusText","orders","json","processOrdersData","isPending","forEach","order","lines","Array","isArray","line","saleDate","date_creation","productName","product_label","label","productReference","product_ref","productCategory","tag","quantity","parseFloat","qty","lineTotal","subprice","toFixed","status","status_label","clientName","client","statusClass","push","product","reference","category","total","orderId","id","reduce","sale","uniqueOrders","Set","map","item","size","uniquePaidOrders","paidOrdersCount","totalOrders","categorySalesChart","Object","values","chart","destroy","renderCategorySalesChart","renderSalesTrendChart","renderOrderStatusChart","renderTopProductsChart","renderGeoDistributionChart","renderCustomerLoyaltyChart","aggregatedByCategory","categoryLabels","keys","categoryData","ctx","document","getElementById","type","labels","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","color","salesByDate","sortedDates","sort","a","b","split","reverse","join","dateLabels","dateData","salesTrendChart","fill","borderColor","tension","display","scales","y","beginAtZero","ticks","x","allOrders","statusCounts","statusLabels","statusData","orderStatusChart","salesByProduct","sortedProducts","entries","slice","productLabels","productData","topProductsChart","borderRadius","indexAxis","geoData","geoLabels","geoValues","geoDistributionChart","loyaltyData","customerLoyaltyChart","watch"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2 class=\"section-title\">Tableau</h2>\n    <h2 class=\"section-title\">de</h2>\n    <h2 class=\"section-title\">bord</h2>\n    \n    <div class=\"dashboard-content\">\n      <!-- Résumé des indicateurs clés -->\n      <div class=\"kpi-container\">\n        <div class=\"kpi-card\">\n          <h3>Total des ventes</h3>\n          <p class=\"kpi-value\">{{ totalSales }}€</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Commandes en attente</h3>\n          <p class=\"kpi-value\">{{ totalPendingOrders }}</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Taux de conversion</h3>\n          <p class=\"kpi-value\">{{ conversionRate }}%</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Panier moyen</h3>\n          <p class=\"kpi-value\">{{ averageOrderValue }}€</p>\n        </div>\n      </div>\n\n      <!-- Graphiques d'analyse -->\n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Ventes par catégorie</h3>\n          <canvas id=\"categorySalesChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Évolution des ventes</h3>\n          <canvas id=\"salesTrendChart\"></canvas>\n        </div>\n      </div>\n      \n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Statut des commandes</h3>\n          <canvas id=\"orderStatusChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Top produits vendus</h3>\n          <canvas id=\"topProductsChart\"></canvas>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes payées -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes payées</h2>\n          <div class=\"filters\">\n            <select v-model=\"dateFilter\">\n              <option value=\"all\">Toutes les périodes</option>\n              <option value=\"today\">Aujourd'hui</option>\n              <option value=\"week\">Cette semaine</option>\n              <option value=\"month\">Ce mois</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(sale, index) in paidSalesData\" :key=\"'paid-'+index\">\n                <td>{{ sale.date }}</td>\n                <td>{{ sale.client }}</td>\n                <td>{{ sale.product }}</td>\n                <td>{{ sale.reference }}</td>\n                <td>{{ sale.category }}</td>\n                <td>{{ sale.quantity }}</td>\n                <td>{{ sale.total }}€</td>\n                <td><span class=\"status-tag paid\">{{ sale.status }}</span></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes en cours -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes en attente</h2>\n          <div class=\"filters\">\n            <select v-model=\"statusFilter\">\n              <option value=\"all\">Tous les statuts</option>\n              <option value=\"draft\">Brouillon</option>\n              <option value=\"validated\">Validée</option>\n              <option value=\"processing\">En traitement</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(order, index) in pendingOrdersData\" :key=\"'pending-'+index\">\n                <td>{{ order.date }}</td>\n                <td>{{ order.client }}</td>\n                <td>{{ order.product }}</td>\n                <td>{{ order.reference }}</td>\n                <td>{{ order.quantity }}</td>\n                <td>{{ order.total }}€</td>\n                <td><span :class=\"'status-tag ' + order.statusClass\">{{ order.status }}</span></td>\n                <td>\n                  <button class=\"action-btn\">Détails</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Analyse des clients -->\n      <div class=\"data-section\">\n        <h2>Analyse clientèle</h2>\n        <div class=\"charts-row\">\n          <div class=\"chart-container\">\n            <h3>Répartition géographique</h3>\n            <canvas id=\"geoDistributionChart\"></canvas>\n          </div>\n          <div class=\"chart-container\">\n            <h3>Fidélité clients</h3>\n            <canvas id=\"customerLoyaltyChart\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {}\n    };\n  },\n  mounted() {\n    this.fetchAllOrdersData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllOrdersData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        \n        // Récupérer les commandes payées (status=5)\n        await this.fetchPaidOrders();\n        \n        // Récupérer les commandes en attente (status=1,2,3)\n        await this.fetchPendingOrders();\n        \n        // Calculer les KPIs\n        this.calculateKPIs();\n        \n        // Générer tous les graphiques\n        this.renderAllCharts();\n        \n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n      }\n    },\n    async fetchPaidOrders() {\n      try {\n        const url = `${this.apiLink}/orders?status=5`;\n        console.log(\"URL de récupération des commandes payées:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes payées récupérées:\", orders);\n\n        this.paidSalesData = this.processOrdersData(orders);\n        console.log(\"Données des ventes payées:\", this.paidSalesData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes payées:\", error);\n      }\n    },\n    async fetchPendingOrders() {\n      try {\n        // Récupérer les commandes en attente (statuts 1, 2, 3)\n        const url = `${this.apiLink}/orders??sqlfilters=(status:=:1,2,3)`;\n        console.log(\"URL de récupération des commandes en attente:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes en attente récupérées:\", orders);\n\n        this.pendingOrdersData = this.processOrdersData(orders, true);\n        console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes en attente:\", error);\n      }\n    },\n    processOrdersData(orders, isPending = false) {\n      const salesData = [];\n      \n      orders.forEach(order => {\n        if (order.lines && Array.isArray(order.lines)) {\n          order.lines.forEach(line => {\n            const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n            const productName = line.product_label || line.label || \"Produit inconnu\";\n            const productReference = line.product_ref || \"Référence inconnue\";\n            const productCategory = line.tag || \"Catégorie inconnue\";\n            const quantity = parseFloat(line.qty) || 0;\n            const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n            const status = order.status_label || \"Statut inconnu\";\n            const clientName = order.client || \"Client inconnu\";\n            \n            // Déterminer la classe CSS pour le statut\n            let statusClass = \"unknown\";\n            if (!isPending) {\n              statusClass = \"paid\";\n            } else {\n              // Statut pour les commandes en attente\n              switch (order.status) {\n                case \"1\": statusClass = \"draft\"; break;\n                case \"2\": statusClass = \"validated\"; break;\n                case \"3\": statusClass = \"processing\"; break;\n                default: statusClass = \"unknown\"; break;\n              }\n            }\n            \n            salesData.push({\n              date: saleDate,\n              client: clientName,\n              product: productName,\n              reference: productReference,\n              category: productCategory,\n              quantity: quantity,\n              total: lineTotal,\n              status: status,\n              statusClass: statusClass,\n              orderId: order.id\n            });\n          });\n        }\n      });\n      \n      return salesData;\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n      \n      // Nombre total de commandes en attente\n      const uniqueOrders = new Set(this.pendingOrdersData.map(item => item.orderId));\n      this.totalPendingOrders = uniqueOrders.size;\n      \n      // Calcul du panier moyen\n      const uniquePaidOrders = new Set(this.paidSalesData.map(item => item.orderId));\n      const paidOrdersCount = uniquePaidOrders.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? \n        (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n      \n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrders = uniqueOrders.size + paidOrdersCount;\n      this.conversionRate = totalOrders > 0 ? \n        ((paidOrdersCount / totalOrders) * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      \n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [\n              {\n                data: categoryData,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      \n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: dateData,\n                fill: false,\n                borderColor: '#5AAAD8',\n                tension: 0.1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Combiner les données des commandes payées et en attente\n      const allOrders = [...this.paidSalesData, ...this.pendingOrdersData];\n      \n      // Compter par statut\n      const statusCounts = {};\n      allOrders.forEach(order => {\n        statusCounts[order.status] = (statusCounts[order.status] || 0) + 1;\n      });\n      \n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [\n              {\n                data: statusData,\n                backgroundColor: [\n                  '#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5);\n      \n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: productData,\n                backgroundColor: '#5AAAD8',\n                borderRadius: 6,\n              },\n            ],\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Simulation de données géographiques - à remplacer par des données réelles\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      \n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [\n              {\n                data: geoValues,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Simulation de données de fidélité - à remplacer par des données réelles\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [\n          {\n            label: 'Nombre de clients',\n            data: [65, 40, 25, 15],\n            backgroundColor: '#5AAAD8',\n            borderRadius: 6,\n          }\n        ]\n      };\n\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    }\n  },\n  watch: {\n    dateFilter: function() {\n      // Implémenter le filtrage par date\n      console.log(\"Filtre de date changé:\", this.dateFilter);\n      // Logique de filtrage à ajouter\n    },\n    statusFilter: function() {\n      // Implémenter le filtrage par statut\n      console.log(\"Filtre de statut changé:\", this.statusFilter);\n      // Logique de filtrage à ajouter\n    }\n  }\n};\n</script>\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n  margin-left: 115px;\n}\n\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n  min-height: 100vh;\n}\n\nh1, h2, h3 {\n  font-family: 'PP Formula', sans-serif;\n  margin-bottom: 1rem;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n  margin-right: 115px;\n  padding-top: 30px;\n}\n\n/* KPI Cards */\n.kpi-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.kpi-card {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  padding: 20px;\n  flex: 1;\n  min-width: 200px;\n  text-align: center;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.kpi-value {\n  font-size: 28px;\n  font-weight: bold;\n  margin-top: 10px;\n  color: #5AAAD8;\n}\n\n/* Chart layouts */\n.charts-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  flex: 1;\n  min-width: 300px;\n  color: #1e1e1e;\n}\n\n.chart-container h3 {\n  color: #1e1e1e;\n  margin-bottom: 15px;\n  font-size: 18px;\n}\n\n/* Data tables */\n.data-section {\n  margin-bottom: 40px;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.filters select {\n  padding: 8px 12px;\n  border-radius: 6px;\n  background-color: rgba(255, 255, 255, 0.1);\n  color: #f7f7f7;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sales-details {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  width: 100%;\n  color: #1e1e1e;\n  overflow-x: auto;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.9em;\n}\n\nth, td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\nth {\n  background-color: #f7f7f7;\n  font-weight: bold;\n}\n\n/* Status tags */\n.status-tag {\n  padding: 5px 10px;\n  border-radius: 12px;\n  font-size: 0.85em;\n  color: white;\n  font-weight: 500;\n}\n\n.status-tag.paid {\n  background-color: #28a745;\n}\n\n.status-tag.draft {\n  background-color: #6c757d;\n}\n\n.status-tag.validated {\n  background-color: #007bff;\n}\n\n.status-tag.processing {\n  background-color: #ffc107;\n  color: #1e1e1e;\n}\n\n.status-tag.unknown {\n  background-color: #6c757d;\n}\n\n.action-btn {\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #5AAAD8;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-size: 0.85em;\n}\n\n.action-btn:hover {\n  background-color: #4990b8;\n}\n\n/* Responsive adjustments */\n@media (max-width: 1200px) {\n  .dashboard-content {\n    margin-left: 20px;\n    margin-right: 20px;\n  }\n  \n  .section-title {\n    margin-left: 20px;\n  }\n}\n\n@media (max-width: 768px) {\n  .kpi-card {\n    min-width: 100%;\n  }\n  \n  .chart-container {\n    min-width: 100%;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}