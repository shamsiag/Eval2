{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      invoicesData: {},\n      // Pour stocker les données des factures\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {},\n      isLoading: true\n    };\n  },\n  mounted() {\n    this.fetchAllData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        this.isLoading = true;\n\n        // Étape 1: Récupérer toutes les factures\n        await this.fetchInvoices();\n\n        // Étape 2: Récupérer toutes les commandes\n        await this.fetchAllOrders();\n\n        // Étape 3: Calculer les KPIs et générer les graphiques\n        this.calculateKPIs();\n        this.renderAllCharts();\n        this.isLoading = false;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n        this.isLoading = false;\n      }\n    },\n    async fetchInvoices() {\n      try {\n        // Récupérer toutes les factures avec une limite plus élevée\n        const url = `${this.apiLink}/invoices?limit=100`;\n        console.log(\"URL de récupération des factures:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const invoices = await response.json();\n        console.log(\"Factures récupérées:\", invoices);\n\n        // Créer un dictionnaire des factures pour une recherche rapide\n        this.invoicesData = {};\n        invoices.forEach(invoice => {\n          // Vérifier si la facture est liée à une commande via fk_commande ou origin_id\n          let orderId = null;\n\n          // Priorité à fk_commande s'il existe\n          if (invoice.fk_commande) {\n            orderId = invoice.fk_commande;\n          }\n          // Sinon essayer avec origin et origin_id\n          else if (invoice.origin && invoice.origin_id) {\n            orderId = invoice.origin_id;\n          }\n          if (orderId) {\n            this.invoicesData[orderId] = {\n              id: invoice.id,\n              ref: invoice.ref,\n              paye: invoice.paye === \"1\" || invoice.paye === 1,\n              total: invoice.total_ttc,\n              statut: invoice.fk_statut,\n              statutLabel: this.getInvoiceStatusLabel(invoice.fk_statut)\n            };\n          }\n        });\n        console.log(\"Données des factures traitées:\", this.invoicesData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des factures:\", error);\n      }\n    },\n    getInvoiceStatusLabel(status) {\n      // Conversion du statut de facture en texte\n      switch (status) {\n        case \"0\":\n          return \"Brouillon\";\n        case \"1\":\n          return \"Validée\";\n        case \"2\":\n          return \"Impayée\";\n        case \"3\":\n          return \"Payée\";\n        default:\n          return \"Statut inconnu\";\n      }\n    },\n    async fetchAllOrders() {\n      try {\n        // Récupérer toutes les commandes (pas de filtre par statut)\n        const url = `${this.apiLink}/orders?limit=100`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes récupérées:\", orders);\n\n        // Réinitialiser les tableaux\n        this.paidSalesData = [];\n        this.pendingOrdersData = [];\n\n        // Traiter chaque commande\n        orders.forEach(order => {\n          // Vérifier si la commande a une facture associée et si celle-ci est payée\n          const hasInvoice = this.invoicesData[order.id] !== undefined;\n          const isPaid = hasInvoice && this.invoicesData[order.id].paye === true;\n\n          // Traiter les lignes de commande\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const orderData = this.processOrderLine(order, line, hasInvoice, isPaid);\n              if (isPaid) {\n                this.paidSalesData.push(orderData);\n              } else {\n                this.pendingOrdersData.push(orderData);\n              }\n            });\n          }\n          // Si pas de lignes disponibles, créer une entrée globale pour la commande\n          else {\n            const orderData = {\n              date: order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\",\n              client: order.client_name || \"Client inconnu\",\n              product: \"Information non disponible\",\n              reference: \"Information non disponible\",\n              category: \"Information non disponible\",\n              quantity: 0,\n              total: order.total_ttc || 0,\n              status: order.status_label || \"Statut inconnu\",\n              statusClass: isPaid ? \"paid\" : this.getStatusClass(order.status),\n              orderId: order.id,\n              invoiceRef: hasInvoice ? this.invoicesData[order.id].ref : \"Aucune\",\n              invoiceStatus: hasInvoice ? isPaid ? \"Payée\" : this.invoicesData[order.id].statutLabel : \"Non facturée\"\n            };\n            if (isPaid) {\n              this.paidSalesData.push(orderData);\n            } else {\n              this.pendingOrdersData.push(orderData);\n            }\n          }\n        });\n        console.log(\"Données des ventes payées:\", this.paidSalesData);\n        console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    getStatusClass(status) {\n      // Retourne la classe CSS correspondant au statut\n      switch (status) {\n        case \"0\":\n          return \"draft\";\n        case \"1\":\n          return \"validated\";\n        case \"2\":\n          return \"processing\";\n        case \"3\":\n          return \"shipping\";\n        default:\n          return \"unknown\";\n      }\n    },\n    processOrderLine(order, line, hasInvoice, isPaid) {\n      const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n      const productName = line.product_label || line.label || \"Produit inconnu\";\n      const productReference = line.product_ref || \"Référence inconnue\";\n      const productCategory = line.category || \"Catégorie inconnue\";\n      const quantity = parseFloat(line.qty) || 0;\n      const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n      const status = order.status_label || \"Statut inconnu\";\n      const clientName = order.client_name || \"Client inconnu\";\n\n      // Déterminer la classe CSS pour le statut\n      const statusClass = isPaid ? \"paid\" : this.getStatusClass(order.status);\n\n      // Information de facturation\n      let invoiceRef = \"Aucune\";\n      let invoiceStatus = \"Non facturée\";\n      if (hasInvoice) {\n        invoiceRef = this.invoicesData[order.id].ref;\n        invoiceStatus = isPaid ? \"Payée\" : this.invoicesData[order.id].statutLabel;\n      }\n      return {\n        date: saleDate,\n        client: clientName,\n        product: productName,\n        reference: productReference,\n        category: productCategory,\n        quantity: quantity,\n        total: lineTotal,\n        status: status,\n        statusClass: statusClass,\n        orderId: order.id,\n        invoiceRef: invoiceRef,\n        invoiceStatus: invoiceStatus,\n        isPaid: isPaid\n      };\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes (seulement les commandes payées)\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n\n      // Nombre total de commandes en attente (compter les commandes uniques)\n      const uniqueOrderIds = new Set(this.pendingOrdersData.map(order => order.orderId));\n      this.totalPendingOrders = uniqueOrderIds.size;\n\n      // Calculer le panier moyen (seulement les commandes payées)\n      const uniquePaidOrderIds = new Set(this.paidSalesData.map(sale => sale.orderId));\n      const paidOrdersCount = uniquePaidOrderIds.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n\n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrdersCount = paidOrdersCount + this.totalPendingOrders;\n      this.conversionRate = totalOrdersCount > 0 ? (paidOrdersCount / totalOrdersCount * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [{\n              data: categoryData,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date (seulement les commandes payées)\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n\n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: dateData,\n              fill: false,\n              borderColor: '#5AAAD8',\n              tension: 0.1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Récupérer les IDs uniques des commandes pour éviter le double comptage\n      const paidOrderIds = new Set(this.paidSalesData.map(order => order.orderId));\n\n      // Regrouper les commandes par statut\n      const paidOrders = {\n        \"Payée\": paidOrderIds.size\n      };\n\n      // Pour les commandes en attente, compter par statut\n      const pendingOrdersByStatus = {};\n      this.pendingOrdersData.forEach(order => {\n        // N'ajouter chaque commande qu'une seule fois\n        if (pendingOrdersByStatus[order.status] === undefined || !pendingOrdersByStatus[order.status].includes(order.orderId)) {\n          if (!pendingOrdersByStatus[order.status]) {\n            pendingOrdersByStatus[order.status] = [order.orderId];\n          } else {\n            pendingOrdersByStatus[order.status].push(order.orderId);\n          }\n        }\n      });\n\n      // Convertir en objet de comptage\n      const pendingStatusCounts = {};\n      for (const status in pendingOrdersByStatus) {\n        pendingStatusCounts[status] = pendingOrdersByStatus[status].length;\n      }\n\n      // Combiner les deux objets\n      const statusCounts = {\n        ...paidOrders,\n        ...pendingStatusCounts\n      };\n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [{\n              data: statusData,\n              backgroundColor: ['#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit (seulement les commandes payées)\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        if (sale.product !== \"Information non disponible\") {\n          salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n        }\n      });\n\n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct).sort((a, b) => b[1] - a[1]).slice(0, 5);\n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [{\n              label: 'Ventes (€)',\n              data: productData,\n              backgroundColor: '#5AAAD8',\n              borderRadius: 6\n            }]\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Simulation de données géographiques - à remplacer par des données réelles\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [{\n              data: geoValues,\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Simulation de données de fidélité - à remplacer par des données réelles\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [{\n          label: 'Nombre de clients',\n          data: [65, 40, 25, 15],\n          backgroundColor: '#5AAAD8',\n          borderRadius: 6\n        }]\n      };\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          }\n        });\n      }\n    },\n    // Méthodes pour filtrer les données\n    applyDateFilter(data) {\n      if (this.dateFilter === 'all') return data;\n      const today = new Date();\n      const startOfDay = new Date(today.setHours(0, 0, 0, 0));\n      const startOfWeek = new Date(today);\n      startOfWeek.setDate(today.getDate() - today.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n      return data.filter(item => {\n        const itemDate = new Date(item.date.split('/').reverse().join('-'));\n        switch (this.dateFilter) {\n          case 'today':\n            return itemDate >= startOfDay;\n          case 'week':\n            return itemDate >= startOfWeek;\n          case 'month':\n            return itemDate >= startOfMonth;\n          default:\n            return true;\n        }\n      });\n    },\n    applyStatusFilter(data) {\n      if (this.statusFilter === 'all') return data;\n      return data.filter(item => {\n        return item.statusClass === this.statusFilter;\n      });\n    }\n  },\n  watch: {\n    dateFilter: function () {\n      // Recalculer les indicateurs et graphiques en fonction du filtre de date\n      this.calculateKPIs();\n      this.renderAllCharts();\n    },\n    statusFilter: function () {\n      // Appliquer le filtre par statut aux commandes en attente\n      this.renderOrderStatusChart();\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","salesData","paidSalesData","pendingOrdersData","invoicesData","apiKey","localStorage","getItem","apiLink","dateFilter","statusFilter","totalSales","totalPendingOrders","conversionRate","averageOrderValue","charts","isLoading","mounted","fetchAllData","methods","formatDate","timestamp","date","Date","toLocaleDateString","formatCurrency","value","Intl","NumberFormat","style","currency","format","Error","fetchInvoices","fetchAllOrders","calculateKPIs","renderAllCharts","error","console","url","log","response","fetch","headers","ok","statusText","invoices","json","forEach","invoice","orderId","fk_commande","origin","origin_id","id","ref","paye","total","total_ttc","statut","fk_statut","statutLabel","getInvoiceStatusLabel","status","orders","order","hasInvoice","undefined","isPaid","lines","Array","isArray","line","orderData","processOrderLine","push","date_creation","client","client_name","product","reference","category","quantity","status_label","statusClass","getStatusClass","invoiceRef","invoiceStatus","saleDate","productName","product_label","label","productReference","product_ref","productCategory","parseFloat","qty","lineTotal","subprice","toFixed","clientName","reduce","sale","uniqueOrderIds","Set","map","size","uniquePaidOrderIds","paidOrdersCount","totalOrdersCount","categorySalesChart","Object","values","chart","destroy","renderCategorySalesChart","renderSalesTrendChart","renderOrderStatusChart","renderTopProductsChart","renderGeoDistributionChart","renderCustomerLoyaltyChart","aggregatedByCategory","categoryLabels","keys","categoryData","ctx","document","getElementById","type","labels","datasets","backgroundColor","borderWidth","options","responsive","plugins","legend","position","color","salesByDate","sortedDates","sort","a","b","split","reverse","join","dateLabels","dateData","salesTrendChart","fill","borderColor","tension","display","scales","y","beginAtZero","ticks","x","paidOrderIds","paidOrders","pendingOrdersByStatus","includes","pendingStatusCounts","length","statusCounts","statusLabels","statusData","orderStatusChart","salesByProduct","sortedProducts","entries","slice","productLabels","item","productData","topProductsChart","borderRadius","indexAxis","geoData","geoLabels","geoValues","geoDistributionChart","loyaltyData","customerLoyaltyChart","applyDateFilter","today","startOfDay","setHours","startOfWeek","setDate","getDate","getDay","startOfMonth","getFullYear","getMonth","filter","itemDate","applyStatusFilter","watch"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/DashboardPage.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2 class=\"section-title\">Tableau</h2>\n    <h2 class=\"section-title\">de</h2>\n    <h2 class=\"section-title\">bord</h2>\n    \n    <div class=\"dashboard-content\">\n      <!-- Résumé des indicateurs clés -->\n      <div class=\"kpi-container\">\n        <div class=\"kpi-card\">\n          <h3>Total des ventes</h3>\n          <p class=\"kpi-value\">{{ totalSales }}€</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Commandes en attente</h3>\n          <p class=\"kpi-value\">{{ totalPendingOrders }}</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Taux de conversion</h3>\n          <p class=\"kpi-value\">{{ conversionRate }}%</p>\n        </div>\n        <div class=\"kpi-card\">\n          <h3>Panier moyen</h3>\n          <p class=\"kpi-value\">{{ averageOrderValue }}€</p>\n        </div>\n      </div>\n\n      <!-- Graphiques d'analyse -->\n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Ventes par catégorie</h3>\n          <canvas id=\"categorySalesChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Évolution des ventes</h3>\n          <canvas id=\"salesTrendChart\"></canvas>\n        </div>\n      </div>\n      \n      <div class=\"charts-row\">\n        <div class=\"chart-container\">\n          <h3>Statut des commandes</h3>\n          <canvas id=\"orderStatusChart\"></canvas>\n        </div>\n        <div class=\"chart-container\">\n          <h3>Top produits vendus</h3>\n          <canvas id=\"topProductsChart\"></canvas>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes payées -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes payées</h2>\n          <div class=\"filters\">\n            <select v-model=\"dateFilter\">\n              <option value=\"all\">Toutes les périodes</option>\n              <option value=\"today\">Aujourd'hui</option>\n              <option value=\"week\">Cette semaine</option>\n              <option value=\"month\">Ce mois</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>N° Facture</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(sale, index) in paidSalesData\" :key=\"'paid-'+index\">\n                <td>{{ sale.date }}</td>\n                <td>{{ sale.client }}</td>\n                <td>{{ sale.product }}</td>\n                <td>{{ sale.reference }}</td>\n                <td>{{ sale.category }}</td>\n                <td>{{ sale.quantity }}</td>\n                <td>{{ sale.total }}€</td>\n                <td><span class=\"status-tag paid\">{{ sale.status }}</span></td>\n                <td>{{ sale.invoiceRef }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Tableau des commandes en cours -->\n      <div class=\"data-section\">\n        <div class=\"section-header\">\n          <h2>Commandes en attente</h2>\n          <div class=\"filters\">\n            <select v-model=\"statusFilter\">\n              <option value=\"all\">Tous les statuts</option>\n              <option value=\"draft\">Brouillon</option>\n              <option value=\"validated\">Validée</option>\n              <option value=\"processing\">En traitement</option>\n            </select>\n          </div>\n        </div>\n        \n        <div class=\"sales-details\">\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>Produit</th>\n                <th>Référence</th>\n                <th>Catégorie</th>\n                <th>Quantité</th>\n                <th>Total</th>\n                <th>Statut</th>\n                <th>Statut Facture</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(order, index) in pendingOrdersData\" :key=\"'pending-'+index\">\n                <td>{{ order.date }}</td>\n                <td>{{ order.client }}</td>\n                <td>{{ order.product }}</td>\n                <td>{{ order.reference }}</td>\n                <td>{{ order.category }}</td>\n                <td>{{ order.quantity }}</td>\n                <td>{{ order.total }}€</td>\n                <td><span :class=\"'status-tag ' + order.statusClass\">{{ order.status }}</span></td>\n                <td>{{ order.invoiceStatus }}</td>\n                <td>\n                  <button class=\"action-btn\">Détails</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <!-- Analyse des clients -->\n      <div class=\"data-section\">\n        <h2>Analyse clientèle</h2>\n        <div class=\"charts-row\">\n          <div class=\"chart-container\">\n            <h3>Répartition géographique</h3>\n            <canvas id=\"geoDistributionChart\"></canvas>\n          </div>\n          <div class=\"chart-container\">\n            <h3>Fidélité clients</h3>\n            <canvas id=\"customerLoyaltyChart\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      salesData: [],\n      paidSalesData: [],\n      pendingOrdersData: [],\n      invoicesData: {},  // Pour stocker les données des factures\n      apiKey: localStorage.getItem('apiKey'),\n      apiLink: localStorage.getItem('apiLink'),\n      dateFilter: 'all',\n      statusFilter: 'all',\n      totalSales: 0,\n      totalPendingOrders: 0,\n      conversionRate: 0,\n      averageOrderValue: 0,\n      charts: {},\n      isLoading: true\n    };\n  },\n  mounted() {\n    this.fetchAllData();\n  },\n  methods: {\n    formatDate(timestamp) {\n      const date = new Date(timestamp * 1000);\n      return date.toLocaleDateString(\"fr-FR\");\n    },\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\"\n      }).format(value);\n    },\n    async fetchAllData() {\n      try {\n        if (!this.apiKey || !this.apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        \n        this.isLoading = true;\n        \n        // Étape 1: Récupérer toutes les factures\n        await this.fetchInvoices();\n        \n        // Étape 2: Récupérer toutes les commandes\n        await this.fetchAllOrders();\n        \n        // Étape 3: Calculer les KPIs et générer les graphiques\n        this.calculateKPIs();\n        this.renderAllCharts();\n        \n        this.isLoading = false;\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données:\", error);\n        this.isLoading = false;\n      }\n    },\n    async fetchInvoices() {\n      try {\n        // Récupérer toutes les factures avec une limite plus élevée\n        const url = `${this.apiLink}/invoices?limit=100`;\n        console.log(\"URL de récupération des factures:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const invoices = await response.json();\n        console.log(\"Factures récupérées:\", invoices);\n\n        // Créer un dictionnaire des factures pour une recherche rapide\n        this.invoicesData = {};\n        invoices.forEach(invoice => {\n          // Vérifier si la facture est liée à une commande via fk_commande ou origin_id\n          let orderId = null;\n          \n          // Priorité à fk_commande s'il existe\n          if (invoice.fk_commande) {\n            orderId = invoice.fk_commande;\n          } \n          // Sinon essayer avec origin et origin_id\n          else if (invoice.origin && invoice.origin_id) {\n            orderId = invoice.origin_id;\n          }\n          \n          if (orderId) {\n            this.invoicesData[orderId] = {\n              id: invoice.id,\n              ref: invoice.ref,\n              paye: invoice.paye === \"1\" || invoice.paye === 1,\n              total: invoice.total_ttc,\n              statut: invoice.fk_statut,\n              statutLabel: this.getInvoiceStatusLabel(invoice.fk_statut)\n            };\n          }\n        });\n        \n        console.log(\"Données des factures traitées:\", this.invoicesData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des factures:\", error);\n      }\n    },\n    getInvoiceStatusLabel(status) {\n      // Conversion du statut de facture en texte\n      switch(status) {\n        case \"0\": return \"Brouillon\";\n        case \"1\": return \"Validée\";\n        case \"2\": return \"Impayée\";\n        case \"3\": return \"Payée\";\n        default: return \"Statut inconnu\";\n      }\n    },\n    async fetchAllOrders() {\n      try {\n        // Récupérer toutes les commandes (pas de filtre par statut)\n        const url = `${this.apiLink}/orders?limit=100`;\n        console.log(\"URL de récupération des commandes:\", url);\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": this.apiKey,\n          },\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur réseau: ${response.statusText}`);\n        }\n        const orders = await response.json();\n        console.log(\"Commandes récupérées:\", orders);\n\n        // Réinitialiser les tableaux\n        this.paidSalesData = [];\n        this.pendingOrdersData = [];\n        \n        // Traiter chaque commande\n        orders.forEach(order => {\n          // Vérifier si la commande a une facture associée et si celle-ci est payée\n          const hasInvoice = this.invoicesData[order.id] !== undefined;\n          const isPaid = hasInvoice && this.invoicesData[order.id].paye === true;\n          \n          // Traiter les lignes de commande\n          if (order.lines && Array.isArray(order.lines)) {\n            order.lines.forEach(line => {\n              const orderData = this.processOrderLine(order, line, hasInvoice, isPaid);\n              \n              if (isPaid) {\n                this.paidSalesData.push(orderData);\n              } else {\n                this.pendingOrdersData.push(orderData);\n              }\n            });\n          } \n          // Si pas de lignes disponibles, créer une entrée globale pour la commande\n          else {\n            const orderData = {\n              date: order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\",\n              client: order.client_name || \"Client inconnu\",\n              product: \"Information non disponible\",\n              reference: \"Information non disponible\",\n              category: \"Information non disponible\",\n              quantity: 0,\n              total: order.total_ttc || 0,\n              status: order.status_label || \"Statut inconnu\",\n              statusClass: isPaid ? \"paid\" : this.getStatusClass(order.status),\n              orderId: order.id,\n              invoiceRef: hasInvoice ? this.invoicesData[order.id].ref : \"Aucune\",\n              invoiceStatus: hasInvoice ? \n                (isPaid ? \"Payée\" : this.invoicesData[order.id].statutLabel) : \"Non facturée\"\n            };\n            \n            if (isPaid) {\n              this.paidSalesData.push(orderData);\n            } else {\n              this.pendingOrdersData.push(orderData);\n            }\n          }\n        });\n        \n        console.log(\"Données des ventes payées:\", this.paidSalesData);\n        console.log(\"Données des commandes en attente:\", this.pendingOrdersData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des commandes:\", error);\n      }\n    },\n    getStatusClass(status) {\n      // Retourne la classe CSS correspondant au statut\n      switch (status) {\n        case \"0\": return \"draft\";\n        case \"1\": return \"validated\";\n        case \"2\": return \"processing\";\n        case \"3\": return \"shipping\";\n        default: return \"unknown\";\n      }\n    },\n    processOrderLine(order, line, hasInvoice, isPaid) {\n      const saleDate = order.date_creation ? this.formatDate(order.date_creation) : \"Inconnue\";\n      const productName = line.product_label || line.label || \"Produit inconnu\";\n      const productReference = line.product_ref || \"Référence inconnue\";\n      const productCategory = line.category || \"Catégorie inconnue\";\n      const quantity = parseFloat(line.qty) || 0;\n      const lineTotal = (parseFloat(line.subprice) * quantity).toFixed(2);\n      const status = order.status_label || \"Statut inconnu\";\n      const clientName = order.client_name || \"Client inconnu\";\n      \n      // Déterminer la classe CSS pour le statut\n      const statusClass = isPaid ? \"paid\" : this.getStatusClass(order.status);\n      \n      // Information de facturation\n      let invoiceRef = \"Aucune\";\n      let invoiceStatus = \"Non facturée\";\n      \n      if (hasInvoice) {\n        invoiceRef = this.invoicesData[order.id].ref;\n        invoiceStatus = isPaid ? \"Payée\" : this.invoicesData[order.id].statutLabel;\n      }\n      \n      return {\n        date: saleDate,\n        client: clientName,\n        product: productName,\n        reference: productReference,\n        category: productCategory,\n        quantity: quantity,\n        total: lineTotal,\n        status: status,\n        statusClass: statusClass,\n        orderId: order.id,\n        invoiceRef: invoiceRef,\n        invoiceStatus: invoiceStatus,\n        isPaid: isPaid\n      };\n    },\n    calculateKPIs() {\n      // Calculer le total des ventes (seulement les commandes payées)\n      this.totalSales = this.paidSalesData.reduce((total, sale) => {\n        return total + parseFloat(sale.total);\n      }, 0).toFixed(2);\n      \n      // Nombre total de commandes en attente (compter les commandes uniques)\n      const uniqueOrderIds = new Set(this.pendingOrdersData.map(order => order.orderId));\n      this.totalPendingOrders = uniqueOrderIds.size;\n      \n      // Calculer le panier moyen (seulement les commandes payées)\n      const uniquePaidOrderIds = new Set(this.paidSalesData.map(sale => sale.orderId));\n      const paidOrdersCount = uniquePaidOrderIds.size;\n      this.averageOrderValue = paidOrdersCount > 0 ? \n        (this.totalSales / paidOrdersCount).toFixed(2) : 0;\n      \n      // Taux de conversion (commandes payées / total des commandes)\n      const totalOrdersCount = paidOrdersCount + this.totalPendingOrders;\n      this.conversionRate = totalOrdersCount > 0 ? \n        ((paidOrdersCount / totalOrdersCount) * 100).toFixed(1) : 0;\n    },\n    renderAllCharts() {\n      // Détruire les graphiques existants si nécessaire\n      if (this.charts.categorySalesChart) {\n        Object.values(this.charts).forEach(chart => chart.destroy());\n      }\n      \n      this.renderCategorySalesChart();\n      this.renderSalesTrendChart();\n      this.renderOrderStatusChart();\n      this.renderTopProductsChart();\n      this.renderGeoDistributionChart();\n      this.renderCustomerLoyaltyChart();\n    },\n    renderCategorySalesChart() {\n      const aggregatedByCategory = {};\n      this.paidSalesData.forEach(sale => {\n        aggregatedByCategory[sale.category] = (aggregatedByCategory[sale.category] || 0) + parseFloat(sale.total);\n      });\n\n      const categoryLabels = Object.keys(aggregatedByCategory);\n      const categoryData = categoryLabels.map(label => aggregatedByCategory[label]);\n\n      const ctx = document.getElementById('categorySalesChart');\n      if (ctx) {\n        this.charts.categorySalesChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: categoryLabels,\n            datasets: [\n              {\n                data: categoryData,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderSalesTrendChart() {\n      // Grouper les ventes par date (seulement les commandes payées)\n      const salesByDate = {};\n      this.paidSalesData.forEach(sale => {\n        salesByDate[sale.date] = (salesByDate[sale.date] || 0) + parseFloat(sale.total);\n      });\n      \n      // Trier les dates\n      const sortedDates = Object.keys(salesByDate).sort((a, b) => {\n        return new Date(a.split('/').reverse().join('-')) - new Date(b.split('/').reverse().join('-'));\n      });\n      \n      const dateLabels = sortedDates;\n      const dateData = sortedDates.map(date => salesByDate[date]);\n\n      const ctx = document.getElementById('salesTrendChart');\n      if (ctx) {\n        this.charts.salesTrendChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: dateLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: dateData,\n                fill: false,\n                borderColor: '#5AAAD8',\n                tension: 0.1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true,\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderOrderStatusChart() {\n      // Récupérer les IDs uniques des commandes pour éviter le double comptage\n      const paidOrderIds = new Set(this.paidSalesData.map(order => order.orderId));\n      \n      // Regrouper les commandes par statut\n      const paidOrders = { \"Payée\": paidOrderIds.size };\n      \n      // Pour les commandes en attente, compter par statut\n      const pendingOrdersByStatus = {};\n      this.pendingOrdersData.forEach(order => {\n        // N'ajouter chaque commande qu'une seule fois\n        if (pendingOrdersByStatus[order.status] === undefined || \n            !pendingOrdersByStatus[order.status].includes(order.orderId)) {\n          \n          if (!pendingOrdersByStatus[order.status]) {\n            pendingOrdersByStatus[order.status] = [order.orderId];\n          } else {\n            pendingOrdersByStatus[order.status].push(order.orderId);\n          }\n        }\n      });\n      \n      // Convertir en objet de comptage\n      const pendingStatusCounts = {};\n      for (const status in pendingOrdersByStatus) {\n        pendingStatusCounts[status] = pendingOrdersByStatus[status].length;\n      }\n      \n      // Combiner les deux objets\n      const statusCounts = { ...paidOrders, ...pendingStatusCounts };\n      \n      const statusLabels = Object.keys(statusCounts);\n      const statusData = statusLabels.map(label => statusCounts[label]);\n\n      const ctx = document.getElementById('orderStatusChart');\n      if (ctx) {\n        this.charts.orderStatusChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: statusLabels,\n            datasets: [\n              {\n                data: statusData,\n                backgroundColor: [\n                  '#28a745', '#ffc107', '#007bff', '#dc3545', '#6c757d'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderTopProductsChart() {\n      // Agréger les ventes par produit (seulement les commandes payées)\n      const salesByProduct = {};\n      this.paidSalesData.forEach(sale => {\n        if (sale.product !== \"Information non disponible\") {\n          salesByProduct[sale.product] = (salesByProduct[sale.product] || 0) + parseFloat(sale.total);\n        }\n      });\n      \n      // Trier et prendre les 5 meilleurs produits\n      const sortedProducts = Object.entries(salesByProduct)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5);\n      \n      const productLabels = sortedProducts.map(item => item[0]);\n      const productData = sortedProducts.map(item => item[1]);\n\n      const ctx = document.getElementById('topProductsChart');\n      if (ctx) {\n        this.charts.topProductsChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: productLabels,\n            datasets: [\n              {\n                label: 'Ventes (€)',\n                data: productData,\n                backgroundColor: '#5AAAD8',\n                borderRadius: 6,\n              },\n            ],\n          },\n          options: {\n            indexAxis: 'y',\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              x: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              y: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderGeoDistributionChart() {\n      // Simulation de données géographiques - à remplacer par des données réelles\n      const geoData = {\n        'Paris': 45,\n        'Lyon': 20,\n        'Marseille': 15,\n        'Bordeaux': 10,\n        'Lille': 5,\n        'Autres': 5\n      };\n      \n      const geoLabels = Object.keys(geoData);\n      const geoValues = Object.values(geoData);\n\n      const ctx = document.getElementById('geoDistributionChart');\n      if (ctx) {\n        this.charts.geoDistributionChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: geoLabels,\n            datasets: [\n              {\n                data: geoValues,\n                backgroundColor: [\n                  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'\n                ],\n                borderWidth: 1\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    renderCustomerLoyaltyChart() {\n      // Simulation de données de fidélité - à remplacer par des données réelles\n      const loyaltyData = {\n        labels: ['1 achat', '2-3 achats', '4-5 achats', '6+ achats'],\n        datasets: [\n          {\n            label: 'Nombre de clients',\n            data: [65, 40, 25, 15],\n            backgroundColor: '#5AAAD8',\n            borderRadius: 6,\n          }\n        ]\n      };\n\n      const ctx = document.getElementById('customerLoyaltyChart');\n      if (ctx) {\n        this.charts.customerLoyaltyChart = new Chart(ctx, {\n          type: 'bar',\n          data: loyaltyData,\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              },\n              x: {\n                ticks: {\n                  color: '#1e1e1e'\n                }\n              }\n            }\n          },\n        });\n      }\n    },\n    // Méthodes pour filtrer les données\n    applyDateFilter(data) {\n      if (this.dateFilter === 'all') return data;\n      \n      const today = new Date();\n      const startOfDay = new Date(today.setHours(0, 0, 0, 0));\n      const startOfWeek = new Date(today);\n      startOfWeek.setDate(today.getDate() - today.getDay());\n      startOfWeek.setHours(0, 0, 0, 0);\n      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n      \n      return data.filter(item => {\n        const itemDate = new Date(item.date.split('/').reverse().join('-'));\n        \n        switch(this.dateFilter) {\n          case 'today':\n            return itemDate >= startOfDay;\n          case 'week':\n            return itemDate >= startOfWeek;\n          case 'month':\n            return itemDate >= startOfMonth;\n          default:\n            return true;\n        }\n      });\n    },\n    applyStatusFilter(data) {\n      if (this.statusFilter === 'all') return data;\n      \n      return data.filter(item => {\n        return item.statusClass === this.statusFilter;\n      });\n    }\n  },\n  watch: {\n    dateFilter: function() {\n      // Recalculer les indicateurs et graphiques en fonction du filtre de date\n      this.calculateKPIs();\n      this.renderAllCharts();\n    },\n    statusFilter: function() {\n      // Appliquer le filtre par statut aux commandes en attente\n      this.renderOrderStatusChart();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.section-title {\n  font-size: 56px;\n  font-family: 'DAWBE';\n  color: #F7F7F7;\n  text-align: left;\n  margin-bottom: 0;\n  margin-top: 0;\n  margin-left: 115px;\n}\n\n.dashboard {\n  padding: 40px 20px;\n  font-family: 'PP Formula', sans-serif;\n  color: #f7f7f7;\n  background-color: #0e100e;\n  text-align: left;\n  min-height: 100vh;\n}\n\nh1, h2, h3 {\n  font-family: 'PP Formula', sans-serif;\n  margin-bottom: 1rem;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-left: 115px;\n  margin-right: 115px;\n  padding-top: 30px;\n}\n\n/* KPI Cards */\n.kpi-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.kpi-card {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  padding: 20px;\n  flex: 1;\n  min-width: 200px;\n  text-align: center;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.kpi-value {\n  font-size: 28px;\n  font-weight: bold;\n  margin-top: 10px;\n  color: #5AAAD8;\n}\n\n/* Chart layouts */\n.charts-row {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  background: white;\n  padding: 20px;\n  border-radius: 12px;\n  flex: 1;\n  min-width: 300px;\n  color: #1e1e1e;\n}\n\n.chart-container h3 {\n  color: #1e1e1e;\n  margin-bottom: 15px;\n  font-size: 18px;\n}\n\n/* Data tables */\n.data-section {\n  margin-bottom: 40px;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}