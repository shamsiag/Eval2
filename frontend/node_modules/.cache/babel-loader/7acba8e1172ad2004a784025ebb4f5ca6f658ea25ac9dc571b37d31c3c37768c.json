{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"cart-page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"cart-items\"\n};\nconst _hoisted_3 = {\n  class: \"cart-item-info\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"cart-item-details\"\n};\nconst _hoisted_6 = {\n  class: \"cart-item-name\"\n};\nconst _hoisted_7 = {\n  class: \"cart-item-description\"\n};\nconst _hoisted_8 = {\n  class: \"cart-item-quantity\"\n};\nconst _hoisted_9 = [\"onUpdate:modelValue\", \"onChange\"];\nconst _hoisted_10 = {\n  class: \"cart-item-price\"\n};\nconst _hoisted_11 = {\n  class: \"product-unit-price\"\n};\nconst _hoisted_12 = {\n  class: \"product-total-price\"\n};\nconst _hoisted_13 = {\n  key: 2,\n  class: \"cart-summary\"\n};\nconst _hoisted_14 = {\n  class: \"total\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Votre Panier\", -1 /* HOISTED */)), _createCommentVNode(\" Affichage des produits dans le panier, si le panier n'est pas vide \"), $data.cartItems.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cartItems, (product, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"cart-item\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n      src: product.image,\n      alt: \"Product Image\",\n      class: \"cart-item-image\"\n    }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"h3\", _hoisted_6, _toDisplayString(product.name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_7, _toDisplayString(product.description), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": $event => product.quantity = $event,\n      min: \"1\",\n      onChange: $event => $options.updateCart(product),\n      class: \"quantity-input\"\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_9), [[_vModelText, product.quantity, void 0, {\n      number: true\n    }]])]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"span\", _hoisted_11, _toDisplayString($options.formatCurrency(product.price)), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_12, _toDisplayString($options.formatCurrency(product.price * product.quantity)), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Message si le panier est vide \"), _cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n    class: \"empty-message\"\n  }, \"Votre panier est vide.\", -1 /* HOISTED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" Résumé du panier et bouton de commande \"), $data.cartItems.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createTextVNode(\"Total : \")), _createElementVNode(\"span\", null, _toDisplayString($options.formatCurrency($data.totalPrice)), 1 /* TEXT */)])]), _createElementVNode(\"button\", {\n    class: \"checkout-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.validateOrder && $options.validateOrder(...args))\n  }, \" Valider la commande \")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$data","cartItems","length","_hoisted_2","_Fragment","_renderList","product","index","_hoisted_3","src","image","alt","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","name","_hoisted_7","description","_hoisted_8","type","$event","quantity","min","onChange","$options","updateCart","_hoisted_9","number","_hoisted_10","_hoisted_11","formatCurrency","price","_hoisted_12","_hoisted_13","_hoisted_14","_createTextVNode","totalPrice","onClick","_cache","args","validateOrder"],"sources":["/Users/macbookpro/Sham/S6/stellarz-web/stellarz-b/stellar-web/src/views/CartPage.vue"],"sourcesContent":["<template>\n  <div class=\"cart-page\">\n    <h1>Votre Panier</h1>\n\n    <!-- Affichage des produits dans le panier, si le panier n'est pas vide -->\n    <div class=\"cart-items\" v-if=\"cartItems.length\">\n      <div v-for=\"(product, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n        <div class=\"cart-item-info\">\n          <img :src=\"product.image\" alt=\"Product Image\" class=\"cart-item-image\" />\n          <div class=\"cart-item-details\">\n            <h3 class=\"cart-item-name\">{{ product.name }}</h3>\n            <p class=\"cart-item-description\">{{ product.description }}</p>\n          </div>\n        </div>\n        \n        <div class=\"cart-item-quantity\">\n          <input\n            type=\"number\"\n            v-model.number=\"product.quantity\"\n            min=\"1\"\n            @change=\"updateCart(product)\"\n            class=\"quantity-input\"\n          />\n        </div>\n\n        <div class=\"cart-item-price\">\n          <span class=\"product-unit-price\">{{ formatCurrency(product.price) }}</span>\n          <span class=\"product-total-price\">{{ formatCurrency(product.price * product.quantity) }}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Message si le panier est vide -->\n    <p v-else class=\"empty-message\">Votre panier est vide.</p>\n\n    <!-- Résumé du panier et bouton de commande -->\n    <div class=\"cart-summary\" v-if=\"cartItems.length\">\n      <div class=\"total\">\n        <p>Total : <span>{{ formatCurrency(totalPrice) }}</span></p>\n      </div>\n      <button class=\"checkout-button\" @click=\"validateOrder\">\n        Valider la commande\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"CartPage\",\n  data() {\n    return {\n      cartItems: [],\n      totalPrice: 0,\n      orderId: null, // ID de la commande brouillon\n      products: [] // Ajout d'une variable pour stocker les produits\n    };\n  },\n  methods: {\n    formatCurrency(value) {\n      return new Intl.NumberFormat(\"fr-FR\", {\n        style: \"currency\",\n        currency: \"EUR\",\n      }).format(value);\n    },\n    updateTotal() {\n      this.totalPrice = this.cartItems.reduce((sum, product) => {\n        return sum + product.price * product.quantity;\n      }, 0);\n    },\n    async updateCart(product) {\n      if (!this.orderId) {\n        console.error(\"Aucune commande brouillon disponible.\");\n        return;\n      }\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n\n        const updateUrl = `${apiLink}/orders/${this.orderId}/lines/${product.lineId}`;\n        const response = await fetch(updateUrl, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({\n            qty: product.quantity,\n          }),\n        });\n\n        if (!response.ok) {\n          console.error(\"Erreur lors de la mise à jour de la ligne produit\", await response.json());\n        } else {\n          console.log(\"Ligne mise à jour pour\", product.name);\n        }\n      } catch (error) {\n        console.error(\"Erreur updateCart:\", error);\n      }\n      this.updateTotal();\n    },\n    validateOrder() {\n      alert(\"Commande validée !\");\n    },\n    async getOrCreateDraftOrder() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        const clientId = localStorage.getItem(\"clientId\");\n        if (!apiKey || !apiLink || !clientId) {\n          throw new Error(\"Données manquantes (API Key, API Link ou ClientId)\");\n        }\n\n        const searchUrl = `${apiLink}/orders?fk_soc=${clientId}&status=0`;\n        const searchRes = await fetch(searchUrl, {\n          headers: { \"DOLAPIKEY\": apiKey },\n        });\n        const existingOrders = await searchRes.json();\n        if (Array.isArray(existingOrders) && existingOrders.length > 0) {\n          const existingOrderId = existingOrders[0].id;\n          this.orderId = existingOrderId;\n          return existingOrderId;\n        }\n\n        const createUrl = `${apiLink}/orders`;\n        const today = new Date().toISOString().split(\"T\")[0];\n        const createRes = await fetch(createUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"DOLAPIKEY\": apiKey,\n          },\n          body: JSON.stringify({\n            socid: clientId,\n            date: today,\n            status: 0, // Brouillon\n          }),\n        });\n        const newOrder = await createRes.json();\n        if (newOrder.id) {\n          this.orderId = newOrder.id;\n          return newOrder.id;\n        } else {\n          console.error(\"Erreur lors de la création de la commande brouillon\", newOrder);\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Erreur dans getOrCreateDraftOrder :\", error);\n        return null;\n      }\n    },\n    async fetchProducts() {\n      try {\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${apiLink}/products`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey,\n          },\n        });\n        const products = await response.json();\n        this.products = products; // Stockage des produits récupérés\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des produits:\", error);\n      }\n    },\n    async fetchCartFromDolibarr() {\n      try {\n        await this.fetchProducts(); // Récupère les produits de l'API Dolibarr\n\n        if (!this.products || this.products.length === 0) {\n          console.error(\"Aucun produit disponible dans 'this.products'\");\n          return;\n        }\n\n        if (!this.orderId) {\n          console.error(\"Aucune commande brouillon disponible pour récupérer le panier\");\n          return;\n        }\n\n        const apiKey = localStorage.getItem(\"apiKey\");\n        const apiLink = localStorage.getItem(\"apiLink\");\n        if (!apiKey || !apiLink) {\n          throw new Error(\"API Key ou API Link manquant\");\n        }\n        const url = `${apiLink}/orders/${this.orderId}/lines`;\n        const response = await fetch(url, {\n          headers: {\n            \"DOLAPIKEY\": apiKey,\n          },\n        });\n        const lines = await response.json();\n\n        this.cartItems = lines.map(line => {\n          const productData = this.products.find(p => p.id === line.fk_product) || {};\n          return {\n            lineId: line.id,\n            id: line.fk_product,\n            name: productData.name || \"Produit inconnu\",\n            description: productData.description || \"\",\n            image: productData.image || \"\",\n            price: line.subprice,\n            quantity: line.qty,\n          };\n        });\n        this.updateTotal();\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du panier depuis Dolibarr:\", error);\n      }\n    },\n  },\n  mounted() {\n    this.getOrCreateDraftOrder().then(orderId => {\n      if (orderId) {\n        this.fetchCartFromDolibarr();\n      }\n    });\n  },\n};\n</script>\n\n\n<style scoped>\n/* Conteneur de la page du panier */\n.cart-page {\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* Titre */\nh1 {\n  font-size: 32px;\n  color: #0e100e;\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n/* Liste des produits dans le panier */\n.cart-items {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* Chaque produit du panier */\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background-color: #f7f7f7;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n/* Détails du produit */\n.cart-item-info {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n/* Image du produit */\n.cart-item-image {\n  width: 80px;\n  height: auto;\n  border-radius: 5px;\n}\n\n/* Nom et description du produit */\n.cart-item-details {\n  max-width: 400px;\n}\n\n/* Quantité */\n.cart-item-quantity input {\n  width: 50px;\n  padding: 5px;\n  font-size: 16px;\n  text-align: center;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n/* Prix unitaire et prix total */\n.cart-item-price {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.product-unit-price,\n.product-total-price {\n  font-size: 18px;\n  color: #0e100e;\n}\n\n.product-total-price {\n  font-weight: bold;\n  margin-top: 10px;\n}\n\n/* Résumé du panier et bouton de commande */\n.cart-summary {\n  margin-top: 30px;\n  text-align: right;\n}\n\n.total {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.checkout-button {\n  padding: 10px 30px;\n  background-color: #5aaad8;\n  color: white;\n  font-size: 18px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.checkout-button:hover {\n  background-color: #0e100e;\n}\n\n/* Message quand le panier est vide */\n.empty-message {\n  text-align: center;\n  font-size: 20px;\n  color: #888;\n  margin-top: 50px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}